---
// 工作流配置数据
const workflows = [
  {
    id: 'hello-world',
    title: {
      en: 'Hello World',
      zh: 'Hello World'
    },
    description: {
      en: 'Basic agent example',
      zh: '最简单的 AI 代理数据流'
    },
    category: 'Basic',
    color: 'mofa-color-1',
    scale: 0.3,
    mermaidGraph: `
    flowchart TB
      terminal-input[🖥️ Terminal Input<br/>User Query]
      agent[🤖 Agent<br/>Process & Respond]
      
      terminal-input --> agent
      agent --> terminal-input
      
      classDef inputNode fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
      classDef agentNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
      
      class terminal-input inputNode
      class agent agentNode`
  },
  {
    id: 'arxiv-research',
    title: {
      en: 'ArXiv Research',
      zh: 'ArXiv 研究'
    },
    description: {
      en: 'Automated paper research',
      zh: '自动化研究，包含论文分析和报告生成'
    },
    category: 'Research',
    color: 'mofa-color-2',
    scale: 1.0,
    mermaidGraph: `
    flowchart TB
      terminal[🖥️ Terminal Input<br/>Research Task]
      extractor[🔍 Keyword Extractor<br/>Extract Keywords]
      downloader[📥 Paper Downloader<br/>Download Papers]
      analyzer[🔬 Paper Analyzer<br/>Analyze Content]
      writer[✍️ Report Writer<br/>Generate Report]
      feedback[💬 Feedback Agent<br/>Review & Suggest]
      refinement[🔧 Refinement Agent<br/>Improve Report]
      
      terminal --> extractor
      extractor --> downloader
      downloader --> analyzer
      terminal --> analyzer
      analyzer --> writer
      terminal --> writer
      writer --> feedback
      terminal --> feedback
      feedback --> refinement
      terminal --> refinement
      
      classDef inputNode fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
      classDef processNode fill:#fff3e0,stroke:#f57c00,stroke-width:2px
      classDef analysisNode fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
      classDef outputNode fill:#fce4ec,stroke:#c2185b,stroke-width:2px
      
      class terminal inputNode
      class extractor,downloader processNode
      class analyzer,feedback analysisNode
      class writer,refinement outputNode`
  },
  {
    id: 'rag-system',
    title: {
      en: 'RAG System',
      zh: 'RAG 系统'
    },
    description: {
      en: 'RAG for Q&A',
      zh: '检索增强生成系统，用于智能问答'
    },
    category: 'AI',
    color: 'mofa-color-3',
    scale: 0.5,
    mermaidGraph: `
    flowchart TB
      terminal[🖥️ Terminal Input<br/>User Question]
      retrieval[🔍 RAG Retrieval<br/>Search Knowledge]
      reasoner[🧠 Reasoner Agent<br/>Generate Answer]
      
      terminal --> retrieval
      retrieval --> reasoner
      terminal --> reasoner
      retrieval --> terminal
      reasoner --> terminal
      
      classDef inputNode fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
      classDef retrievalNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
      classDef reasoningNode fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
      
      class terminal inputNode
      class retrieval retrievalNode
      class reasoner reasoningNode`
  },
  {
    id: 'gosim-pedia',
    title: {
      en: 'GoSim Pedia',
      zh: 'GoSim 百科'
    },
    description: {
      en: 'Multi-agent web research',
      zh: '具有网页抓取和搜索能力的多代理系统'
    },
    category: 'Web',
    color: 'mofa-color-4',
    scale: 0.9,
    mermaidGraph: `
    flowchart TB
      openai[🤖 OpenAI Server<br/>Chat Interface]
      gosim[🎮 GoSim Pedia Agent<br/>Main Controller]
      firecrawl[🕷️ Firecrawl Agent<br/>Web Scraping]
      rag[🧠 GoSim RAG Agent<br/>Knowledge Retrieval]
      serper[🔍 Serper Search Agent<br/>Web Search]
      
      openai <--> gosim
      gosim --> firecrawl
      firecrawl --> gosim
      gosim --> rag
      rag --> gosim
      gosim --> serper
      serper --> gosim
      
      classDef serverNode fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
      classDef mainNode fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
      classDef toolNode fill:#fff3e0,stroke:#f57c00,stroke-width:2px
      
      class openai serverNode
      class gosim mainNode
      class firecrawl,rag,serper toolNode`
  },
  {
    id: 'mem0-dataflow',
    title: {
      en: 'Mem0 Memory System',
      zh: 'Mem0 记忆系统'
    },
    description: {
      en: 'Memory-enhanced dataflow',
      zh: '具有记忆检索和记录能力的增强AI数据流'
    },
    category: 'Memory',
    color: 'mofa-color-1',
    scale: 0.75,
    mermaidGraph: `
    flowchart TB
      terminal[🖥️ Terminal Input<br/>User Task]
      retrieval[🧠 Memory Retrieval<br/>Fetch Context]
      reasoner[🤔 Reasoner<br/>Process & Think]
      record[💾 Memory Record<br/>Store Results]
      
      terminal --> retrieval
      retrieval --> reasoner
      terminal --> reasoner
      reasoner --> record
      terminal --> record
      retrieval --> terminal
      reasoner --> terminal
      record --> terminal
      
      classDef inputNode fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
      classDef memoryNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
      classDef processNode fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
      classDef storageNode fill:#fff3e0,stroke:#f57c00,stroke-width:2px
      
      class terminal inputNode
      class retrieval memoryNode
      class reasoner processNode
      class record storageNode`
  },
  {
    id: 'intelligent-agent-creation',
    title: {
      en: 'Agent Creation System',
      zh: '代理创建系统'
    },
    description: {
      en: 'Auto-generate AI agents',
      zh: '自动生成AI代理的智能系统'
    },
    category: 'Meta-AI',
    color: 'mofa-color-2',
    scale: 0.75,
    mermaidGraph: `
    flowchart TB
      openai[🤖 OpenAI Server<br/>API Interface]
      config[⚙️ Config Generator<br/>Generate Settings]
      code[👨‍💻 Code Generator<br/>Write Agent Code]
      dependency[📦 Dependency Generator<br/>Manage Dependencies]
      
      openai --> config
      openai --> code
      config --> code
      openai --> dependency
      code --> dependency
      config --> dependency
      dependency --> openai
      
      classDef serverNode fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
      classDef generatorNode fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
      classDef codeNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
      classDef depNode fill:#fff3e0,stroke:#f57c00,stroke-width:2px
      
      class openai serverNode
      class config generatorNode
      class code codeNode
      class dependency depNode`
  },
  {
    id: 'xiaowang-workflow',
    title: {
      en: 'XiaoWang Multi-Agent',
      zh: '多代理系统'
    },
    description: {
      en: 'Multi-agent reflection & generation',
      zh: '具有反思和生成能力的复杂多代理数据流'
    },
    category: 'Complex',
    color: 'mofa-color-3',
    scale: 0.75,
    mermaidGraph: `
    flowchart TB
      terminal[🖥️ XiaoWang Terminal<br/>Task Input]
      dlc[🎯 Agent DLC<br/>Task Processing]
      generate[🔧 Agent Generate<br/>Content Creation]
      reflection[🤔 Agent Reflection<br/>Self-Improvement]
      
      terminal --> dlc
      dlc --> generate
      generate --> reflection
      reflection --> generate
      generate --> dlc
      dlc --> terminal
      generate --> terminal
      reflection --> terminal
      
      classDef inputNode fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
      classDef taskNode fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
      classDef generateNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
      classDef reflectNode fill:#fff3e0,stroke:#f57c00,stroke-width:2px
      
      class terminal inputNode
      class dlc taskNode
      class generate generateNode
      class reflection reflectNode`
  }
];

const repoLinks = {
  'hello-world': 'https://github.com/mofa-org/mofa/tree/main/python/examples/hello_world',
  'arxiv-research': 'https://github.com/mofa-org/mofa/tree/main/python/examples/arxiv_research',
  'rag-system': 'https://github.com/mofa-org/mofa/tree/main/python/examples/rag',
  'gosim-pedia': 'https://github.com/mofa-org/mofa/tree/main/python/examples/gosim-pedia',
  'mem0-dataflow': 'https://github.com/mofa-org/mofa/tree/main/python/examples/mem0-dataflow',
  'intelligent-agent-creation': 'https://github.com/mofa-org/mofa/tree/main/python/examples/intelligent_agent_creation',
  'xiaowang-workflow': 'https://github.com/mofa-org/mofa/tree/main/python/examples/xiaowang'
};
---

<section class="py-20" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);">
  <div class="container mx-auto px-4">
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4" 
          data-en="Real Examples: <span class='gradient-text'>AI Dataflows</span> in Action"
          data-zh="实际案例：<span class='gradient-text'>AI 数据流</span>实战">
        Real Examples: <span class="gradient-text">AI Dataflows</span> in Action
      </h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto" 
         data-en="Explore different types of AI dataflows - from simple hello world to complex research automation"
         data-zh="探索不同类型的 AI 数据流 - 从简单的Hello World到复杂的研究自动化">
        Explore different types of AI dataflows - from simple hello world to complex research automation
      </p>
    </div>

    <!-- Workflow Horizontal Scroll Container -->
    <div class="workflow-container">
      <div class="workflow-scroll">
        {workflows.map((workflow) => (
          <div class="workflow-card bg-white rounded-lg shadow-lg border-4 border-gray-300 hover:border-4 hover:border-indigo-500 transition-all duration-300 overflow-hidden">
            <!-- Header -->
            <div class={`${workflow.color} p-6 text-white`}>
              <h3 class="text-2xl font-bold mb-2" 
                  data-en={workflow.title.en}
                  data-zh={workflow.title.zh}>
                {workflow.title.en}
              </h3>
              <p class="text-white text-opacity-90" 
                 data-en={workflow.description.en}
                 data-zh={workflow.description.zh}>
                {workflow.description.en}
              </p>
            </div>

            <!-- Mermaid Graph -->
            <div class="chart-container">
              <div class={`mermaid-container-${workflow.id} bg-gray-50 rounded-lg p-4 border-2 border-gray-200`} data-scale={workflow.scale}>
                <div class={`mermaid mermaid-${workflow.id}`}>
                  {workflow.mermaidGraph}
                </div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="p-4 flex justify-end gap-2">
              <!-- Zoom / View Button -->
              <button type="button" class={`workflow-view-btn ${workflow.color}`} data-target-id={workflow.id}
                      aria-label="View Diagram"
                      data-en="View" data-zh="查看">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-2 w-2" fill="currentColor" viewBox="0 0 24 24"><path d="M10 2a8 8 0 1 0 4.906 14.32l4.387 4.387a1 1 0 0 0 1.414-1.414l-4.387-4.387A8 8 0 0 0 10 2zm0 2a6 6 0 1 1 0 12A6 6 0 0 1 10 4z"/></svg>
                <span class="ml-1 hidden sm:inline">View</span>
              </button>

              <!-- GitHub Link Button -->
              <a href={repoLinks[workflow.id]} target="_blank" rel="noopener noreferrer"
                 class={`workflow-code-btn ${workflow.color}`}
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-2 w-2" fill="currentColor" viewBox="0 0 24 24"><path d="M12 .5C5.73.5.49 5.74.49 12.02c0 5.11 3.29 9.44 7.86 10.97.58.11.79-.25.79-.56 0-.28-.01-1.02-.02-2-3.2.7-3.88-1.55-3.88-1.55-.53-1.33-1.3-1.68-1.3-1.68-1.06-.72.08-.71.08-.71 1.17.08 1.79 1.2 1.79 1.2 1.04 1.78 2.73 1.27 3.4.97.11-.75.41-1.27.75-1.56-2.56-.29-5.26-1.28-5.26-5.7 0-1.26.46-2.29 1.2-3.1-.12-.29-.52-1.45.11-3.02 0 0 .97-.31 3.18 1.19a11.1 11.1 0 0 1 2.9-.39c.98.01 1.97.13 2.9.39 2.21-1.5 3.17-1.19 3.17-1.19.63 1.57.23 2.73.11 3.02.75.81 1.2 1.84 1.2 3.1 0 4.43-2.71 5.41-5.29 5.69.42.36.8 1.09.8 2.2 0 1.59-.02 2.87-.02 3.26 0 .31.2.68.8.56a10.53 10.53 0 0 0 7.85-10.97C23.51 5.74 18.27.5 12 .5z"/></svg>
                <span class="ml-1" data-en="Code" data-zh="代码">Code</span>
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Scroll hint -->
    <div class="text-center mt-8">
      <p class="text-sm text-gray-500" 
         data-en="← Scroll horizontally to explore more workflows →"
         data-zh="← 水平滚动以探索更多数据流 →">
        ← Scroll horizontally to explore more workflows →
      </p>
    </div>
  </div>
</section>

<!-- Mermaid Script -->
<script>
  // Import and initialize Mermaid
  import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs').then((mermaid) => {
    mermaid.default.initialize({
      startOnLoad: true,
      theme: 'base',
      themeVariables: {
        primaryColor: '#6366F1',
        primaryTextColor: '#1F2937',
        primaryBorderColor: '#6366F1',
        lineColor: '#0EA5E9',
        sectionBkgColor: '#F8FAFC',
        altSectionBkgColor: '#FFFFFF',
        gridColor: '#E5E7EB',
        secondaryColor: '#F59E0B',
        tertiaryColor: '#F59E0B'
      },
      fontFamily: 'Inter, system-ui, -apple-system, sans-serif',
      fontSize: 20,
      flowchart: {
        htmlLabels: true,
        curve: 'basis',
        useMaxWidth: true,
        rankdir: 'TB',
        padding: 20
      },
      security: {
        level: 'loose'
      },
      maxTextSize: 90000,
      maxEdges: 500
    });

    // Render all mermaid diagrams
    setTimeout(() => {
      mermaid.default.run();
      
      // 自动调整图表大小以适应容器
      setTimeout(() => {
        document.querySelectorAll('.mermaid').forEach(element => {
          const svg = element.querySelector('svg');
          const container = element.closest('[data-scale]');
          const scale = container ? parseFloat(container.getAttribute('data-scale')) : 1;
          
          if (svg) {
            // 移除固定的宽高，使用viewBox进行缩放
            svg.removeAttribute('height');
            svg.removeAttribute('width');
            svg.style.maxWidth = '100%';
            svg.style.maxHeight = '100%';
            
            // 确保viewBox存在并设置preserveAspectRatio
            if (!svg.getAttribute('viewBox')) {
              const bbox = svg.getBBox();
              svg.setAttribute('viewBox', `0 0 ${bbox.width + 20} ${bbox.height + 20}`);
            }
            svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
            
            // 应用个别缩放
            svg.style.width = `${scale * 100}%`;
            svg.style.height = `${scale * 100}%`;
            svg.style.transform = 'none';
          }
        });
        
        // 初始化自动滚动
        initAutoScroll();
        // 初始化点击放大画廊模式
        setupGallery();
      }, 500);
    }, 100);
  }).catch(error => {
    console.error('Failed to load Mermaid:', error);
  });

  // 自动滚动功能（无限循环）
  function initAutoScroll() {
    const scrollContainer = document.querySelector('.workflow-scroll');
    if (!scrollContainer) return;

    const scrollSpeed = 0.5; // 调慢滚动速度 (px per frame)
    let animationId = null;
    let isPaused = false;
    let isUserInteracting = false;
    let interactTimeout = null;

    // 复制内容两次（前后各一份），形成首尾衔接
    const originalCards = Array.from(scrollContainer.children);
    originalCards.forEach(card => {
      scrollContainer.appendChild(card.cloneNode(true));
      scrollContainer.insertBefore(card.cloneNode(true), scrollContainer.firstChild);
    });

    // 初始化滚动位置到真正内容的第一份（中间区域）
    requestAnimationFrame(() => {
      const halfWidth = scrollContainer.scrollWidth / 3; // 三份中的第二份起点
      scrollContainer.scrollLeft = halfWidth;
    });

    function loopBoundaryCheck() {
      const thirdWidth = scrollContainer.scrollWidth / 3;
      if (scrollContainer.scrollLeft <= thirdWidth * 0.2) {
        // 靠近最左侧（第一份末尾）→ 跳到中间
        scrollContainer.scrollLeft += thirdWidth;
      } else if (scrollContainer.scrollLeft >= thirdWidth * 1.8) {
        // 靠近最右侧（第三份开始）→ 跳回中间
        scrollContainer.scrollLeft -= thirdWidth;
      }
    }

    function autoScroll() {
      if (!isPaused && !isUserInteracting && scrollContainer) {
        scrollContainer.scrollLeft += scrollSpeed;
        loopBoundaryCheck();
      }
      animationId = requestAnimationFrame(autoScroll);
    }

    // 用户交互检测
    function onUserInteract() {
      isUserInteracting = true;
      if (interactTimeout) clearTimeout(interactTimeout);
      interactTimeout = setTimeout(() => {
        isUserInteracting = false;
      }, 2000);
    }

    ['wheel', 'touchstart', 'touchmove', 'mousedown', 'mouseup'].forEach(evt => {
      scrollContainer.addEventListener(evt, onUserInteract, { passive: true });
    });

    // 鼠标悬浮暂停
    scrollContainer.addEventListener('mouseenter', () => { isPaused = true; });
    scrollContainer.addEventListener('mouseleave', () => { isPaused = false; });

    // 滚动事件本身也用于边界检测
    scrollContainer.addEventListener('scroll', loopBoundaryCheck);

    autoScroll();

    window.addEventListener('beforeunload', () => {
      if (animationId) cancelAnimationFrame(animationId);
      if (interactTimeout) clearTimeout(interactTimeout);
    });
  }

  // 画廊模式：点击卡片放大查看（事件委托）
  function setupGallery() {
    // 设置所有卡片cursor样式（初次运行 & 后续克隆的）
    document.querySelectorAll('.workflow-card').forEach(c => {
      c.style.cursor = 'zoom-in';
    });

    // 使用 document 级事件委托，保证任何时间动态插入的卡片都有效
    document.addEventListener('click', (e) => {
      const card = e.target.closest('.workflow-card');
      if (!card) return;
      let contentEl = card.querySelector('.mermaid svg') || card.querySelector('.mermaid');
      if (!contentEl) return;
      console.debug('[Gallery] Card clicked, opening modal');
      openModal(contentEl);
    }, true); // capture 阶段，避免内部阻止
  }

  function openModal(element) {
    if (!element) return;

    // Collect all workflow diagrams (svg or mermaid container) for navigation
    const allDiagrams = Array.from(document.querySelectorAll('[class^="mermaid-container-"] svg, [class^="mermaid-container-"] .mermaid')).filter(Boolean);
    if (!allDiagrams.includes(element)) allDiagrams.push(element);
    let currentIndex = allDiagrams.findIndex(el => el === element);
    if (currentIndex === -1) currentIndex = 0;

    // Remove existing modal if any
    const existing = document.querySelector('.workflow-modal');
    if (existing) existing.remove();

    // Create modal overlay
    const modal = document.createElement('div');
    modal.className = 'workflow-modal';
    modal.style.cssText = 'position:fixed;inset:0;z-index:9999;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,0.8);padding:2rem;';

    // Modal inner HTML with nav & zoom controls
    modal.innerHTML = `
      <button class="gallery-nav gallery-prev" aria-label="Prev">&#9664;</button>
      <button class="gallery-nav gallery-next" aria-label="Next">&#9654;</button>
      <div class="workflow-modal-content" style="position:relative;width:90vw;height:90vh;overflow:hidden;background:#FFF3D9;border-radius:8px;border:4px solid var(--mondrian-black);box-shadow:6px 6px 0 var(--mondrian-black);display:flex;flex-direction:column;">
        <button class="workflow-modal-close" aria-label="Close" style="position:absolute;top:0.25rem;right:0.5rem;font-size:1.5rem;background:transparent;border:none;color:#333;cursor:pointer;">&times;</button>
        <div class="workflow-modal-body" style="padding:1rem;display:flex;align-items:center;justify-content:center;flex:1;overflow:auto;"></div>
        <div class="gallery-zoom" style="position:absolute;bottom:0.5rem;right:0.75rem;display:flex;gap:0.5rem;">
          <button class="zoom-in" aria-label="Zoom in" style="font-size:1.25rem;width:2rem;height:2rem;border:none;border-radius:4px;background:#e5e7eb;cursor:pointer;">+</button>
          <button class="zoom-out" aria-label="Zoom out" style="font-size:1.25rem;width:2rem;height:2rem;border:none;border-radius:4px;background:#e5e7eb;cursor:pointer;">&minus;</button>
        </div>
      </div>`;

    document.body.appendChild(modal);

    const body = modal.querySelector('.workflow-modal-body');
    let zoom = 1;

    function render() {
      body.innerHTML = '';
      const src = allDiagrams[currentIndex];
      if (!src) return;
      let clone = src.cloneNode(true);
      if (clone.tagName.toLowerCase() === 'svg') {
        clone.removeAttribute('width');
        clone.removeAttribute('height');
        clone.style.width = '100%';
        clone.style.height = 'auto';
        clone.style.maxWidth = '100%';
        clone.style.maxHeight = '100%';
      }
      clone.style.transformOrigin = 'center center';
      clone.style.transform = `scale(${zoom})`;
      body.appendChild(clone);
    }

    function changeIndex(delta) {
      currentIndex = (currentIndex + delta + allDiagrams.length) % allDiagrams.length;
      zoom = 1;
      render();
    }

    // initial render
    render();

    // Event listeners
    modal.querySelector('.gallery-prev').addEventListener('click', () => changeIndex(-1));
    modal.querySelector('.gallery-next').addEventListener('click', () => changeIndex(1));
    modal.querySelector('.zoom-in').addEventListener('click', () => { zoom = Math.min(zoom + 0.2, 4); render(); });
    modal.querySelector('.zoom-out').addEventListener('click', () => { zoom = Math.max(zoom - 0.2, 0.4); render(); });

    const prevOverflow = document.body.style.overflow;
    document.body.style.overflow = 'hidden';

    const close = () => {
      modal.remove();
      document.body.style.overflow = prevOverflow;
      document.removeEventListener('keydown', escHandler);
      document.removeEventListener('keydown', navHandler);
    };

    modal.querySelector('.workflow-modal-close').addEventListener('click', close);
    modal.addEventListener('click', (ev) => { if (ev.target === modal) close(); });

    const escHandler = (ev) => { if (ev.key === 'Escape') close(); };
    document.addEventListener('keydown', escHandler);

    const navHandler = (ev) => {
      if (ev.key === 'ArrowLeft') changeIndex(-1);
      else if (ev.key === 'ArrowRight') changeIndex(1);
      else if (ev.key === '+') { zoom = Math.min(zoom + 0.2, 4); render(); }
      else if (ev.key === '-') { zoom = Math.max(zoom - 0.2, 0.4); render(); }
    };
    document.addEventListener('keydown', navHandler);
  }

  // Delegate click for newly added view buttons (supports cloned cards as well)
  document.addEventListener('click', (e) => {
    const btn = e.target.closest('.workflow-view-btn');
    if (!btn) return;
    e.stopPropagation();
    const id = btn.getAttribute('data-target-id');
    const container = document.querySelector(`.mermaid-container-${id} svg`) ||
                      document.querySelector(`.mermaid-container-${id} .mermaid`);
    if (container) {
      console.log('[ViewBtn] opening modal for', id);
      window.openWorkflowModal(container);
    }
  }, true);

  // Set cursor style for any current & future cards via mutation observer
  const setCursor = () => document.querySelectorAll('.workflow-card').forEach(c=>c.style.cursor='zoom-in');
  setCursor();
  new MutationObserver(setCursor).observe(document.querySelector('.workflow-scroll'), {childList:true});

  window.openWorkflowModal = openModal;
</script>

<style>
/* MoFA 品牌颜色定义 */
.mofa-color-1 {
  background: linear-gradient(135deg, #FC6A59, #E55A4A);
}

.mofa-color-2 {
  background: linear-gradient(135deg, #FFC53D, #E6B034);
}

.mofa-color-3 {
  background: linear-gradient(135deg, #FD543F, #E64936);
}

.mofa-color-4 {
  background: linear-gradient(135deg, #6CCBCD, #5BB7B9);
}

.workflow-container {
  position: relative;
  max-width: 100vw;
  overflow: hidden;
  margin: 0 auto;
}

.workflow-scroll {
  display: flex;
  gap: 1.5rem;
  overflow-x: auto; /* 恢复手动滚动功能 */
  padding: 1rem 0;
  scroll-behavior: auto; /* 改回auto，避免与JS冲突 */
  white-space: nowrap;
  scrollbar-width: none;
  scrollbar-color: #cbd5e1 #f1f5f9;
}

.workflow-scroll::-webkit-scrollbar {
  display: none;
}

.workflow-scroll::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

.workflow-scroll::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

.workflow-scroll::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}

.workflow-card {
  flex: 0 0 auto;
  width: 380px; /* 从450px进一步缩小到380px */
  height: 520px; /* 从600px进一步缩小到520px */
  transform: translateY(0);
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  border: 3px solid var(--mondrian-black);
}

.workflow-card:hover {
  transform: translateY(-4px) scale(1.02); /* 添加轻微放大效果 */
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  z-index: 10;
  box-shadow: 4px 4px 0 var(--mondrian-black);
  transform: translate(-2px,-2px) scale(1.02);
}

.chart-container {
  flex: 1;
  padding: 1rem; /* 从1.5rem调整为1rem */
  display: flex;
  flex-direction: column;
  min-height: 0;
  position: relative;
  overflow: hidden;
}

.chart-container > div {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 0;
  position: relative;
  overflow: hidden;
}

.mermaid {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 250px; /* 从300px进一步缩小到250px */
  font-size: 18px; /* 从20px进一步缩小到18px */
}

.mermaid svg {
  max-width: 100% !important;
  max-height: 100% !important;
  width: auto !important;
  height: auto !important;
}

/* Custom mermaid styling */
.mermaid .node rect,
.mermaid .node circle,
.mermaid .node ellipse,
.mermaid .node polygon {
  stroke-width: 2px;
}

.mermaid .node text {
  font-size: 16px !important; /* 从18px进一步缩小到16px */
  font-weight: 600 !important;
  font-family: 'Inter', system-ui, sans-serif !important;
}

.mermaid .edgePath path {
  stroke-width: 2px;
}

.mermaid .edgeLabel {
  background-color: white;
  border-radius: 6px;
  padding: 3px 6px; /* 从4px 8px进一步缩小到3px 6px */
  font-size: 14px; /* 从16px进一步缩小到14px */
  font-weight: 500;
  font-family: 'Inter', system-ui, sans-serif;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* 工作流卡片头部调整 */
.workflow-card .mofa-color-1,
.workflow-card .mofa-color-2,
.workflow-card .mofa-color-3,
.workflow-card .mofa-color-4 {
  padding: 1rem 1.5rem; /* 从1.5rem调整为1rem 1.5rem */
}

.workflow-card h3 {
  font-size: 1.5rem; /* 从2xl调整为1.5rem */
  margin-bottom: 0.5rem; /* 从0.75rem调整为0.5rem */
}

.workflow-card p {
  font-size: 0.875rem; /* 调整描述文字大小 */
  line-height: 1.4;
}

/* 禁用Mermaid容器中的mondrian-block动画效果 */
.mermaid-container-hello-world::after,
.mermaid-container-arxiv-research::after,
.mermaid-container-rag-system::after,
.mermaid-container-gosim-pedia::after,
.mermaid-container-mem0-dataflow::after,
.mermaid-container-intelligent-agent-creation::after,
.mermaid-container-xiaowang-workflow::after,
.chart-container::after,
.chart-container > div::after {
  display: none !important;
}

.workflow-card *::after,
.workflow-card *::before,
.workflow-card::after,
.workflow-card::before {
  animation: none !important;
  display: none !important;
}

/* 确保Mermaid容器不受全局mondrian样式影响 */
.mermaid,
.mermaid *,
.chart-container,
.chart-container * {
  position: relative;
}

.mermaid::after,
.mermaid::before,
.mermaid *::after,
.mermaid *::before {
  display: none !important;
}

/* 隐藏可能的橙色标记元素 */
.workflow-card [style*="orange"],
.workflow-card [style*="#FFA500"],
.workflow-card [style*="#FF6600"],
.workflow-card [style*="#F59E0B"],
.workflow-card [style*="rgb(245, 158, 11)"],
.workflow-card .bg-orange-500,
.workflow-card .text-orange-500 {
  display: none !important;
}

/* 隐藏所有positioned的小元素（可能是橙色点） */
.workflow-card *[style*="position: absolute"][style*="width"][style*="height"] {
  display: none !important;
}

/* 专门针对 Mermaid edgeLabel 元素的隐藏规则 */
.workflow-card .edgeLabels,
.workflow-card .edgeLabel,
.workflow-card g.edgeLabels,
.workflow-card g.edgeLabel,
.workflow-card .edgeLabel span,
.workflow-card .edgeLabel div,
.workflow-card .edgeLabel foreignObject {
  display: none !important;
  opacity: 0 !important;
  visibility: hidden !important;
}

/* 隐藏 Mermaid SVG 中的所有 edgeLabel 相关元素 */
.mermaid svg .edgeLabels,
.mermaid svg .edgeLabel,
.mermaid svg g.edgeLabels,
.mermaid svg g.edgeLabel {
  display: none !important;
}

/* 隐藏所有空的或只包含空白的标签元素 */
.workflow-card span:empty,
.workflow-card div:empty,
.workflow-card .edgeLabel span:empty,
.workflow-card foreignObject[width="8"],
.workflow-card foreignObject[height="19.1953125"] {
  display: none !important;
}

/* 更精确地隐藏 Mermaid SVG 中的 edgeLabel 元素 */
.mermaid svg g.edgeLabels,
.mermaid svg g.edgeLabel,
.mermaid svg g > g > g.edgeLabels,
.mermaid svg g > g > g.edgeLabel,
[id^="mermaid-"] g.edgeLabels,
[id^="mermaid-"] g.edgeLabel,
[id^="mermaid-"] > g > g > g.edgeLabels,
[id^="mermaid-"] > g > g > g.edgeLabel {
  display: none !important;
  opacity: 0 !important;
  visibility: hidden !important;
}

/* 隐藏所有 Mermaid 生成的空标签和小尺寸元素 */
.mermaid svg foreignObject[width="8"],
.mermaid svg foreignObject[height*="19"],
.mermaid svg .label foreignObject,
.mermaid svg g.label,
[id^="mermaid-"] foreignObject[width="8"],
[id^="mermaid-"] foreignObject[height*="19"],
[id^="mermaid-"] .label foreignObject,
[id^="mermaid-"] g.label {
  display: none !important;
}

/* 响应式调整 */
@media (max-width: 768px) {
  .workflow-card {
    width: 300px; /* 从350px进一步缩小到300px */
    height: 450px; /* 从500px进一步缩小到450px */
  }
  
  .workflow-scroll {
    gap: 1rem;
  }
  
  .mermaid {
    font-size: 18px;
    min-height: 250px;
  }
  
  .mermaid .node text {
    font-size: 16px !important;
  }
  
  .mermaid .edgeLabel {
    font-size: 14px;
    padding: 3px 6px;
  }

  .chart-container {
    padding: 0.75rem;
  }
}

@media (max-width: 480px) {
  .workflow-card {
    width: 250px; /* 从280px进一步缩小到250px */
    height: 400px; /* 从450px进一步缩小到400px */
  }

  .mermaid {
    font-size: 14px;
    min-height: 180px;
  }
  
  .mermaid .node text {
    font-size: 14px !important;
  }
  
  .mermaid .edgeLabel {
    font-size: 12px;
    padding: 2px 4px;
  }

  .chart-container {
    padding: 0.5rem;
  }
}

.workflow-container *::after,
.workflow-container *::before {
  display: none !important;
}

/* 更强力的全局禁用规则 - 针对工作流区域 */
.workflow-container,
.workflow-container *,
.workflow-card,
.workflow-card *,
.chart-container,
.chart-container *,
.mermaid,
.mermaid * {
  position: relative !important;
}

.workflow-container::after,
.workflow-container::before,
.workflow-container *::after,
.workflow-container *::before,
.workflow-card::after,
.workflow-card::before,
.workflow-card *::after,
.workflow-card *::before {
  display: none !important;
  content: none !important;
  animation: none !important;
  visibility: hidden !important;
  opacity: 0 !important;
}

/* 禁用可能的浮动元素 */
.workflow-container [style*="position: absolute"],
.workflow-card [style*="position: absolute"],
.chart-container [style*="position: absolute"] {
  display: none !important;
}

/* 专门针对 Mermaid edgeLabel 元素的隐藏规则 */
.workflow-card .edgeLabels,
.workflow-card .edgeLabel,
.workflow-card g.edgeLabels,
.workflow-card g.edgeLabel,
.workflow-card .edgeLabel span,
.workflow-card .edgeLabel div,
.workflow-card .edgeLabel foreignObject {
  display: none !important;
  opacity: 0 !important;
  visibility: hidden !important;
}

/* Modal 画廊样式 */
.workflow-modal {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000; /* 提高 */
  padding: 2rem;
}

.workflow-modal-content {
  position: relative;
  width: 90vw;
  height: 90vh;
  overflow: hidden;
  background: #FFF3D9;
  border: 4px solid var(--mondrian-black);
  border-radius: 8px;
  box-shadow: 6px 6px 0 var(--mondrian-black);
  display: flex;
  flex-direction: column;
}

.workflow-modal-body {
  padding: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  flex: 1;
  overflow: auto;
}

.workflow-modal-close {
  position: absolute;
  top: 0.25rem;
  right: 0.5rem;
  font-size: 1.5rem;
  background: transparent;
  border: none;
  color: #333;
  cursor: pointer;
}

/* Code button flat style */
.workflow-code-btn {
  display: inline-flex;
  align-items: center;
  font-size: 0.55rem;
  padding: 4px 10px;
  color: #ffffff;
  text-decoration: none;
  font-weight: 700;
  border: 3px solid var(--mondrian-black);
  box-shadow: none;
  transition: 0.2s ease;
  transform: translate(0,0);
}

.workflow-code-btn:hover {
  transform: translate(-2px,-2px);
  box-shadow: 4px 4px 0 var(--mondrian-black);
}

.workflow-code-btn svg {
  flex-shrink: 0;
}

/* View button shares style with code button */
.workflow-view-btn {
  display: inline-flex;
  align-items: center;
  font-size: 0.55rem;
  padding: 4px 10px;
  color: #ffffff;
  text-decoration: none;
  font-weight: 700;
  border: 3px solid var(--mondrian-black);
  transition: 0.2s ease;
  transform: translate(0,0);
}

.workflow-view-btn:hover {
  transform: translate(-2px,-2px);
  box-shadow: 4px 4px 0 var(--mondrian-black);
}

.workflow-view-btn svg {
  flex-shrink: 0;
}

/* Gallery navigation styles */
.gallery-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(255, 255, 255, 0.9);
  border: none;
  border-radius: 50%;
  width: 3rem;
  height: 3rem;
  font-size: 1.5rem;
  cursor: pointer;
  z-index: 10;
  transition: all 0.2s ease;
  color: #333;
  display: flex;
  align-items: center;
  justify-content: center;
}

.gallery-nav:hover {
  background: rgba(255, 255, 255, 1);
  transform: translateY(-50%) scale(1.1);
}

.gallery-prev {
  left: 1rem;
}

.gallery-next {
  right: 1rem;
}
</style> 