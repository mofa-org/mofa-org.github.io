---
// Developer Hall of Fame component with cached contributors and prize data
import { getCollection } from 'astro:content';
import { parsePrizeContent } from '../utils/prizeParser';
import { parseContributorsContent } from '../utils/contributorsParser';
import { parseCoreTeamContent } from '../utils/coreTeamParser';

let mofaContributors = [];
let doraContributors = [];
let prizeCategories = [];
let coreTeam = [];

// Function to fetch all contributors with pagination
async function fetchAllContributors(repo) {
  let allContributors = [];
  let page = 1;
  const perPage = 100; // GitHub API max per page
  
  try {
    while (true) {
      const response = await fetch(`https://api.github.com/repos/${repo}/contributors?per_page=${perPage}&page=${page}`);
      
      if (!response.ok) {
        console.log(`Failed to fetch ${repo} contributors page ${page}:`, response.status);
        break;
      }
      
      const data = await response.json();
      
      if (data.length === 0) {
        // No more contributors
        break;
      }
      
      allContributors = allContributors.concat(data);
      
      // If we got less than perPage, we've reached the end
      if (data.length < perPage) {
        break;
      }
      
      page++;
    }
  } catch (error) {
    console.log(`Error fetching ${repo} contributors:`, error);
  }
  
  return allContributors;
}

// Load contributors from cache files (priority) or fallback to API
try {
  const prizeEntries = await getCollection('prize');
  
  // Load MoFA contributors from cache
  const mofaCacheEntry = prizeEntries.find(entry => entry.data.category === 'mofa' && entry.data.type === 'contributors');
  if (mofaCacheEntry) {
    mofaContributors = parseContributorsContent(mofaCacheEntry.body, mofaCacheEntry.data);
    console.log(`Loaded ${mofaContributors.length} MoFA contributors from cache (${mofaCacheEntry.data.last_updated})`);
  } else {
    console.log('No MoFA contributors cache found, falling back to API...');
    // Fallback to API (keep original logic as backup)
    const mofaNewData = await fetchAllContributors('mofa-org/mofa');
    const mofaOldData = await fetchAllContributors('moxin-org/mofa');
    
    const allMofaContributors = new Map();
    
    mofaNewData.filter(contributor => contributor.type === 'User').forEach(contributor => {
      allMofaContributors.set(contributor.login, {
        name: contributor.login,
        role: { en: 'Contributor', zh: '贡献者' },
        avatar: contributor.avatar_url,
        github: contributor.html_url,
        largeImage: `/images/${contributor.login}.jpg`,
        contributions: contributor.contributions,
        repositories: ['mofa-org/mofa']
      });
    });
    
    mofaOldData.filter(contributor => contributor.type === 'User').forEach(contributor => {
      if (allMofaContributors.has(contributor.login)) {
        const existing = allMofaContributors.get(contributor.login);
        existing.contributions += contributor.contributions;
        existing.repositories.push('moxin-org/mofa');
      } else {
        allMofaContributors.set(contributor.login, {
          name: contributor.login,
          role: { en: 'Contributor', zh: '贡献者' },
          avatar: contributor.avatar_url,
          github: contributor.html_url,
          largeImage: `/images/${contributor.login}.jpg`,
          contributions: contributor.contributions,
          repositories: ['moxin-org/mofa']
        });
      }
    });
    
    mofaContributors = Array.from(allMofaContributors.values()).map(contributor => ({
      ...contributor,
      desc: { 
        en: `${contributor.contributions} contributions to MoFA (${contributor.repositories.join(', ')})`, 
        zh: `为 MoFA 贡献了 ${contributor.contributions} 次提交 (${contributor.repositories.join(', ')})` 
      }
    }));
    
    console.log(`Fetched ${mofaContributors.length} MoFA contributors from API fallback`);
  }
  
  // Load Dora-rs contributors from cache
  const doraCacheEntry = prizeEntries.find(entry => entry.data.category === 'dora' && entry.data.type === 'contributors');
  if (doraCacheEntry) {
    doraContributors = parseContributorsContent(doraCacheEntry.body, doraCacheEntry.data);
    console.log(`Loaded ${doraContributors.length} Dora-rs contributors from cache (${doraCacheEntry.data.last_updated})`);
  } else {
    console.log('No Dora-rs contributors cache found, falling back to API...');
    // Fallback to API
    const doraData = await fetchAllContributors('dora-rs/dora');
    doraContributors = doraData
      .filter(contributor => contributor.type === 'User')
      .map(contributor => ({
        name: contributor.login,
        role: { en: 'Contributor', zh: '贡献者' },
        avatar: contributor.avatar_url,
        github: contributor.html_url,
        largeImage: `/images/${contributor.login}.jpg`,
        desc: { 
          en: `${contributor.contributions} contributions to Dora-rs`, 
          zh: `为 Dora-rs 贡献了 ${contributor.contributions} 次提交` 
        }
      }));
    console.log(`Fetched ${doraContributors.length} Dora-rs contributors from API fallback`);
  }
  // Load core team data
  const coreTeamEntry = prizeEntries.find(entry => entry.data.type === 'core');
  if (coreTeamEntry) {
    const coreTeamCategory = parseCoreTeamContent(coreTeamEntry.body, coreTeamEntry.data);
    coreTeam = coreTeamCategory.contributors;
    console.log(`Loaded ${coreTeam.length} core team members from markdown`);
  } else {
    console.log('No core team data found, using fallback');
  }
  
  // Load prize data from the same prizeEntries
  for (const entry of prizeEntries) {
    const { data, body } = entry;
    // Skip contributors cache files and core team, only process prize/hackathon data
    if (data.type !== 'contributors' && data.type !== 'core') {
      const prizeCategory = parsePrizeContent(body, data);
      prizeCategories.push(prizeCategory);
    }
  }
  console.log(`Loaded ${prizeCategories.length} prize categories from markdown files`);
} catch (error) {
  console.log('Failed to load contributors and prize data:', error);
}

const categories = [
  {
    id: 'core',
    name: { en: 'MoFA Core Team', zh: 'MoFA Core Team' },
    contributors: coreTeam
  },
  {
    id: 'contributors',
    name: { en: 'MoFA Contributors', zh: 'MoFA 贡献者' },
    contributors: mofaContributors
  },
  {
    id: 'dora',
    name: { en: 'Dora-rs Contributors', zh: 'Dora-rs 贡献者' },
    contributors: doraContributors
  },
  // Prize categories loaded from markdown files
  ...prizeCategories
];
---

<section id="hall-of-fame" class="py-20" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);">
  <div class="container mx-auto">
    <div class="text-center mb-12">
      <h2 class="text-4xl font-bold mb-4" data-en="Developer <span class='gradient-text'>Hall of Fame</span>" data-zh="开发者 <span class='gradient-text'>殿堂</span>">
        Developer <span class="gradient-text">Hall of Fame</span>
      </h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto" data-en="We celebrate everyone who made MoFA possible" data-zh="向每一位让 MoFA 成为可能的开发者致敬">We celebrate everyone who made MoFA possible</p>
    </div>

    <ul class="flex flex-wrap justify-center gap-4 mb-10" id="hof-tabs">
      {categories.map(cat => (
        <li class="px-4 py-2 rounded-full border-2 border-gray-400 cursor-pointer transition hover:bg-gray-100 text-sm sm:text-base font-medium category-tab" data-category={cat.id}>
          <span data-en={cat.name.en} data-zh={cat.name.zh}>{cat.name.en}</span>
        </li>
      ))}
    </ul>

    {categories.map(cat => (
      <div class="flex flex-wrap justify-center gap-8 category-content" data-category={cat.id} style={cat.id === 'contributors' ? 'display:flex;' : 'display:none;'}>
        {cat.contributors.map(person => (
          <div class="relative contributor-item">
            <div class="w-24 h-24 rounded-full overflow-hidden border-4 border-gray-300 shadow-lg hover:border-blue-500 transition-all duration-300 cursor-pointer contributor-avatar hover:shadow-xl hover:scale-105" 
                 data-name={person.name}
                 data-role-en={person.role.en}
                 data-role-zh={person.role.zh}
                 data-github={person.github}
                 data-desc-en={person.desc.en}
                 data-desc-zh={person.desc.zh}
                 data-large-image={person.largeImage || person.avatar}
                 data-avatar={person.avatar}>
              <img src={person.avatar} alt={person.name} class="w-full h-full object-cover" />
            </div>
            
            <!-- 轻量级 Tooltip (移动端) -->
            <div class="contributor-tooltip md:hidden absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-gray-900 text-white text-sm rounded-lg opacity-0 invisible transition-all duration-200 whitespace-nowrap z-20">
              {person.name}
              <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
            </div>

            <!-- Hover 卡片 (PC端) -->
            <div class="contributor-hover-card hidden md:block absolute bottom-full left-1/2 transform -translate-x-1/2 mb-3 w-64 bg-white rounded-lg shadow-xl border border-gray-200 opacity-0 invisible transition-all duration-300 z-30 pointer-events-none overflow-hidden">
              <!-- 背景大图 -->
              <div class="w-full h-32 bg-gray-100 relative overflow-hidden">
                <img src={person.largeImage || person.avatar} alt={person.name} class="w-full h-full object-cover" 
                     onError={`this.src='${person.avatar}'`} />
                <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
              </div>
              
              <div class="p-4 relative">
                <!-- 小头像悬浮在大图上 -->
                <div class="w-16 h-16 rounded-full overflow-hidden mx-auto -mt-10 mb-3 border-4 border-white bg-white shadow-lg">
                  <img src={person.avatar} alt={person.name} class="w-full h-full object-cover" />
                </div>
                
                <div class="text-center">
                  <h4 class="font-semibold text-gray-800 mb-1" data-en={person.name} data-zh={person.name}>{person.name}</h4>
                  <p class="text-sm text-gray-600 mb-3" data-en={person.role.en} data-zh={person.role.zh}>{person.role.en}</p>
                  <p class="text-xs text-gray-500 mb-3" data-en={person.desc.en} data-zh={person.desc.zh}>{person.desc.en}</p>
                  
                  <a href={person.github} target="_blank" rel="noopener noreferrer" 
                     class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.237 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z"/>
                    </svg>
                    GitHub
                  </a>
                </div>
              </div>
              
              <!-- 小箭头 -->
              <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-transparent border-t-white"></div>
              <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-transparent border-t-gray-200" style="margin-top: -1px;"></div>
            </div>
          </div>
        ))}
      </div>
    ))}
  </div>

  <!-- 详细信息模态框 -->
  <div id="contributor-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 opacity-0 invisible transition-all duration-300">
    <div class="bg-white rounded-lg shadow-2xl max-w-md w-full mx-4 transform scale-95 transition-transform duration-300" id="modal-content">
      <!-- 关闭按钮 -->
      <button id="close-modal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-700 text-2xl font-bold z-10">
        ×
      </button>
      
      <!-- 大图区域 - 正方形 -->
      <div class="w-full aspect-square overflow-hidden bg-gray-100 rounded-t-lg">
        <img id="modal-large-image" src="" alt="" class="w-full h-full object-cover">
      </div>
      
      <!-- 信息区域 -->
      <div class="p-6">
        <div class="text-center">
          <!-- 小头像 -->
          <div class="w-16 h-16 rounded-full overflow-hidden mx-auto mb-3 border-2 border-gray-200 -mt-12 bg-white">
            <img id="modal-avatar" src="" alt="" class="w-full h-full object-cover">
          </div>
          
          <!-- 姓名 -->
          <h3 id="modal-name" class="text-xl font-bold text-gray-800 mb-1"></h3>
          
          <!-- 角色 -->
          <p id="modal-role" class="text-sm text-gray-600 mb-3"></p>
          
          <!-- GitHub 链接 -->
          <a id="modal-github" href="" target="_blank" rel="noopener noreferrer" 
             class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm font-medium mb-3 transition-colors">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.237 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z"/>
            </svg>
            GitHub
          </a>
          
          <!-- 描述 -->
          <p id="modal-desc" class="text-xs text-gray-500"></p>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const tabs = document.querySelectorAll('#hof-tabs .category-tab');
      const contents = document.querySelectorAll('.category-content');
      const modal = document.getElementById('contributor-modal');
      const modalContent = document.getElementById('modal-content');
      const closeModal = document.getElementById('close-modal');

      // Set contributors tab as default active
      const contributorsTab = document.querySelector('[data-category="contributors"]');
      if (contributorsTab) {
        contributorsTab.classList.add('bg-gray-200', 'border-gray-600');
      }

      // Tab switching logic
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const cat = tab.getAttribute('data-category');
          tabs.forEach(t => {
            if (t === tab) {
              t.classList.add('bg-gray-200', 'border-gray-600');
            } else {
              t.classList.remove('bg-gray-200', 'border-gray-600');
            }
          });
          contents.forEach(c => {
            if (c.getAttribute('data-category') === cat) {
              c.style.display = 'flex';
              // 重新绑定事件监听器
              setTimeout(() => {
                bindContributorEvents();
              }, 100);
            } else {
              c.style.display = 'none';
            }
          });
        });
      });

      // Tooltip and modal logic with responsive behavior
      function bindContributorEvents() {
        const contributorItems = document.querySelectorAll('.contributor-item');
        const isMobile = window.innerWidth < 768; // md breakpoint
        
        contributorItems.forEach(item => {
          const avatar = item.querySelector('.contributor-avatar');
          const tooltip = item.querySelector('.contributor-tooltip');
          const hoverCard = item.querySelector('.contributor-hover-card');
          
          if (avatar) {
            // Remove existing event listeners by cloning the element
            const newAvatar = avatar.cloneNode(true);
            avatar.parentNode.replaceChild(newAvatar, avatar);
            
            // Re-query the new avatar element
            const freshAvatar = item.querySelector('.contributor-avatar');
            const freshHoverCard = item.querySelector('.contributor-hover-card');
            
            if (isMobile) {
              // Mobile: tooltip on hover, modal on click
              if (tooltip) {
                freshAvatar.addEventListener('mouseenter', () => {
                  tooltip.classList.remove('opacity-0', 'invisible');
                  tooltip.classList.add('opacity-100', 'visible');
                });
                
                freshAvatar.addEventListener('mouseleave', () => {
                  tooltip.classList.remove('opacity-100', 'visible');
                  tooltip.classList.add('opacity-0', 'invisible');
                });
              }
              
              // Click to show modal
              freshAvatar.addEventListener('click', () => {
                showModal(freshAvatar);
              });
            } else {
              // Desktop: hover card on hover, click to GitHub
              if (freshHoverCard) {
                let hoverTimeout;
                
                freshAvatar.addEventListener('mouseenter', () => {
                  clearTimeout(hoverTimeout);
                  freshHoverCard.classList.remove('opacity-0', 'invisible', 'pointer-events-none');
                  freshHoverCard.classList.add('opacity-100', 'visible', 'pointer-events-auto');
                });
                
                freshAvatar.addEventListener('mouseleave', () => {
                  hoverTimeout = setTimeout(() => {
                    freshHoverCard.classList.remove('opacity-100', 'visible', 'pointer-events-auto');
                    freshHoverCard.classList.add('opacity-0', 'invisible', 'pointer-events-none');
                  }, 150); // Small delay to prevent flickering
                });
                
                // Keep hover card open when hovering over it
                freshHoverCard.addEventListener('mouseenter', () => {
                  clearTimeout(hoverTimeout);
                });
                
                freshHoverCard.addEventListener('mouseleave', () => {
                  freshHoverCard.classList.remove('opacity-100', 'visible', 'pointer-events-auto');
                  freshHoverCard.classList.add('opacity-0', 'invisible', 'pointer-events-none');
                });
              }
              
              // Click to go to GitHub directly
              freshAvatar.addEventListener('click', (e) => {
                e.preventDefault();
                const githubUrl = freshAvatar.getAttribute('data-github');
                if (githubUrl) {
                  window.open(githubUrl, '_blank', 'noopener,noreferrer');
                }
              });
            }
          }
        });
      }

      // Show modal with contributor details
      function showModal(avatarElement) {
        const name = avatarElement.getAttribute('data-name');
        const roleEn = avatarElement.getAttribute('data-role-en');
        const roleZh = avatarElement.getAttribute('data-role-zh');
        const github = avatarElement.getAttribute('data-github');
        const descEn = avatarElement.getAttribute('data-desc-en');
        const descZh = avatarElement.getAttribute('data-desc-zh');
        const largeImage = avatarElement.getAttribute('data-large-image');
        const avatar = avatarElement.getAttribute('data-avatar');
        
        // 获取当前语言
        const currentLang = document.documentElement.getAttribute('data-lang') || 'en';
        
        // 填充模态框内容
        document.getElementById('modal-name').textContent = name;
        document.getElementById('modal-role').textContent = currentLang === 'zh' ? roleZh : roleEn;
        document.getElementById('modal-desc').textContent = currentLang === 'zh' ? descZh : descEn;
        document.getElementById('modal-github').href = github;
        document.getElementById('modal-large-image').src = largeImage;
        document.getElementById('modal-avatar').src = avatar;
        
        // 设置 fallback
        const largeImg = document.getElementById('modal-large-image');
        largeImg.onerror = function() {
          this.src = avatar;
        };
        
        // 显示模态框
        modal.classList.remove('opacity-0', 'invisible');
        modal.classList.add('opacity-100', 'visible');
        modalContent.classList.remove('scale-95');
        modalContent.classList.add('scale-100');
        
        // 防止背景滚动
        document.body.style.overflow = 'hidden';
      }

      // Close modal
      function hideModal() {
        modal.classList.remove('opacity-100', 'visible');
        modal.classList.add('opacity-0', 'invisible');
        modalContent.classList.remove('scale-100');
        modalContent.classList.add('scale-95');
        
        // 恢复背景滚动
        document.body.style.overflow = '';
      }

      // Close modal events
      closeModal.addEventListener('click', hideModal);
      
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          hideModal();
        }
      });
      
      // ESC key to close modal
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal.classList.contains('visible')) {
          hideModal();
        }
      });

      // 初始化事件绑定
      bindContributorEvents();
    });
  </script>
</section> 