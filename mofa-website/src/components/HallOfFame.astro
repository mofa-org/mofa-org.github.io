---
// Developer Hall of Fame component with real-time GitHub API fetching
let mofaContributors = [];
let doraContributors = [];

// Function to fetch all contributors with pagination
async function fetchAllContributors(repo) {
  let allContributors = [];
  let page = 1;
  const perPage = 100; // GitHub API max per page
  
  try {
    while (true) {
      const response = await fetch(`https://api.github.com/repos/${repo}/contributors?per_page=${perPage}&page=${page}`);
      
      if (!response.ok) {
        console.log(`Failed to fetch ${repo} contributors page ${page}:`, response.status);
        break;
      }
      
      const data = await response.json();
      
      if (data.length === 0) {
        // No more contributors
        break;
      }
      
      allContributors = allContributors.concat(data);
      
      // If we got less than perPage, we've reached the end
      if (data.length < perPage) {
        break;
      }
      
      page++;
    }
  } catch (error) {
    console.log(`Error fetching ${repo} contributors:`, error);
  }
  
  return allContributors;
}

// Fetch MoFA contributors from GitHub API (all pages)
try {
  const mofaData = await fetchAllContributors('moxin-org/mofa');
  mofaContributors = mofaData
    .filter(contributor => contributor.type === 'User') // Filter out bots
    .map(contributor => ({
      name: contributor.login,
      role: { en: 'Contributor', zh: '贡献者' },
      avatar: contributor.avatar_url,
      github: contributor.html_url,
      // Check if custom image exists, format: /images/{github_login}.jpg
      largeImage: `/images/${contributor.login}.jpg`,
      desc: { 
        en: `${contributor.contributions} contributions to MoFA`, 
        zh: `为 MoFA 贡献了 ${contributor.contributions} 次提交` 
      }
    }));
  console.log(`Fetched ${mofaContributors.length} MoFA contributors`);
} catch (error) {
  console.log('Failed to fetch MoFA contributors:', error);
}

// Fetch Dora-rs contributors from GitHub API (all pages)
try {
  const doraData = await fetchAllContributors('dora-rs/dora');
  doraContributors = doraData
    .filter(contributor => contributor.type === 'User') // Filter out bots
    .map(contributor => ({
      name: contributor.login,
      role: { en: 'Contributor', zh: '贡献者' },
      avatar: contributor.avatar_url,
      github: contributor.html_url,
      // Check if custom image exists, format: /images/{github_login}.jpg
      largeImage: `/images/${contributor.login}.jpg`,
      desc: { 
        en: `${contributor.contributions} contributions to Dora-rs`, 
        zh: `为 Dora-rs 贡献了 ${contributor.contributions} 次提交` 
      }
    }));
  console.log(`Fetched ${doraContributors.length} Dora-rs contributors`);
} catch (error) {
  console.log('Failed to fetch Dora-rs contributors:', error);
}

const categories = [
  {
    id: 'core',
    name: { en: 'MoFA Core Team', zh: 'MoFA Core Team' },
    contributors: [
      {
        name: 'XiaoKuge',
        role: { en: 'Core Member', zh: '核心成员' },
        avatar: 'https://avatars.githubusercontent.com/XiaoKuge?v=4',
        github: 'https://github.com/XiaoKuge',
        largeImage: '/images/XiaoKuge.jpg',
        desc: { en: 'MoFA Core Team Member', zh: 'MoFA Core Team Member'}
      },
      {
        name: 'chengzi0103',
        role: { en: 'Core Member', zh: '核心成员' },
        avatar: 'https://avatars.githubusercontent.com/chengzi0103?v=4',
        github: 'https://github.com/chengzi0103',
        largeImage: '/images/chengzi0103.jpg',
        desc: { en: 'MoFA Core Team Member', zh: 'MoFA Core Team Member' }
      },
      {
        name: 'BH3GEI',
        role: { en: 'Core Member', zh: '核心成员' },
        avatar: 'https://avatars.githubusercontent.com/BH3GEI?v=4',
        github: 'https://github.com/BH3GEI',
        largeImage: '/images/BH3GEI.jpg',
        desc: { en: 'MoFA Core Team Member', zh: 'MoFA Core Team Member' }
      }
    ]
  },
  {
    id: 'contributors',
    name: { en: 'MoFA Contributors', zh: 'MoFA 贡献者' },
    contributors: mofaContributors
  },
  {
    id: 'dora',
    name: { en: 'Dora-rs Contributors', zh: 'Dora-rs 贡献者' },
    contributors: doraContributors
  },
  {
    id: 'ai2025',
    name: { en: '2025 MoFA Hackathon Winners', zh: '2025 MoFA Search AI 搜索引擎大赛获奖者' },
    contributors: [
      {
        name: 'winner123456',
        role: { en: 'First Prize', zh: 'First Prize' },
        avatar: 'https://avatars.githubusercontent.com/u/23193969?v=4',
        github: 'https://github.com/placeholder-winner-1',
        largeImage: '/images/winner123456.jpg',
        desc: { en: '2025 contest first prize', zh: '2025 contest first prize' }
      },
      {
        name: 'winner789',
        role: { en: 'First Prize', zh: 'First Prize' },
        avatar: 'https://avatars.githubusercontent.com/u/23193969?v=4',
        github: 'https://github.com/placeholder-winner-2',
        largeImage: '/images/winner789.jpg',
        desc: { en: '2025 contest first prize', zh: '2025 contest first prize' }
      }
    ]
  },
  {
    id: 'ai2024',
    name: { en: '2024 MoFA Hackathon Winners', zh: '2024 MoFA Search AI 搜索引擎大赛获奖者' },
    contributors: [
      {
        name: 'winner2024-1',
        role: { en: 'First Prize', zh: 'First Prize' },
        avatar: 'https://avatars.githubusercontent.com/u/23193969?v=4',
        github: 'https://github.com/placeholder-2024-winner-1',
        largeImage: '/images/winner2024-1.jpg',
        desc: { en: '2024 contest first prize', zh: '2024 contest first prize' }
      },
      {
        name: 'winner2024-2',
        role: { en: 'First Prize', zh: 'First Prize' },
        avatar: 'https://avatars.githubusercontent.com/u/23193969?v=4',
        github: 'https://github.com/placeholder-2024-winner-2',
        largeImage: '/images/winner2024-2.jpg',
        desc: { en: '2024 contest first prize', zh: '2024 contest first prize' }
      }
    ]
  }
];
---

<section class="py-20" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);">
  <div class="container mx-auto">
    <div class="text-center mb-12">
      <h2 class="text-4xl font-bold mb-4" data-en="Developer <span class='gradient-text'>Hall of Fame</span>" data-zh="开发者 <span class='gradient-text'>殿堂</span>">
        Developer <span class="gradient-text">Hall of Fame</span>
      </h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto" data-en="We celebrate everyone who made MoFA possible" data-zh="向每一位让 MoFA 成为可能的开发者致敬">We celebrate everyone who made MoFA possible</p>
    </div>

    <ul class="flex flex-wrap justify-center gap-4 mb-10" id="hof-tabs">
      {categories.map(cat => (
        <li class="px-4 py-2 rounded-full border-2 border-gray-400 cursor-pointer transition hover:bg-gray-100 text-sm sm:text-base font-medium category-tab" data-category={cat.id}>
          <span data-en={cat.name.en} data-zh={cat.name.zh}>{cat.name.en}</span>
        </li>
      ))}
    </ul>

    {categories.map(cat => (
      <div class="flex flex-wrap justify-center gap-8 category-content" data-category={cat.id} style={cat.id === 'contributors' ? 'display:flex;' : 'display:none;'}>
        {cat.contributors.map(person => (
          <div class="relative group contributor-item">
            <div class="w-24 h-24 rounded-full overflow-hidden border-4 border-gray-300 shadow-lg hover:border-blue-500 transition-all duration-300 cursor-pointer">
              <img src={person.avatar} alt={person.name} class="w-full h-full object-cover" />
            </div>
            
            <div class="contributor-card absolute top-1/2 left-full transform -translate-y-1/2 ml-4 w-64 bg-white rounded-lg shadow-2xl border opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-10 overflow-visible">
              <div class="w-full h-64 overflow-hidden bg-gray-100">
                <img 
                  src={person.largeImage || person.avatar} 
                  alt={person.name} 
                  class="w-full h-full object-cover"
                  onerror="this.src=this.getAttribute('data-fallback')"
                  data-fallback={person.avatar}
                />
              </div>
              
              <div class="p-4">
                <div class="text-center">
                  <div class="w-16 h-16 rounded-full overflow-hidden mx-auto mb-3 border-2 border-gray-200 -mt-12 bg-white">
                    <img src={person.avatar} alt={person.name} class="w-full h-full object-cover" />
                  </div>
                  <h3 class="text-lg font-bold text-gray-800 mb-1">{person.name}</h3>
                  <p class="text-sm text-gray-600 mb-2" data-en={person.role.en} data-zh={person.role.zh}>{person.role.en}</p>
                  <a href={person.github} target="_blank" rel="noopener noreferrer" 
                     class="inline-flex items-center gap-1 text-blue-600 hover:text-blue-800 text-sm font-medium mb-2">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.237 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z"/>
                    </svg>
                    GitHub
                  </a>
                  <p class="text-xs text-gray-500" data-en={person.desc.en} data-zh={person.desc.zh}>{person.desc.en}</p>
                </div>
              </div>
              
              <!-- 左侧箭头 - 卡片在右侧时显示，尖角指向头像 -->
              <div class="arrow-left absolute top-1/2 transform -translate-y-1/2" style="left: -12px; width: 0; height: 0; border-top: 8px solid transparent; border-bottom: 8px solid transparent; border-right: 8px solid white; filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));"></div>
              <!-- 右侧箭头 - 卡片在左侧时显示，尖角指向头像 -->
              <div class="arrow-right absolute top-1/2 transform -translate-y-1/2 hidden" style="right: -12px; width: 0; height: 0; border-top: 8px solid transparent; border-bottom: 8px solid transparent; border-left: 8px solid white; filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));"></div>
            </div>
          </div>
        ))}
      </div>
    ))}
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const tabs = document.querySelectorAll('#hof-tabs .category-tab');
      const contents = document.querySelectorAll('.category-content');

      // Set contributors tab as default active
      const contributorsTab = document.querySelector('[data-category="contributors"]');
      if (contributorsTab) {
        contributorsTab.classList.add('bg-gray-200', 'border-gray-600');
      }

      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const cat = tab.getAttribute('data-category');
          tabs.forEach(t => {
            if (t === tab) {
              t.classList.add('bg-gray-200', 'border-gray-600');
            } else {
              t.classList.remove('bg-gray-200', 'border-gray-600');
            }
          });
          contents.forEach(c => {
            if (c.getAttribute('data-category') === cat) {
              c.style.display = 'flex';
              // 重新计算卡片位置
              setTimeout(() => {
                adjustCardPositions();
              }, 100);
            } else {
              c.style.display = 'none';
            }
          });
        });
      });

      // 调整卡片位置的函数
      function adjustCardPositions() {
        const contributorItems = document.querySelectorAll('.contributor-item');
        
        contributorItems.forEach(item => {
          const card = item.querySelector('.contributor-card');
          const arrowLeft = item.querySelector('.arrow-left');
          const arrowRight = item.querySelector('.arrow-right');
          
          if (card && arrowLeft && arrowRight) {
            // 监听鼠标进入事件
            item.addEventListener('mouseenter', () => {
              // 获取头像的位置信息
              const avatarRect = item.getBoundingClientRect();
              const windowWidth = window.innerWidth;
              const cardWidth = 256; // w-64 = 256px
              const margin = 16; // ml-4 = 16px
              
              // 判断是否有足够空间向右显示
              const spaceOnRight = windowWidth - (avatarRect.right + cardWidth + margin);
              const spaceOnLeft = avatarRect.left - cardWidth - margin;
              
              if (spaceOnRight >= 0) {
                // 向右显示
                card.classList.remove('right-full', 'mr-4');
                card.classList.add('left-full', 'ml-4');
                arrowLeft.classList.remove('hidden');
                arrowRight.classList.add('hidden');
              } else if (spaceOnLeft >= 0) {
                // 向左显示
                card.classList.remove('left-full', 'ml-4');
                card.classList.add('right-full', 'mr-4');
                arrowLeft.classList.add('hidden');
                arrowRight.classList.remove('hidden');
              } else {
                // 空间不足，保持向右（可能会超出屏幕）
                card.classList.remove('right-full', 'mr-4');
                card.classList.add('left-full', 'ml-4');
                arrowLeft.classList.remove('hidden');
                arrowRight.classList.add('hidden');
              }
            });
          }
        });
      }

      // 页面加载后初始化
      setTimeout(() => {
        adjustCardPositions();
      }, 100);

      // 窗口大小改变时重新计算
      window.addEventListener('resize', () => {
        adjustCardPositions();
      });
    });
  </script>
</section> 