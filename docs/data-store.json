[["Map",1,2,9,10,195,196,572,573],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.7","content-config-digest","d4f4f8dff51f7398","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://mofa-org.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"always\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","prize",["Map",11,12,42,43,83,84,108,109,139,140,169,170],"2024-hackathon",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21,"legacyId":41},{"year":14,"title":15,"title_zh":16,"category":17},2024,"2024 MoFA Hackathon Winners","2024 MoFA Search AI 搜索引擎大赛获奖者","ai2024","# 2024 MoFA Hackathon Winners\n\n## First Prize Winners\n\n### winner2024-1\n- **Role**: First Prize\n- **GitHub**: https://github.com/placeholder-2024-winner-1\n- **Avatar**: https://avatars.githubusercontent.com/u/23193969?v=4\n- **Large Image**: /images/winner2024-1.jpg\n- **Description**: 2024 contest first prize\n\n### winner2024-2\n- **Role**: First Prize\n- **GitHub**: https://github.com/placeholder-2024-winner-2\n- **Avatar**: https://avatars.githubusercontent.com/u/23193969?v=4\n- **Large Image**: /images/winner2024-2.jpg\n- **Description**: 2024 contest first prize","src/content/prize/2024-hackathon.md","d18fd26d573f3508",{"html":22,"metadata":23},"\u003Ch1 id=\"2024-mofa-hackathon-winners\">2024 MoFA Hackathon Winners\u003C/h1>\n\u003Ch2 id=\"first-prize-winners\">First Prize Winners\u003C/h2>\n\u003Ch3 id=\"winner2024-1\">winner2024-1\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: First Prize\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/placeholder-2024-winner-1\">https://github.com/placeholder-2024-winner-1\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/23193969?v=4\">https://avatars.githubusercontent.com/u/23193969?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/winner2024-1.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2024 contest first prize\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"winner2024-2\">winner2024-2\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: First Prize\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/placeholder-2024-winner-2\">https://github.com/placeholder-2024-winner-2\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/23193969?v=4\">https://avatars.githubusercontent.com/u/23193969?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/winner2024-2.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2024 contest first prize\u003C/li>\n\u003C/ul>",{"headings":24,"localImagePaths":37,"remoteImagePaths":38,"frontmatter":39,"imagePaths":40},[25,28,32,35],{"depth":26,"slug":27,"text":15},1,"2024-mofa-hackathon-winners",{"depth":29,"slug":30,"text":31},2,"first-prize-winners","First Prize Winners",{"depth":33,"slug":34,"text":34},3,"winner2024-1",{"depth":33,"slug":36,"text":36},"winner2024-2",[],[],{"year":14,"title":15,"title_zh":16,"category":17},[],"2024-hackathon.md","2025-campathon",{"id":42,"data":44,"body":49,"filePath":50,"digest":51,"rendered":52,"legacyId":82},{"year":45,"title":46,"title_zh":47,"category":48},2025,"2025 MoFA Campathon Winners","2025 MoFA 编程马拉松获奖者","campathon2025","# 2025 MoFA Campus Hackathon Winners\n\n## First Prize Winners\n\n### tech_wizard_2025\n- **Role**: Champion\n- **GitHub**: https://github.com/tech-wizard-2025\n- **Avatar**: https://avatars.githubusercontent.com/u/12345678?v=4\n- **Large Image**: /images/tech_wizard_2025.jpg\n- **Description**: 2025 campus hackathon champion - created innovative AI tutoring system\n\n### code_master_jane\n- **Role**: First Prize\n- **GitHub**: https://github.com/code-master-jane\n- **Avatar**: https://avatars.githubusercontent.com/u/87654321?v=4\n- **Large Image**: /images/code_master_jane.jpg\n- **Description**: 2025 campus hackathon first prize - developed smart campus assistant\n\n## Second Prize Winners\n\n### campus_innovator\n- **Role**: Second Prize\n- **GitHub**: https://github.com/campus-innovator\n- **Avatar**: https://avatars.githubusercontent.com/u/11111111?v=4\n- **Large Image**: /images/campus_innovator.jpg\n- **Description**: 2025 campus hackathon second prize - built collaborative study platform\n\n### future_dev_alex\n- **Role**: Second Prize\n- **GitHub**: https://github.com/future-dev-alex\n- **Avatar**: https://avatars.githubusercontent.com/u/22222222?v=4\n- **Large Image**: /images/future_dev_alex.jpg\n- **Description**: 2025 campus hackathon second prize - created automated grading system\n\n## Special Awards\n\n### creativity_king\n- **Role**: Most Creative\n- **GitHub**: https://github.com/creativity-king\n- **Avatar**: https://avatars.githubusercontent.com/u/33333333?v=4\n- **Large Image**: /images/creativity_king.jpg\n- **Description**: 2025 campus hackathon most creative award - AR/VR learning environment\n\n### team_leader_sarah\n- **Role**: Best Team Leader\n- **GitHub**: https://github.com/team-leader-sarah\n- **Avatar**: https://avatars.githubusercontent.com/u/44444444?v=4\n- **Large Image**: /images/team_leader_sarah.jpg\n- **Description**: 2025 campus hackathon best team leadership award","src/content/prize/2025-campathon.md","b665e45e609b0832",{"html":53,"metadata":54},"\u003Ch1 id=\"2025-mofa-campus-hackathon-winners\">2025 MoFA Campus Hackathon Winners\u003C/h1>\n\u003Ch2 id=\"first-prize-winners\">First Prize Winners\u003C/h2>\n\u003Ch3 id=\"tech_wizard_2025\">tech_wizard_2025\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Champion\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/tech-wizard-2025\">https://github.com/tech-wizard-2025\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/12345678?v=4\">https://avatars.githubusercontent.com/u/12345678?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/tech_wizard_2025.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 campus hackathon champion - created innovative AI tutoring system\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"code_master_jane\">code_master_jane\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: First Prize\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/code-master-jane\">https://github.com/code-master-jane\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/87654321?v=4\">https://avatars.githubusercontent.com/u/87654321?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/code_master_jane.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 campus hackathon first prize - developed smart campus assistant\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"second-prize-winners\">Second Prize Winners\u003C/h2>\n\u003Ch3 id=\"campus_innovator\">campus_innovator\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Second Prize\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/campus-innovator\">https://github.com/campus-innovator\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/11111111?v=4\">https://avatars.githubusercontent.com/u/11111111?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/campus_innovator.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 campus hackathon second prize - built collaborative study platform\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"future_dev_alex\">future_dev_alex\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Second Prize\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/future-dev-alex\">https://github.com/future-dev-alex\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/22222222?v=4\">https://avatars.githubusercontent.com/u/22222222?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/future_dev_alex.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 campus hackathon second prize - created automated grading system\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"special-awards\">Special Awards\u003C/h2>\n\u003Ch3 id=\"creativity_king\">creativity_king\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Most Creative\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/creativity-king\">https://github.com/creativity-king\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/33333333?v=4\">https://avatars.githubusercontent.com/u/33333333?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/creativity_king.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 campus hackathon most creative award - AR/VR learning environment\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"team_leader_sarah\">team_leader_sarah\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Best Team Leader\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/team-leader-sarah\">https://github.com/team-leader-sarah\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/44444444?v=4\">https://avatars.githubusercontent.com/u/44444444?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/team_leader_sarah.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 campus hackathon best team leadership award\u003C/li>\n\u003C/ul>",{"headings":55,"localImagePaths":78,"remoteImagePaths":79,"frontmatter":80,"imagePaths":81},[56,59,60,62,64,67,69,71,74,76],{"depth":26,"slug":57,"text":58},"2025-mofa-campus-hackathon-winners","2025 MoFA Campus Hackathon Winners",{"depth":29,"slug":30,"text":31},{"depth":33,"slug":61,"text":61},"tech_wizard_2025",{"depth":33,"slug":63,"text":63},"code_master_jane",{"depth":29,"slug":65,"text":66},"second-prize-winners","Second Prize Winners",{"depth":33,"slug":68,"text":68},"campus_innovator",{"depth":33,"slug":70,"text":70},"future_dev_alex",{"depth":29,"slug":72,"text":73},"special-awards","Special Awards",{"depth":33,"slug":75,"text":75},"creativity_king",{"depth":33,"slug":77,"text":77},"team_leader_sarah",[],[],{"year":45,"title":46,"title_zh":47,"category":48},[],"2025-campathon.md","2025-hackathon",{"id":83,"data":85,"body":89,"filePath":90,"digest":91,"rendered":92,"legacyId":107},{"year":45,"title":86,"title_zh":87,"category":88},"2025 MoFA Hackathon Winners","2025 MoFA Search AI 搜索引擎大赛获奖者","ai2025","# 2025 MoFA Hackathon Winners\n\n## First Prize Winners\n\n### winner123456\n- **Role**: First Prize\n- **GitHub**: https://github.com/placeholder-winner-1\n- **Avatar**: https://avatars.githubusercontent.com/u/23193969?v=4\n- **Large Image**: /images/winner123456.jpg\n- **Description**: 2025 contest first prize\n\n### winner789\n- **Role**: First Prize\n- **GitHub**: https://github.com/placeholder-winner-2\n- **Avatar**: https://avatars.githubusercontent.com/u/23193969?v=4\n- **Large Image**: /images/winner789.jpg\n- **Description**: 2025 contest first prize","src/content/prize/2025-hackathon.md","841730158d23786c",{"html":93,"metadata":94},"\u003Ch1 id=\"2025-mofa-hackathon-winners\">2025 MoFA Hackathon Winners\u003C/h1>\n\u003Ch2 id=\"first-prize-winners\">First Prize Winners\u003C/h2>\n\u003Ch3 id=\"winner123456\">winner123456\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: First Prize\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/placeholder-winner-1\">https://github.com/placeholder-winner-1\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/23193969?v=4\">https://avatars.githubusercontent.com/u/23193969?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/winner123456.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 contest first prize\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"winner789\">winner789\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: First Prize\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/placeholder-winner-2\">https://github.com/placeholder-winner-2\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/u/23193969?v=4\">https://avatars.githubusercontent.com/u/23193969?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/winner789.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: 2025 contest first prize\u003C/li>\n\u003C/ul>",{"headings":95,"localImagePaths":103,"remoteImagePaths":104,"frontmatter":105,"imagePaths":106},[96,98,99,101],{"depth":26,"slug":97,"text":86},"2025-mofa-hackathon-winners",{"depth":29,"slug":30,"text":31},{"depth":33,"slug":100,"text":100},"winner123456",{"depth":33,"slug":102,"text":102},"winner789",[],[],{"year":45,"title":86,"title_zh":87,"category":88},[],"2025-hackathon.md","core-team",{"id":108,"data":110,"body":114,"filePath":115,"digest":116,"rendered":117,"legacyId":138},{"type":111,"title":112,"title_zh":112,"category":111,"last_updated":113},"core","MoFA Core Team","2025-09-15","# MoFA Core Team\n\nMoFA项目的核心开发团队成员。\n\n## Core Members\n\n### XiaoKuge\n- **Role**: Core Member\n- **Role_zh**: 核心成员\n- **Avatar**: https://avatars.githubusercontent.com/XiaoKuge?v=4\n- **GitHub**: https://github.com/XiaoKuge\n- **Large Image**: /images/XiaoKuge.jpg\n- **Description**: MoFA Core Team Member\n- **Description_zh**: MoFA Core Team Member\n\n### chengzi0103\n- **Role**: Core Member\n- **Role_zh**: 核心成员\n- **Avatar**: https://avatars.githubusercontent.com/chengzi0103?v=4\n- **GitHub**: https://github.com/chengzi0103\n- **Large Image**: /images/chengzi0103.jpg\n- **Description**: MoFA Core Team Member\n- **Description_zh**: MoFA Core Team Member\n\n### BH3GEI\n- **Role**: Core Member\n- **Role_zh**: 核心成员\n- **Avatar**: https://avatars.githubusercontent.com/BH3GEI?v=4\n- **GitHub**: https://github.com/BH3GEI\n- **Large Image**: /images/BH3GEI.jpg\n- **Description**: MoFA Core Team Member\n- **Description_zh**: MoFA Core Team Member","src/content/prize/core-team.md","779c00fc170213a4",{"html":118,"metadata":119},"\u003Ch1 id=\"mofa-core-team\">MoFA Core Team\u003C/h1>\n\u003Cp>MoFA项目的核心开发团队成员。\u003C/p>\n\u003Ch2 id=\"core-members\">Core Members\u003C/h2>\n\u003Ch3 id=\"xiaokuge\">XiaoKuge\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Core Member\u003C/li>\n\u003Cli>\u003Cstrong>Role_zh\u003C/strong>: 核心成员\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/XiaoKuge?v=4\">https://avatars.githubusercontent.com/XiaoKuge?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/XiaoKuge\">https://github.com/XiaoKuge\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/XiaoKuge.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: MoFA Core Team Member\u003C/li>\n\u003Cli>\u003Cstrong>Description_zh\u003C/strong>: MoFA Core Team Member\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"chengzi0103\">chengzi0103\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Core Member\u003C/li>\n\u003Cli>\u003Cstrong>Role_zh\u003C/strong>: 核心成员\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/chengzi0103?v=4\">https://avatars.githubusercontent.com/chengzi0103?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/chengzi0103\">https://github.com/chengzi0103\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/chengzi0103.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: MoFA Core Team Member\u003C/li>\n\u003Cli>\u003Cstrong>Description_zh\u003C/strong>: MoFA Core Team Member\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"bh3gei\">BH3GEI\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Role\u003C/strong>: Core Member\u003C/li>\n\u003Cli>\u003Cstrong>Role_zh\u003C/strong>: 核心成员\u003C/li>\n\u003Cli>\u003Cstrong>Avatar\u003C/strong>: \u003Ca href=\"https://avatars.githubusercontent.com/BH3GEI?v=4\">https://avatars.githubusercontent.com/BH3GEI?v=4\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>GitHub\u003C/strong>: \u003Ca href=\"https://github.com/BH3GEI\">https://github.com/BH3GEI\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Large Image\u003C/strong>: /images/BH3GEI.jpg\u003C/li>\n\u003Cli>\u003Cstrong>Description\u003C/strong>: MoFA Core Team Member\u003C/li>\n\u003Cli>\u003Cstrong>Description_zh\u003C/strong>: MoFA Core Team Member\u003C/li>\n\u003C/ul>",{"headings":120,"localImagePaths":134,"remoteImagePaths":135,"frontmatter":136,"imagePaths":137},[121,123,126,129,131],{"depth":26,"slug":122,"text":112},"mofa-core-team",{"depth":29,"slug":124,"text":125},"core-members","Core Members",{"depth":33,"slug":127,"text":128},"xiaokuge","XiaoKuge",{"depth":33,"slug":130,"text":130},"chengzi0103",{"depth":33,"slug":132,"text":133},"bh3gei","BH3GEI",[],[],{"type":111,"category":111,"title":112,"title_zh":112,"last_updated":113},[],"core-team.md","dora-contributors",{"id":139,"data":141,"body":150,"filePath":151,"digest":152,"rendered":153,"legacyId":168},{"type":142,"title":143,"title_zh":144,"category":145,"last_updated":146,"repositories":147,"total_contributors":149},"contributors","Dora-rs Contributors","Dora-rs 贡献者","dora","2025-10-21",[148],"dora-rs/dora",0,"# Dora-rs Contributors Cache\n\n这个文件在构建时自动更新，缓存从GitHub API获取的贡献者数据。\n\n**最后更新**: 2025-10-21\n**总贡献者数**: 0\n**数据来源**: dora-rs/dora\n\n## Contributors Data\n\n\n\n---\n*This file is automatically generated during build time. Do not edit manually.*","src/content/prize/dora-contributors.md","eaed5794e9daf165",{"html":154,"metadata":155},"\u003Ch1 id=\"dora-rs-contributors-cache\">Dora-rs Contributors Cache\u003C/h1>\n\u003Cp>这个文件在构建时自动更新，缓存从GitHub API获取的贡献者数据。\u003C/p>\n\u003Cp>\u003Cstrong>最后更新\u003C/strong>: 2025-10-21\n\u003Cstrong>总贡献者数\u003C/strong>: 0\n\u003Cstrong>数据来源\u003C/strong>: dora-rs/dora\u003C/p>\n\u003Ch2 id=\"contributors-data\">Contributors Data\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Cem>This file is automatically generated during build time. Do not edit manually.\u003C/em>\u003C/p>",{"headings":156,"localImagePaths":163,"remoteImagePaths":164,"frontmatter":165,"imagePaths":167},[157,160],{"depth":26,"slug":158,"text":159},"dora-rs-contributors-cache","Dora-rs Contributors Cache",{"depth":29,"slug":161,"text":162},"contributors-data","Contributors Data",[],[],{"type":142,"category":145,"title":143,"title_zh":144,"last_updated":146,"repositories":166,"total_contributors":149},[148],[],"dora-contributors.md","mofa-contributors",{"id":169,"data":171,"body":178,"filePath":179,"digest":180,"rendered":181,"legacyId":194},{"type":142,"title":172,"title_zh":173,"category":174,"last_updated":146,"repositories":175,"total_contributors":149},"MoFA Contributors","MoFA 贡献者","mofa",[176,177],"mofa-org/mofa","mofa-org/mofa-new","# MoFA Contributors Cache\n\n这个文件在构建时自动更新，缓存从GitHub API获取的贡献者数据。\n\n**最后更新**: 2025-10-21\n**总贡献者数**: 0\n**数据来源**: mofa-org/mofa, mofa-org/mofa-new\n\n## Contributors Data\n\n\n\n---\n*This file is automatically generated during build time. Do not edit manually.*","src/content/prize/mofa-contributors.md","0958987bb7000f5d",{"html":182,"metadata":183},"\u003Ch1 id=\"mofa-contributors-cache\">MoFA Contributors Cache\u003C/h1>\n\u003Cp>这个文件在构建时自动更新，缓存从GitHub API获取的贡献者数据。\u003C/p>\n\u003Cp>\u003Cstrong>最后更新\u003C/strong>: 2025-10-21\n\u003Cstrong>总贡献者数\u003C/strong>: 0\n\u003Cstrong>数据来源\u003C/strong>: mofa-org/mofa, mofa-org/mofa-new\u003C/p>\n\u003Ch2 id=\"contributors-data\">Contributors Data\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Cem>This file is automatically generated during build time. Do not edit manually.\u003C/em>\u003C/p>",{"headings":184,"localImagePaths":189,"remoteImagePaths":190,"frontmatter":191,"imagePaths":193},[185,188],{"depth":26,"slug":186,"text":187},"mofa-contributors-cache","MoFA Contributors Cache",{"depth":29,"slug":161,"text":162},[],[],{"type":142,"category":174,"title":172,"title_zh":173,"last_updated":146,"repositories":192,"total_contributors":149},[176,177],[],"mofa-contributors.md","blog",["Map",197,198,223,224,249,250,290,291,355,356,428,429,485,486,533,534],"ai-is-a-way-of-reveal-humanity",{"id":197,"data":199,"body":209,"filePath":210,"digest":211,"rendered":212,"legacyId":222},{"title":200,"description":201,"date":202,"author":128,"tags":203},"AI技术的本质：人性揭蔽","1953年，海德格尔说，技术的本质是对存在的揭蔽，古代和现代技术的本质揭蔽了自然的真相。那么，大约70年以后，AI技术的本质变了吗？",["Date","2025-02-16T00:00:00.000Z"],[204,205,206,207,208],"哲学思考","AI技术","人性","海德格尔","技术哲学","**从 GPT-3 助手到 DeepSeek 顾问，再到未来的 AI 超人**\n\nDeepSeek 的问世震撼全球。天下苦昂贵算力久已、苦技术垄断久已、苦闭源 AI久已。而DeepSeek 横空出世，无疑打破了这些桎梏。\n\n我们同样为此兴奋，却更感迷茫。对我们而言，最具冲击力的并非技术本身，而是亲身体验到 DeepSeek 的“深度思考”能力。R1 模型那成竹在胸、不急不徐、井井有条的推理能力。这不仅意味着我们不再需要用繁琐的提示工程去引导 AI 进行逻辑推演，更重要的是，AI能够深入理解用户意图，提供内容丰富、结构完整的答案。这一突破，使 AI 从曾经的“助手”（Assistant）跃升为“高级顾问”（Consultant），其学识、思辨能力，甚至经验积累，已然超越人类。\n\n可以预见，AI 的发展不会止步于此。顾问之后，是否会进化为“超人”？\n\n带着这些疑问，我们向 DeepSeek 提出关于 AI 与人性的关系问题。它在 18 秒的深度思考后，生成了一篇内容酷炫的文章。尽管 生成AI的旁征博引和华丽文采已不再让人感到那么新鲜，但其中有一句话让人眼前一亮：“站在人机共生的门槛上，我们需要重新理解海德格尔提出的‘技术是存在的揭蔽’之深意。” 于是，我们开始研究哲学家马丁·海德格尔（Martin Heidegger）及其代表性论述《技术的追问》（*The Question Concerning Technology*）。\n\n![图片](https://relevantstudy.github.io/images/heidegger.jpg)\n\n截图：Martin Heidegger\n\n**海德格尔：技术是存在的揭蔽（Reveal）**\n\n在《技术的追问》中，海德格尔并未止步于将技术定义为简单的工具，而是深入探讨了技术的本质（essence）。他指出，技术的核心在于**揭示（bringing forth）真相，使隐匿的存在显现**。在此框架下，他区分了古代技术与现代技术的不同特性：\n\n1. **古代技术：与自然共舞的揭蔽（Bring-Forth）**\n\n   - 古代技术尊重自然，通过风车利用风力、农耕借助土地生产作物，是一种“带出”（bring-forth）真相的方式。它揭示了人与自然的关系，是一种顺应自然的技术形态。\n\n2. **现代技术：挑战性的揭蔽（Challenging-Forth）**\n\n   - 现代技术不再是顺应自然，而是对自然施加压力，强行索取资源。它通过解锁（unlock）、转换（transform）、存储（store）和分发（distribute）能量，把自然视为可被提取和消耗的“资源池”，使其变成单一、可控的“持存物”（standing-reserve）。例如，工厂化养殖、工业能源提取，皆是将自然转化为满足人类需求的可消耗单元。\n\n3. **现代技术的危险**\n\n   - 海德格尔警示，现代技术的真正威胁在于，它不仅改变了自然的面貌，更改变了人类认知世界的方式。所有事物在技术框架下都被简化为可计算、可存储、可调用的“备用物”，使人类逐渐失去对世界本源的理解。这种技术主导的思维方式，可能使人类沦为技术体系中的一环，而非世界的真正主体。\n\n4. **如何克服技术的危险**\n\n   海德格尔认为，若能回归与自然和谐共存的方式，人类或许能避免被现代技术异化，重新找回技术与存在的平衡。古希腊的 techne（技艺）和poiesis（创造）是人类化解危险的方法。\n\n   - *Techne* 是对自然的深刻理解，如木匠顺应木材的纹理进行加工，而非强行改造。\n   - *Poiesis* 则强调创造力，如雕塑家将原本普通的石块雕琢成艺术品，使隐藏的美展现于世。\n\n![图片](https://relevantstudy.github.io/images/question-concerning_technology-paper.png)\n\n截图：Martin Heidegger 技术的追问文章\n\n**AI 技术的本质：人性的揭蔽**\n\n《技术的追问》发表于 1953 年。彼时，人类经历了广岛、长崎的核爆不久，对技术带来的震撼远不亚于我们今日面对 AI 的突飞猛进。当时人们对技术的恐惧，与我们对 AI 对人类前景的影响之忧，不无相似之处。\n\n然而，AI 技术已经超越了海德格尔所描述的现代技术。它不仅仅是能量的转换，而是具备知识、能够学习、善于推理的智能体。这种转变，使 AI 所带来的风险不再局限于资源索取，而是对**人类存在本身的挑战**。\n\n不过，我们还是可以借海德格尔的框架，将现代技术的概念替换成AI技术，将自然的概念替换成人性，试着解构AI技术的本质和相关问题：\n\n![图片](https://relevantstudy.github.io/images/roadmap-of-revealing.png)\n\n图：技术发展，其对存在揭蔽的本质不变，但方法却有阶段性特点\n\n1. 当前，**AI 技术是人性的揭示**\n   - 现阶段的 AI，如 ChatGPT 和 DeepSeek，正处于**“带出”（Bring Forth）人性真相**的阶段。它通过学习和模拟人类的语言、行为模式，增强了人类思维的逻辑、情感的表达，使我们对自身有了更深刻的认知。\n2. **更危险的阶段：挑战人性的揭示**\n   - 未来，当 AI 进入**“挑战”（Challenge Forth）人性真相**的阶段，它将不仅仅是揭示人类思维方式，而是能够揭示人性更底层的真相，从而具备了Engineering Humanity的能力。这将使 AI 拥有比人类更强的判断力、创造力，自主设定目标的能力。它是否会颠覆人类的主体性？人类是否还能维持自身在世界中的主导地位？\n3. **如何应对 AI 技术的挑战**\n   - 回归人性，或许是应对 AI 风险的关键。就像海德格尔提倡的 *techne* 和 *poiesis* 一样，我们需要创造一种**能回应人性的技术框架**，确保 AI 在发展过程中不只是简单地优化效率，而是以促进人类价值为核心。\n\n**感悟**\n\nAI不是第一个人类创造毁灭自己的技术，原子弹早就可以做到了。但在世界末日的巨大阴影之下，人类又已经生存和快速发展了近百年。整体态势欣欣向荣。所以，技术的危险性并非源于技术本身，而在于人类如何回应其揭示的真相。\n\n不难预见，AI将带来的挑战更大。海德格尔的理论无法解答AI技术发展所带来的人类未来命运的问题。不过，既然AI技术的本质也是对真相的解蔽，那就让我们用它认清人性的真相，把它用在彰显人性美好和让人性更加美好的地方。\n\n本文浅尝辄止，抛砖引玉。\n\n部分参考资料：\n\n- https://en.wikipedia.org/wiki/Martin_Heidegger\n- Heidegger's \"The Question Concerning Technology\"，a lecture. https://www.youtube.com/watch?v=nRp5lzP5L80\n- The Question Concerning Technology, the paper. https://www2.hawaii.edu/~freeman/courses/phil394/The%20Question%20Concerning%20Technology.pdf","src/content/blog/ai-is-a-way-of-reveal-humanity.md","4e980a2d235b20a1",{"html":213,"metadata":214},"\u003Cp>\u003Cstrong>从 GPT-3 助手到 DeepSeek 顾问，再到未来的 AI 超人\u003C/strong>\u003C/p>\n\u003Cp>DeepSeek 的问世震撼全球。天下苦昂贵算力久已、苦技术垄断久已、苦闭源 AI久已。而DeepSeek 横空出世，无疑打破了这些桎梏。\u003C/p>\n\u003Cp>我们同样为此兴奋，却更感迷茫。对我们而言，最具冲击力的并非技术本身，而是亲身体验到 DeepSeek 的“深度思考”能力。R1 模型那成竹在胸、不急不徐、井井有条的推理能力。这不仅意味着我们不再需要用繁琐的提示工程去引导 AI 进行逻辑推演，更重要的是，AI能够深入理解用户意图，提供内容丰富、结构完整的答案。这一突破，使 AI 从曾经的“助手”（Assistant）跃升为“高级顾问”（Consultant），其学识、思辨能力，甚至经验积累，已然超越人类。\u003C/p>\n\u003Cp>可以预见，AI 的发展不会止步于此。顾问之后，是否会进化为“超人”？\u003C/p>\n\u003Cp>带着这些疑问，我们向 DeepSeek 提出关于 AI 与人性的关系问题。它在 18 秒的深度思考后，生成了一篇内容酷炫的文章。尽管 生成AI的旁征博引和华丽文采已不再让人感到那么新鲜，但其中有一句话让人眼前一亮：“站在人机共生的门槛上，我们需要重新理解海德格尔提出的‘技术是存在的揭蔽’之深意。” 于是，我们开始研究哲学家马丁·海德格尔（Martin Heidegger）及其代表性论述《技术的追问》（\u003Cem>The Question Concerning Technology\u003C/em>）。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://relevantstudy.github.io/images/heidegger.jpg\" alt=\"图片\">\u003C/p>\n\u003Cp>截图：Martin Heidegger\u003C/p>\n\u003Cp>\u003Cstrong>海德格尔：技术是存在的揭蔽（Reveal）\u003C/strong>\u003C/p>\n\u003Cp>在《技术的追问》中，海德格尔并未止步于将技术定义为简单的工具，而是深入探讨了技术的本质（essence）。他指出，技术的核心在于\u003Cstrong>揭示（bringing forth）真相，使隐匿的存在显现\u003C/strong>。在此框架下，他区分了古代技术与现代技术的不同特性：\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>古代技术：与自然共舞的揭蔽（Bring-Forth）\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>古代技术尊重自然，通过风车利用风力、农耕借助土地生产作物，是一种“带出”（bring-forth）真相的方式。它揭示了人与自然的关系，是一种顺应自然的技术形态。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>现代技术：挑战性的揭蔽（Challenging-Forth）\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>现代技术不再是顺应自然，而是对自然施加压力，强行索取资源。它通过解锁（unlock）、转换（transform）、存储（store）和分发（distribute）能量，把自然视为可被提取和消耗的“资源池”，使其变成单一、可控的“持存物”（standing-reserve）。例如，工厂化养殖、工业能源提取，皆是将自然转化为满足人类需求的可消耗单元。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>现代技术的危险\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>海德格尔警示，现代技术的真正威胁在于，它不仅改变了自然的面貌，更改变了人类认知世界的方式。所有事物在技术框架下都被简化为可计算、可存储、可调用的“备用物”，使人类逐渐失去对世界本源的理解。这种技术主导的思维方式，可能使人类沦为技术体系中的一环，而非世界的真正主体。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>如何克服技术的危险\u003C/strong>\u003C/p>\n\u003Cp>海德格尔认为，若能回归与自然和谐共存的方式，人类或许能避免被现代技术异化，重新找回技术与存在的平衡。古希腊的 techne（技艺）和poiesis（创造）是人类化解危险的方法。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cem>Techne\u003C/em> 是对自然的深刻理解，如木匠顺应木材的纹理进行加工，而非强行改造。\u003C/li>\n\u003Cli>\u003Cem>Poiesis\u003C/em> 则强调创造力，如雕塑家将原本普通的石块雕琢成艺术品，使隐藏的美展现于世。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://relevantstudy.github.io/images/question-concerning_technology-paper.png\" alt=\"图片\">\u003C/p>\n\u003Cp>截图：Martin Heidegger 技术的追问文章\u003C/p>\n\u003Cp>\u003Cstrong>AI 技术的本质：人性的揭蔽\u003C/strong>\u003C/p>\n\u003Cp>《技术的追问》发表于 1953 年。彼时，人类经历了广岛、长崎的核爆不久，对技术带来的震撼远不亚于我们今日面对 AI 的突飞猛进。当时人们对技术的恐惧，与我们对 AI 对人类前景的影响之忧，不无相似之处。\u003C/p>\n\u003Cp>然而，AI 技术已经超越了海德格尔所描述的现代技术。它不仅仅是能量的转换，而是具备知识、能够学习、善于推理的智能体。这种转变，使 AI 所带来的风险不再局限于资源索取，而是对\u003Cstrong>人类存在本身的挑战\u003C/strong>。\u003C/p>\n\u003Cp>不过，我们还是可以借海德格尔的框架，将现代技术的概念替换成AI技术，将自然的概念替换成人性，试着解构AI技术的本质和相关问题：\u003C/p>\n\u003Cp>\u003Cimg src=\"https://relevantstudy.github.io/images/roadmap-of-revealing.png\" alt=\"图片\">\u003C/p>\n\u003Cp>图：技术发展，其对存在揭蔽的本质不变，但方法却有阶段性特点\u003C/p>\n\u003Col>\n\u003Cli>当前，\u003Cstrong>AI 技术是人性的揭示\u003C/strong>\n\u003Cul>\n\u003Cli>现阶段的 AI，如 ChatGPT 和 DeepSeek，正处于**“带出”（Bring Forth）人性真相**的阶段。它通过学习和模拟人类的语言、行为模式，增强了人类思维的逻辑、情感的表达，使我们对自身有了更深刻的认知。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>更危险的阶段：挑战人性的揭示\u003C/strong>\n\u003Cul>\n\u003Cli>未来，当 AI 进入**“挑战”（Challenge Forth）人性真相**的阶段，它将不仅仅是揭示人类思维方式，而是能够揭示人性更底层的真相，从而具备了Engineering Humanity的能力。这将使 AI 拥有比人类更强的判断力、创造力，自主设定目标的能力。它是否会颠覆人类的主体性？人类是否还能维持自身在世界中的主导地位？\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>如何应对 AI 技术的挑战\u003C/strong>\n\u003Cul>\n\u003Cli>回归人性，或许是应对 AI 风险的关键。就像海德格尔提倡的 \u003Cem>techne\u003C/em> 和 \u003Cem>poiesis\u003C/em> 一样，我们需要创造一种\u003Cstrong>能回应人性的技术框架\u003C/strong>，确保 AI 在发展过程中不只是简单地优化效率，而是以促进人类价值为核心。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>感悟\u003C/strong>\u003C/p>\n\u003Cp>AI不是第一个人类创造毁灭自己的技术，原子弹早就可以做到了。但在世界末日的巨大阴影之下，人类又已经生存和快速发展了近百年。整体态势欣欣向荣。所以，技术的危险性并非源于技术本身，而在于人类如何回应其揭示的真相。\u003C/p>\n\u003Cp>不难预见，AI将带来的挑战更大。海德格尔的理论无法解答AI技术发展所带来的人类未来命运的问题。不过，既然AI技术的本质也是对真相的解蔽，那就让我们用它认清人性的真相，把它用在彰显人性美好和让人性更加美好的地方。\u003C/p>\n\u003Cp>本文浅尝辄止，抛砖引玉。\u003C/p>\n\u003Cp>部分参考资料：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/Martin_Heidegger\">https://en.wikipedia.org/wiki/Martin_Heidegger\u003C/a>\u003C/li>\n\u003Cli>Heidegger’s “The Question Concerning Technology”，a lecture. \u003Ca href=\"https://www.youtube.com/watch?v=nRp5lzP5L80\">https://www.youtube.com/watch?v=nRp5lzP5L80\u003C/a>\u003C/li>\n\u003Cli>The Question Concerning Technology, the paper. \u003Ca href=\"https://www2.hawaii.edu/~freeman/courses/phil394/The%20Question%20Concerning%20Technology.pdf\">https://www2.hawaii.edu/~freeman/courses/phil394/The%20Question%20Concerning%20Technology.pdf\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":215,"localImagePaths":216,"remoteImagePaths":217,"frontmatter":218,"imagePaths":221},[],[],[],{"title":200,"description":201,"date":219,"author":128,"tags":220},["Date","2025-02-16T00:00:00.000Z"],[204,205,206,207,208],[],"ai-is-a-way-of-reveal-humanity.md","code-alert-n-super-agent",{"id":223,"data":225,"body":235,"filePath":236,"digest":237,"rendered":238,"legacyId":248},{"title":226,"description":227,"date":228,"author":128,"tags":229},"Mission Accomplished","2025年九月13日-14日，MoFA Team在GOSIM 杭州2025大会上成功组织了两场智能体开发者比赛：\tCode Alert Hackathon 和 Super Agent Campathon, GOSIM Hangzhou 2025",["Date","2025-09-24T00:00:00.000Z"],[230,231,232,233,234],"MoFA","魔法师","mofa community","hackathon","campathon","2025年九月13日-14日，MoFA Team在[GOSIM 杭州2025大会](https://hangzhou2025.gosim.org/)上成功组织了两场智能体开发者比赛: [Code Alert Hackathon](https://hackathon.mofa.ai) 和 [Super Agent Campathon](https://mofa.ai/super-agent-hackathon/), GOSIM Hangzhou 2025\"\n\n![Code Alert的u型挡板](/images/block-board.jpg)\n\nCode Alert黑客松视频\n\n\u003Ccenter>\u003Cvideo controls width=\"640\">\n  \u003Csource src=\"/videos/code-alert-winners.mp4\" type=\"video/mp4\" />\n  你的浏览器不支持 video 标签。\n\u003C/video>\u003C/center>\n\nCode Alert 黑客松 和 Super Agent 坎普松比赛现场混剪视频\n\n\u003Ccenter>\u003Cvideo controls width=\"480\">\n  \u003Csource src=\"/videos/2-hackathons.mp4\" type=\"video/mp4\" />\n  你的浏览器不支持 video 标签。\n\u003C/video>\u003C/center>","src/content/blog/code-alert-n-super-agent.md","8bde9f57c6f6b8c1",{"html":239,"metadata":240},"\u003Cp>2025年九月13日-14日，MoFA Team在\u003Ca href=\"https://hangzhou2025.gosim.org/\">GOSIM 杭州2025大会\u003C/a>上成功组织了两场智能体开发者比赛: \u003Ca href=\"https://hackathon.mofa.ai\">Code Alert Hackathon\u003C/a> 和 \u003Ca href=\"https://mofa.ai/super-agent-hackathon/\">Super Agent Campathon\u003C/a>, GOSIM Hangzhou 2025”\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/block-board.jpg\" alt=\"Code Alert的u型挡板\">\u003C/p>\n\u003Cp>Code Alert黑客松视频\u003C/p>\n\u003Ccenter>\u003Cvideo controls width=\"640\">\n  \u003Csource src=\"/videos/code-alert-winners.mp4\" type=\"video/mp4\">\n  你的浏览器不支持 video 标签。\n\u003C/video>\u003C/center>\n\u003Cp>Code Alert 黑客松 和 Super Agent 坎普松比赛现场混剪视频\u003C/p>\n\u003Ccenter>\u003Cvideo controls width=\"480\">\n  \u003Csource src=\"/videos/2-hackathons.mp4\" type=\"video/mp4\">\n  你的浏览器不支持 video 标签。\n\u003C/video>\u003C/center>",{"headings":241,"localImagePaths":242,"remoteImagePaths":243,"frontmatter":244,"imagePaths":247},[],[],[],{"title":226,"description":227,"date":245,"author":128,"tags":246},["Date","2025-09-24T00:00:00.000Z"],[230,231,232,233,234],[],"code-alert-n-super-agent.md","call-for-bounty-developers",{"id":249,"data":251,"body":261,"filePath":262,"digest":263,"rendered":264,"legacyId":289},{"title":252,"description":253,"date":254,"author":255,"tags":256},"MoFA 魔法师召集令","开源智能体框架MoFA，邀你共建未来AI生态！",["Date","2025-02-11T00:00:00.000Z"],"MoFA Team",[230,257,258,259,260],"开源项目","智能体","开发者招募","悬赏任务","你是否想过，用代码赋予AI真正的“生命力”？**MoFA（Multi-agent Open Framework for AI）** 正是一个面向未来的开源智能体协作框架，致力于让开发者轻松构建、连接和扩展智能体（Agent），打造超级AI工作流！\n\n### 🌟 **关于MoFA**\n\nMoFA由Moxin团队开源（[GitHub项目地址](https://github.com/mofa-org/mofa)），聚焦多智能体系统的开发与协作。它通过模块化设计、动态数据流和智能链接能力，让开发者像搭积木一样快速组合Agent，实现复杂任务自动化。无论是代码生成、实时搜索，还是智能规划，MoFA都能成为你的终极工具箱！\n\n### 🛠 **开发者任务：你的代码，定义AI的未来**\n\n我们急需热爱技术的你加入我们的“魔法师”团队，共同攻克以下方向（部分任务示例）：\n\n- **MoFA Agent开发**：构建可复用的智能体（如代码生成器、实时爬虫、数据分析Agent）。\n- **MoFA Hub**：一个管理成千上万的MoFA智能体的智能体库，以及浏览、查询和搜索工具。\n- **框架优化**：简化安装流程、设计全局变量管理、实现动态数据流。\n- **智能增强**：用大模型实现Agent自动化链接、参数推理与任务规划。\n- **搜索引擎升级**：开发深度网页抓取、多源结果融合、实时爬虫等核心模块。\n\n**任务模式**：基于“悬赏制”（Bounty Hunter），完成任务即赢奖励与技术荣誉！\n\n### 🎯 **谁能加入？**\n\n- 熟悉Python，了解以GitHub为核心的开源工具链。\n\n- 有智能体开发经验，了解AI Agent框架（如LangChain、Autogen），对多Agent协作感兴趣。\n\n- Dora-RS、MoFA等项目经验是加分项。\n\n- 热爱开源，渴望用代码推动AI技术边界！\n\n  \n\n### 📌 **如何参与？**\n\n1. **探索GitHub**：阅读[MoFA文档](https://github.com/mofa-org/mofa)，了解框架设计。\n2. **认领任务**：查看任务列表，或提交你的创意提案。与项目负责人确认任务的认领。\n3. **开发任务**：根据任务不同要求，通过独立工作或协作的方式完成任务。\n4. **提交成果**：通过Pull Request或指定平台提交代码，通过审核即可获得奖励！\n\n### 🌍 **为什么选择MoFA？**\n\n- **技术前沿**：与全球开发者共创下一代AI基础设施。\n- **社区赋能**：参与Hackathon、获得资深开源开发者指导、积累顶尖项目经验。\n- **无限可能**：你的代码将直接对世界开放，定义AI的未来！\n\n**立即行动，成为MoFA生态的奠基者！**\n🔗 **GitHub入口**：https://github.com/mofa-org/mofa\n📩 **联系团队**：提交Issue或邮件至[dev@moxin.org](mailto:dev@moxin.org)，标注【开发者招募】","src/content/blog/call-for-bounty-developers.md","061c7d44257a1473",{"html":265,"metadata":266},"\u003Cp>你是否想过，用代码赋予AI真正的“生命力”？\u003Cstrong>MoFA（Multi-agent Open Framework for AI）\u003C/strong> 正是一个面向未来的开源智能体协作框架，致力于让开发者轻松构建、连接和扩展智能体（Agent），打造超级AI工作流！\u003C/p>\n\u003Ch3 id=\"-关于mofa\">🌟 \u003Cstrong>关于MoFA\u003C/strong>\u003C/h3>\n\u003Cp>MoFA由Moxin团队开源（\u003Ca href=\"https://github.com/mofa-org/mofa\">GitHub项目地址\u003C/a>），聚焦多智能体系统的开发与协作。它通过模块化设计、动态数据流和智能链接能力，让开发者像搭积木一样快速组合Agent，实现复杂任务自动化。无论是代码生成、实时搜索，还是智能规划，MoFA都能成为你的终极工具箱！\u003C/p>\n\u003Ch3 id=\"-开发者任务你的代码定义ai的未来\">🛠 \u003Cstrong>开发者任务：你的代码，定义AI的未来\u003C/strong>\u003C/h3>\n\u003Cp>我们急需热爱技术的你加入我们的“魔法师”团队，共同攻克以下方向（部分任务示例）：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>MoFA Agent开发\u003C/strong>：构建可复用的智能体（如代码生成器、实时爬虫、数据分析Agent）。\u003C/li>\n\u003Cli>\u003Cstrong>MoFA Hub\u003C/strong>：一个管理成千上万的MoFA智能体的智能体库，以及浏览、查询和搜索工具。\u003C/li>\n\u003Cli>\u003Cstrong>框架优化\u003C/strong>：简化安装流程、设计全局变量管理、实现动态数据流。\u003C/li>\n\u003Cli>\u003Cstrong>智能增强\u003C/strong>：用大模型实现Agent自动化链接、参数推理与任务规划。\u003C/li>\n\u003Cli>\u003Cstrong>搜索引擎升级\u003C/strong>：开发深度网页抓取、多源结果融合、实时爬虫等核心模块。\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>任务模式\u003C/strong>：基于“悬赏制”（Bounty Hunter），完成任务即赢奖励与技术荣誉！\u003C/p>\n\u003Ch3 id=\"-谁能加入\">🎯 \u003Cstrong>谁能加入？\u003C/strong>\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>熟悉Python，了解以GitHub为核心的开源工具链。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>有智能体开发经验，了解AI Agent框架（如LangChain、Autogen），对多Agent协作感兴趣。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Dora-RS、MoFA等项目经验是加分项。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>热爱开源，渴望用代码推动AI技术边界！\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"-如何参与\">📌 \u003Cstrong>如何参与？\u003C/strong>\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>探索GitHub\u003C/strong>：阅读\u003Ca href=\"https://github.com/mofa-org/mofa\">MoFA文档\u003C/a>，了解框架设计。\u003C/li>\n\u003Cli>\u003Cstrong>认领任务\u003C/strong>：查看任务列表，或提交你的创意提案。与项目负责人确认任务的认领。\u003C/li>\n\u003Cli>\u003Cstrong>开发任务\u003C/strong>：根据任务不同要求，通过独立工作或协作的方式完成任务。\u003C/li>\n\u003Cli>\u003Cstrong>提交成果\u003C/strong>：通过Pull Request或指定平台提交代码，通过审核即可获得奖励！\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"-为什么选择mofa\">🌍 \u003Cstrong>为什么选择MoFA？\u003C/strong>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>技术前沿\u003C/strong>：与全球开发者共创下一代AI基础设施。\u003C/li>\n\u003Cli>\u003Cstrong>社区赋能\u003C/strong>：参与Hackathon、获得资深开源开发者指导、积累顶尖项目经验。\u003C/li>\n\u003Cli>\u003Cstrong>无限可能\u003C/strong>：你的代码将直接对世界开放，定义AI的未来！\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>立即行动，成为MoFA生态的奠基者！\u003C/strong>\n🔗 \u003Cstrong>GitHub入口\u003C/strong>：\u003Ca href=\"https://github.com/mofa-org/mofa\">https://github.com/mofa-org/mofa\u003C/a>\n📩 \u003Cstrong>联系团队\u003C/strong>：提交Issue或邮件至\u003Ca href=\"mailto:dev@moxin.org\">dev@moxin.org\u003C/a>，标注【开发者招募】\u003C/p>",{"headings":267,"localImagePaths":283,"remoteImagePaths":284,"frontmatter":285,"imagePaths":288},[268,271,274,277,280],{"depth":33,"slug":269,"text":270},"-关于mofa","🌟 关于MoFA",{"depth":33,"slug":272,"text":273},"-开发者任务你的代码定义ai的未来","🛠 开发者任务：你的代码，定义AI的未来",{"depth":33,"slug":275,"text":276},"-谁能加入","🎯 谁能加入？",{"depth":33,"slug":278,"text":279},"-如何参与","📌 如何参与？",{"depth":33,"slug":281,"text":282},"-为什么选择mofa","🌍 为什么选择MoFA？",[],[],{"title":252,"description":253,"date":286,"author":255,"tags":287},["Date","2025-02-11T00:00:00.000Z"],[230,257,258,259,260],[],"call-for-bounty-developers.md","mofa-mobile-solution-plan",{"id":290,"data":292,"body":302,"filePath":303,"digest":304,"rendered":305,"legacyId":354},{"title":293,"description":294,"date":295,"author":133,"tags":296},"MoFA 移动端方案探索","分析 MoFA 智能体框架在移动端部署面临的技术挑战",["Date","2025-06-09T00:00:00.000Z"],[297,298,299,300,301],"移动端","架构设计","Termux","Android","技术方案","## 技术挑战\n\n### MoFA 的移动端应用场景与传统机器人控制的区别：\n\n**机器人控制场景特点**：\n- 低延迟的硬件通信（微秒级）\n- 大量传感器数据实时处理\n- Dora-RS 共享内存\n\n**移动端 AI Agent 场景特点**：\n- 逻辑推理和决策\n- 网络操作和屏幕交互为主\n- 对话和任务规划导向\n- 延迟容忍度相对较高（毫秒级即ok）\n\n### Dora-RS 的移植问题\n\n#### 一些问题：\n\n```rust\n// Dora 共享内存\nshared-memory-server (Dora自有) \n├── shared_memory_extended = \"0.13.0\"\n├── raw_sync_2 = \"0.1.5\" \n```\n\n1. **共享内存依赖**：Dora 依赖的 `shared_memory_extended` crate 在移动平台支持不完整\n2. **进程间通信机制**：移动操作系统 IPC 机制与桌面系统差异\n3. **ARM 架构适配**\n\n\n## 方案\n\n### 方案一：Termux + Root权限 完整移植（Demo阶段）\n\n#### 技术架构\n```\nAndroid Host\n├── Termux (完整Arch Linux 环境)\n│   ├── libandroid-shmem (共享内存)\n│   ├── Rust 工具链\n│   ├── Dora-RS 完整版\n│   └── MoFA 智能体框架\n└── Host Bridge App（参考Auto.JS）\n    ├── 屏幕截图 API\n    ├── 触摸注入 API\n    └── Socket 通信桥接\n```\n\n#### 分层验证计划\n\n**基础环境**\n```bash\n□ Termux 安装与 Root 权限获取\n□ 基础 Linux 命令可用性验证\n□ 网络连接和文件系统权限测试\npkg update && pkg install -y git curl wget\nsu -c \"whoami\"  # 验证 root 权限\n```\n\n**Rust 工具链**\n```bash\npkg install rust\nrustc --version && cargo --version\n```\n\n**共享内存**\n```bash\n# 内核支持检查\ncat /proc/version\nls -la /dev/shm\ngit clone https://github.com/termux/libandroid-shmem\ncd libandroid-shmem && make && make install\ngcc test/test.c -o test_shmem && ./test_shmem\n```\n\n**Dora**\n```bash\ngit clone https://github.com/dora-rs/dora\ncd dora\ncargo build --bin dora-daemon\ncargo build --bin dora-coordinator\n\n# 基础运行测试\n./target/debug/dora-daemon --help\n```\n\n\n\n**MoFA**\n```bash\npip install -e . #安装MoFA，具体省略\npython examples/hello_world/hello_world.py\n```\n\n#### Host-VM 桥接层设计\n\n**屏幕数据流**：\n```kotlin\n// Android Host 端，demo code，尚未实现\nclass ScreenBridge {\n    fun captureScreen(): ByteArray {\n        val mediaProjection = getMediaProjection()\n        val imageReader = ImageReader.newInstance(width, height, ImageFormat.JPEG, 1)\n        return compressedImageData\n    }\n    \n    fun sendToVM(data: ByteArray) {\n        socket.write(data) // 通过 Socket 发送到 VM\n    }\n}\n```\n\n**操作指令回传**：\n```python\n# VM 中的 MoFA Agent，demo code，尚未实现\nclass AndroidOperationNode:\n    def __init__(self):\n        self.bridge_socket = socket.connect(\"unix:///tmp/android_bridge\")\n    \n    def click(self, x: int, y: int):\n        command = {\"action\": \"click\", \"x\": x, \"y\": y}\n        self.bridge_socket.send(json.dumps(command))\n```\n\n### 方案二：原生 Android 重设计\n\n#### 新架构设计\n```\nAndroid Native MoFA\n├── Zenoh-Kotlin 通信层\n├── Agent Runtime (Kotlin/Java)\n├── 智能体模板系统 (简化版)\n├── Android Services\n│   ├── AccessibilityService (屏幕操作)\n│   ├── ScreenCapture (截图服务)\n│   └── ForegroundService (后台保活)\n└── Mobile Node Hub\n    ├── AutoJS 集成节点\n    ├── UI Automator 包装\n    ├── Intent 调用器\n    └── API 调用节点\n```\n\n\n\n## 前两个方案对比\n\n| 评估维度 | Termux + Linux | Native 重设计 | \n|---------|----------------|---------------|\n| **开发速度** | 🟢 快速复用现有代码 | 🔴 需要完全重写 |  \n| **运行性能** | 🔴 双层虚拟化开销 | 🟢 原生性能 | \n| **功能完整性** | 🟢 100% 兼容 | 🔴 功能受限 |  \n| **用户体验** | 🔴 安装极端复杂 | 🟢 原生体验 | \n| **维护成本** | 🟢 低维护 | 🔴 双重维护 |  \n\n\n### 进一步场景分析\n\n除非开发者有特殊需求，比如需要 agent 来操作移动端独占的某些 app（淘宝、微信等），但这个市场相对较小，而且容易偏离核心方向。\n\n认真来做的话，移动端方案还是挺费资源的。技术复杂度高，投入产出比不太理想。\n\n但后面可以尝试直接打包到容器，不做操作用户手机的操作，单纯去跑一些信息抓取、文档处理之类的 flow，还是可行的。\n\n### 方案三：容器化部署\n\n```\nContainer-based MoFA Mobile Stage\n├── Docker/Podman 容器\n│   ├── 完整 MoFA 环境\n│   ├── 预装常用依赖\n│   └── 标准化运行时\n├── 常用Agent/Flow\n│   ├── 网页数据抓取\n│   ├── 文档处理 Flow\n│   ├── API 调用集成\n│   └── 数据分析任务\n└── 移动端适配\n    ├── 响应式 Web UI\n    ├── 触摸优化交互\n    └── 离线缓存支持\n```\n\n好处：\n- 技术栈完全复用，不用重新造轮子\n- 部署简单\n\n### 方案四：云端 + 网页套壳 App\n\n后期在云端部署后，做一个网页套壳 MoFA Stage 的 app。\n\n```\nCloud MoFA + Mobile Client\n├── 云端 MoFA \n│   ├── 智能体运行环境\n│   ├── 任务调度系统\n│   └── 结果缓存层\n├── 移动端 App (网页套壳)\n│   ├── MoFA Stage 移动版\n│   ├── 任务创建与监控\n│   ├── 结果展示界面\n│   └── 离线模式支持\n└── 通信层\n    ├── WebSocket 实时通信\n    ├── RESTful API\n    └── 消息队列同步\n```\n\n\n好处：\n- 不用造轮子\n- 技术栈保持一致，维护简单\n- 解决用户的实际需求，不是为了移动端而移动端\n\n---","src/content/blog/mofa-mobile-solution-plan.md","9b6d67f55dd7290a",{"html":306,"metadata":307},"\u003Ch2 id=\"技术挑战\">技术挑战\u003C/h2>\n\u003Ch3 id=\"mofa-的移动端应用场景与传统机器人控制的区别\">MoFA 的移动端应用场景与传统机器人控制的区别：\u003C/h3>\n\u003Cp>\u003Cstrong>机器人控制场景特点\u003C/strong>：\u003C/p>\n\u003Cul>\n\u003Cli>低延迟的硬件通信（微秒级）\u003C/li>\n\u003Cli>大量传感器数据实时处理\u003C/li>\n\u003Cli>Dora-RS 共享内存\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>移动端 AI Agent 场景特点\u003C/strong>：\u003C/p>\n\u003Cul>\n\u003Cli>逻辑推理和决策\u003C/li>\n\u003Cli>网络操作和屏幕交互为主\u003C/li>\n\u003Cli>对话和任务规划导向\u003C/li>\n\u003Cli>延迟容忍度相对较高（毫秒级即ok）\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"dora-rs-的移植问题\">Dora-RS 的移植问题\u003C/h3>\n\u003Ch4 id=\"一些问题\">一些问题：\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Dora 共享内存\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">shared\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">memory\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">server (Dora自有) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">├── shared_memory_extended \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"0.13.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">├── raw_sync_2 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"0.1.5\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col>\n\u003Cli>\u003Cstrong>共享内存依赖\u003C/strong>：Dora 依赖的 \u003Ccode>shared_memory_extended\u003C/code> crate 在移动平台支持不完整\u003C/li>\n\u003Cli>\u003Cstrong>进程间通信机制\u003C/strong>：移动操作系统 IPC 机制与桌面系统差异\u003C/li>\n\u003Cli>\u003Cstrong>ARM 架构适配\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"方案\">方案\u003C/h2>\n\u003Ch3 id=\"方案一termux--root权限-完整移植demo阶段\">方案一：Termux + Root权限 完整移植（Demo阶段）\u003C/h3>\n\u003Ch4 id=\"技术架构\">技术架构\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Android Host\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── Termux (完整Arch Linux 环境)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── libandroid-shmem (共享内存)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── Rust 工具链\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── Dora-RS 完整版\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── MoFA 智能体框架\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── Host Bridge App（参考Auto.JS）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── 屏幕截图 API\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── 触摸注入 API\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    └── Socket 通信桥接\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"分层验证计划\">分层验证计划\u003C/h4>\n\u003Cp>\u003Cstrong>基础环境\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">□\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Termux\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 安装与\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Root\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 权限获取\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">□\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 基础\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Linux\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 命令可用性验证\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">□\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 网络连接和文件系统权限测试\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pkg\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> update\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">pkg\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -y\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> curl\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> wget\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">su\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"whoami\"\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 验证 root 权限\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Rust 工具链\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pkg\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> rust\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">rustc\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>共享内存\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 内核支持检查\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cat\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /proc/version\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ls\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -la\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /dev/shm\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/termux/libandroid-shmem\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> libandroid-shmem\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">make\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">make\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">gcc\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test/test.c\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test_shmem\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">./test_shmem\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Dora\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/dora-rs/dora\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dora\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --bin\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dora-daemon\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --bin\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dora-coordinator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 基础运行测试\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./target/debug/dora-daemon\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --help\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>MoFA\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -e\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#6A737D\"> #安装MoFA，具体省略\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">python\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> examples/hello_world/hello_world.py\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"host-vm-桥接层设计\">Host-VM 桥接层设计\u003C/h4>\n\u003Cp>\u003Cstrong>屏幕数据流\u003C/strong>：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Android Host 端，demo code，尚未实现\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> ScreenBridge\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> captureScreen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(): \u003C/span>\u003Cspan style=\"color:#B392F0\">ByteArray\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mediaProjection \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> getMediaProjection\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        val\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> imageReader \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ImageReader.\u003C/span>\u003Cspan style=\"color:#B392F0\">newInstance\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(width, height, ImageFormat.JPEG, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> compressedImageData\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fun\u003C/span>\u003Cspan style=\"color:#B392F0\"> sendToVM\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#B392F0\">ByteArray\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        socket.\u003C/span>\u003Cspan style=\"color:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 通过 Socket 发送到 VM\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>操作指令回传\u003C/strong>：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># VM 中的 MoFA Agent，demo code，尚未实现\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> AndroidOperationNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#79B8FF\"> __init__\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(self):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.bridge_socket \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> socket.connect(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"unix:///tmp/android_bridge\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> click\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(self, x: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        command \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"action\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"click\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"x\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: x, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: y}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.bridge_socket.send(json.dumps(command))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"方案二原生-android-重设计\">方案二：原生 Android 重设计\u003C/h3>\n\u003Ch4 id=\"新架构设计\">新架构设计\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Android Native MoFA\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── Zenoh-Kotlin 通信层\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── Agent Runtime (Kotlin/Java)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── 智能体模板系统 (简化版)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── Android Services\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── AccessibilityService (屏幕操作)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── ScreenCapture (截图服务)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── ForegroundService (后台保活)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── Mobile Node Hub\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── AutoJS 集成节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── UI Automator 包装\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── Intent 调用器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    └── API 调用节点\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"前两个方案对比\">前两个方案对比\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>评估维度\u003C/th>\u003Cth>Termux + Linux\u003C/th>\u003Cth>Native 重设计\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>开发速度\u003C/strong>\u003C/td>\u003Ctd>🟢 快速复用现有代码\u003C/td>\u003Ctd>🔴 需要完全重写\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>运行性能\u003C/strong>\u003C/td>\u003Ctd>🔴 双层虚拟化开销\u003C/td>\u003Ctd>🟢 原生性能\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>功能完整性\u003C/strong>\u003C/td>\u003Ctd>🟢 100% 兼容\u003C/td>\u003Ctd>🔴 功能受限\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>用户体验\u003C/strong>\u003C/td>\u003Ctd>🔴 安装极端复杂\u003C/td>\u003Ctd>🟢 原生体验\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>维护成本\u003C/strong>\u003C/td>\u003Ctd>🟢 低维护\u003C/td>\u003Ctd>🔴 双重维护\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"进一步场景分析\">进一步场景分析\u003C/h3>\n\u003Cp>除非开发者有特殊需求，比如需要 agent 来操作移动端独占的某些 app（淘宝、微信等），但这个市场相对较小，而且容易偏离核心方向。\u003C/p>\n\u003Cp>认真来做的话，移动端方案还是挺费资源的。技术复杂度高，投入产出比不太理想。\u003C/p>\n\u003Cp>但后面可以尝试直接打包到容器，不做操作用户手机的操作，单纯去跑一些信息抓取、文档处理之类的 flow，还是可行的。\u003C/p>\n\u003Ch3 id=\"方案三容器化部署\">方案三：容器化部署\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Container-based MoFA Mobile Stage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── Docker/Podman 容器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 完整 MoFA 环境\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 预装常用依赖\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── 标准化运行时\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── 常用Agent/Flow\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 网页数据抓取\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 文档处理 Flow\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── API 调用集成\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── 数据分析任务\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── 移动端适配\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── 响应式 Web UI\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── 触摸优化交互\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    └── 离线缓存支持\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>好处：\u003C/p>\n\u003Cul>\n\u003Cli>技术栈完全复用，不用重新造轮子\u003C/li>\n\u003Cli>部署简单\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"方案四云端--网页套壳-app\">方案四：云端 + 网页套壳 App\u003C/h3>\n\u003Cp>后期在云端部署后，做一个网页套壳 MoFA Stage 的 app。\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Cloud MoFA + Mobile Client\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── 云端 MoFA \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 智能体运行环境\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 任务调度系统\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── 结果缓存层\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── 移动端 App (网页套壳)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── MoFA Stage 移动版\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 任务创建与监控\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── 结果展示界面\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── 离线模式支持\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── 通信层\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── WebSocket 实时通信\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── RESTful API\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    └── 消息队列同步\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>好处：\u003C/p>\n\u003Cul>\n\u003Cli>不用造轮子\u003C/li>\n\u003Cli>技术栈保持一致，维护简单\u003C/li>\n\u003Cli>解决用户的实际需求，不是为了移动端而移动端\u003C/li>\n\u003C/ul>\n\u003Chr>",{"headings":308,"localImagePaths":348,"remoteImagePaths":349,"frontmatter":350,"imagePaths":353},[309,311,314,317,321,323,326,328,330,333,336,338,340,342,345],{"depth":29,"slug":310,"text":310},"技术挑战",{"depth":33,"slug":312,"text":313},"mofa-的移动端应用场景与传统机器人控制的区别","MoFA 的移动端应用场景与传统机器人控制的区别：",{"depth":33,"slug":315,"text":316},"dora-rs-的移植问题","Dora-RS 的移植问题",{"depth":318,"slug":319,"text":320},4,"一些问题","一些问题：",{"depth":29,"slug":322,"text":322},"方案",{"depth":33,"slug":324,"text":325},"方案一termux--root权限-完整移植demo阶段","方案一：Termux + Root权限 完整移植（Demo阶段）",{"depth":318,"slug":327,"text":327},"技术架构",{"depth":318,"slug":329,"text":329},"分层验证计划",{"depth":318,"slug":331,"text":332},"host-vm-桥接层设计","Host-VM 桥接层设计",{"depth":33,"slug":334,"text":335},"方案二原生-android-重设计","方案二：原生 Android 重设计",{"depth":318,"slug":337,"text":337},"新架构设计",{"depth":29,"slug":339,"text":339},"前两个方案对比",{"depth":33,"slug":341,"text":341},"进一步场景分析",{"depth":33,"slug":343,"text":344},"方案三容器化部署","方案三：容器化部署",{"depth":33,"slug":346,"text":347},"方案四云端--网页套壳-app","方案四：云端 + 网页套壳 App",[],[],{"title":293,"description":294,"date":351,"author":133,"tags":352},["Date","2025-06-09T00:00:00.000Z"],[297,298,299,300,301],[],"mofa-mobile-solution-plan.md","introducing-mofa",{"id":355,"data":357,"body":366,"filePath":367,"digest":368,"rendered":369,"legacyId":427},{"title":358,"description":359,"date":360,"author":255,"tags":361},"MoFA 开发框架：组合式 AI 智能体构建平台","MoFA 是一个以组合的方式构建 AI 智能体的软件框架，让平凡人也能创造非凡的 AI 应用",["Date","2025-06-09T00:00:00.000Z"],[362,363,364,258,365],"架构","AI框架","Dora-RS","组合式AI","MoFA（**M**odular **F**ramework for **A**gent）是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent）。\n\n## 🎯 设计理念\n\nMoFA 独特的设计理念是：\n\n- **平凡人做非凡事**：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。\n\n- **Composition AI**：受 Unix 哲学启发，MoFA 以\"组合\"作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。\n\n- **Everything Agent**：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。\n\n- **Data Flow**：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用。\n\n## 🏗️ 技术架构\n\n\u003Cimg src=\"https://github.com/RelevantStudy/mofasearch/blob/main/hackathons/docs/images/image-20250310010710778.png\" alt=\"MoFA技术架构图\" style=\"zoom:67%;\" />\n\nMoFA 与 Dora-RS 形成分层架构，构成从底层通信到上层智能体的技术栈：\n\n```\n┌─────────────────────────────────────┐\n│           MoFA 层                   │  ← AI智能体开发框架\n│  智能体模板 + 组合逻辑 + 核心服务    │     (Python为主)\n├─────────────────────────────────────┤\n│           Dora 层                   │  ← 数据流引擎  \n│  实时通信 + 跨语言 + 运行时管理     │     (Rust核心)\n└─────────────────────────────────────┘\n```\n\n## 🚀 快速开始\n\n### 环境准备\n\n#### Python 环境\n```bash\n# 安装 UV 包管理器加速 mofa 安装\npip install uv\n```\n\n**注意事项**：\n- 本地python环境要纯净，不要多个python版本，否则容易导致Dora-rs运行环境和Mofa安装环境的冲突\n- 如果使用 Anaconda/Miniconda，务必将 Mofa 安装到 `Base` 环境下\n- 要求 python 环境 >= 3.10\n- 目前已在 WSL（Ubuntu 22.04）和 macOS 上测试，Windows 暂不支持\n\n#### Rust 环境\n```bash\n# 安装 Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# 安装 Dora 运行时\ncargo install dora-cli\n\n# 验证安装\ndora --version\n```\n\n### 安装 MoFA\n\n```bash\n# 克隆仓库\ngit clone https://github.com/mofa-org/mofa.git\ncd mofa/python\n\n# 安装依赖\nuv pip install -e . && pip install -e . \n```\n\n### Hello World 示例\n\n```bash\ncd mofa/python/examples/hello_world\n\n# 启动 Dora 服务\ndora up\n\n# 构建并运行数据流\ndora build hello_world_dataflow.yml\ndora start hello_world_dataflow.yml\n\n# 在另一个终端测试\nterminal-input\n> hello\n# 输出: hello\n```\n\n## 💡 5分钟创建第一个应用\n\n### 1. 创建 Agent 项目\n```bash\nmofa new-agent my-llm-agent\ncd my-llm-agent\n```\n\n### 2. 配置环境变量\n创建 `.env.secret` 文件：\n```plaintext\nLLM_API_KEY=your_api_key_here\nLLM_API_BASE=https://api.openai.com/v1\nLLM_MODEL=gpt-3.5-turbo\n```\n\n### 3. 实现 Agent 逻辑\n编辑 `my_llm_agent/main.py`：\n```python\nfrom mofa.agent_build.base.base_agent import MofaAgent, run_agent\nfrom openai import OpenAI\nimport os\nfrom dotenv import load_dotenv\n\n@run_agent\ndef run(agent: MofaAgent):\n    try:\n        load_dotenv('.env.secret')\n        \n        client = OpenAI(\n            api_key=os.getenv('LLM_API_KEY'),\n            base_url=os.getenv('LLM_API_BASE')\n        )\n        \n        user_input = agent.receive_parameter('query')\n        \n        response = client.chat.completions.create(\n            model=os.getenv('LLM_MODEL', 'gpt-3.5-turbo'),\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful AI assistant.\"},\n                {\"role\": \"user\", \"content\": user_input}\n            ]\n        )\n        \n        agent.send_output(\n            agent_output_name='llm_result',\n            agent_result=response.choices[0].message.content\n        )\n        \n    except Exception as e:\n        agent.logger.error(f\"Error: {str(e)}\")\n        agent.send_output('llm_result', f\"Error: {str(e)}\")\n\ndef main():\n    agent = MofaAgent(agent_name='my-llm-agent')\n    run(agent=agent)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### 4. 创建数据流配置\n创建 `my_llm_dataflow.yml`：\n```yaml\nnodes:\n  - id: terminal-input\n    build: pip install -e ../../node-hub/terminal-input\n    path: dynamic\n    outputs: data\n    inputs:\n      agent_response: my-llm-agent/llm_result\n\n  - id: my-llm-agent\n    build: pip install -e . ../../agent-hub/my-llm-agent\n    path: my-llm-agent\n    outputs: llm_result\n    inputs:\n      query: terminal-input/data\n    env:\n      IS_DATAFLOW_END: true\n      WRITE_LOG: true\n```\n\n### 5. 运行和测试\n```bash\ndora up\ndora build my_llm_dataflow.yml\ndora start my_llm_dataflow.yml\n\n# 新开终端测试\nterminal-input\n> 你好，请介绍一下自己\n```\n\n## 🔧 构建自定义 Agent\n\n### 使用模板创建\n```bash\nmofa new-agent you_agent_name \n```\n\n### 核心代码示例\n```python\nfrom mofa.agent_build.base.base_agent import MofaAgent, run_agent\n\n@run_agent\ndef run(agent: MofaAgent):\n    try:\n        # 接收单个agent输入\n        task = agent.receive_parameter('task')\n        \n        # 接收多个agent输入\n        receive_datas = agent.receive_parameter(['example_one','example_two'])\n        # 结果类似于 {'example_one':'example_one_data','example_two':'example_two_data'}\n\n        # 处理逻辑 你可以把你的逻辑添加到这里\n        result = process_task(task)\n        \n        # 发送输出 确保你的输出是可以被序列化的对象(字符串等)\n        agent.send_output(\n            agent_output_name='agent_result',\n            agent_result=result\n        )\n        \n    except Exception as e:\n        agent.logger.error(f\"Error: {str(e)}\")\n        \n\ndef process_task(data: str) -> str:\n    \"\"\"示例处理函数\"\"\"\n    return f\"Processed: {data}\"\n\ndef main():\n    agent = MofaAgent(agent_name='my-new-agent')\n    run(agent=agent)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n立即开始您的智能体开发之旅！","src/content/blog/introducing-mofa.md","30c59d8c551a7780",{"html":370,"metadata":371},"\u003Cp>MoFA（\u003Cstrong>M\u003C/strong>odular \u003Cstrong>F\u003C/strong>ramework for \u003Cstrong>A\u003C/strong>gent）是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent）。\u003C/p>\n\u003Ch2 id=\"-设计理念\">🎯 设计理念\u003C/h2>\n\u003Cp>MoFA 独特的设计理念是：\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>平凡人做非凡事\u003C/strong>：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Composition AI\u003C/strong>：受 Unix 哲学启发，MoFA 以”组合”作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Everything Agent\u003C/strong>：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Data Flow\u003C/strong>：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用。\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"️-技术架构\">🏗️ 技术架构\u003C/h2>\n\u003Cimg src=\"https://github.com/RelevantStudy/mofasearch/blob/main/hackathons/docs/images/image-20250310010710778.png\" alt=\"MoFA技术架构图\" style=\"zoom:67%;\">\n\u003Cp>MoFA 与 Dora-RS 形成分层架构，构成从底层通信到上层智能体的技术栈：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>┌─────────────────────────────────────┐\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│           MoFA 层                   │  ← AI智能体开发框架\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│  智能体模板 + 组合逻辑 + 核心服务    │     (Python为主)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├─────────────────────────────────────┤\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│           Dora 层                   │  ← 数据流引擎  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│  实时通信 + 跨语言 + 运行时管理     │     (Rust核心)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└─────────────────────────────────────┘\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-快速开始\">🚀 快速开始\u003C/h2>\n\u003Ch3 id=\"环境准备\">环境准备\u003C/h3>\n\u003Ch4 id=\"python-环境\">Python 环境\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装 UV 包管理器加速 mofa 安装\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> uv\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>注意事项\u003C/strong>：\u003C/p>\n\u003Cul>\n\u003Cli>本地python环境要纯净，不要多个python版本，否则容易导致Dora-rs运行环境和Mofa安装环境的冲突\u003C/li>\n\u003Cli>如果使用 Anaconda/Miniconda，务必将 Mofa 安装到 \u003Ccode>Base\u003C/code> 环境下\u003C/li>\n\u003Cli>要求 python 环境 >= 3.10\u003C/li>\n\u003Cli>目前已在 WSL（Ubuntu 22.04）和 macOS 上测试，Windows 暂不支持\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"rust-环境\">Rust 环境\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装 Rust\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --proto\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '=https'\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --tlsv1.2\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -sSf\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://sh.rustup.rs\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装 Dora 运行时\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dora-cli\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 验证安装\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"安装-mofa\">安装 MoFA\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 克隆仓库\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/mofa-org/mofa.git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mofa/python\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装依赖\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">uv\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -e\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -e\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"hello-world-示例\">Hello World 示例\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mofa/python/examples/hello_world\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 启动 Dora 服务\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> up\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 构建并运行数据流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello_world_dataflow.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> start\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello_world_dataflow.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 在另一个终端测试\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">terminal-input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hello\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 输出: hello\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-5分钟创建第一个应用\">💡 5分钟创建第一个应用\u003C/h2>\n\u003Ch3 id=\"1-创建-agent-项目\">1. 创建 Agent 项目\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mofa\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> new-agent\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-llm-agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-llm-agent\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-配置环境变量\">2. 配置环境变量\u003C/h3>\n\u003Cp>创建 \u003Ccode>.env.secret\u003C/code> 文件：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>LLM_API_KEY=your_api_key_here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>LLM_API_BASE=https://api.openai.com/v1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>LLM_MODEL=gpt-3.5-turbo\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-实现-agent-逻辑\">3. 实现 Agent 逻辑\u003C/h3>\n\u003Cp>编辑 \u003Ccode>my_llm_agent/main.py\u003C/code>：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MofaAgent, run_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> openai \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> OpenAI\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> os\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dotenv \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> load_dotenv\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@run_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(agent: MofaAgent):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        load_dotenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'.env.secret'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        client \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> OpenAI(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            api_key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">os.getenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'LLM_API_KEY'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            base_url\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">os.getenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'LLM_API_BASE'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        user_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> agent.receive_parameter(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'query'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> client.chat.completions.create(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            model\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">os.getenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'LLM_MODEL'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'gpt-3.5-turbo'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            messages\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"role\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"system\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"content\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"You are a helpful AI assistant.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"role\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"user\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"content\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: user_input}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        agent.send_output(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            agent_output_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'llm_result'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            agent_result\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">response.choices[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">].message.content\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    except\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Exception\u003C/span>\u003Cspan style=\"color:#F97583\"> as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        agent.logger.error(\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Error: \u003C/span>\u003Cspan style=\"color:#79B8FF\">{str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e)\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        agent.send_output(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'llm_result'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Error: \u003C/span>\u003Cspan style=\"color:#79B8FF\">{str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e)\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">():\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    agent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MofaAgent(\u003C/span>\u003Cspan style=\"color:#FFAB70\">agent_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'my-llm-agent'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    run(\u003C/span>\u003Cspan style=\"color:#FFAB70\">agent\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">agent)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#79B8FF\"> __name__\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"__main__\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    main()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"4-创建数据流配置\">4. 创建数据流配置\u003C/h3>\n\u003Cp>创建 \u003Ccode>my_llm_dataflow.yml\u003C/code>：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">nodes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">terminal-input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">pip install -e ../../node-hub/terminal-input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">dynamic\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    outputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    inputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      agent_response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">my-llm-agent/llm_result\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">my-llm-agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">pip install -e . ../../agent-hub/my-llm-agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">my-llm-agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    outputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">llm_result\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    inputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      query\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">terminal-input/data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    env\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      IS_DATAFLOW_END\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      WRITE_LOG\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"5-运行和测试\">5. 运行和测试\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> up\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my_llm_dataflow.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> start\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my_llm_dataflow.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 新开终端测试\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">terminal-input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> 你好，请介绍一下自己\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-构建自定义-agent\">🔧 构建自定义 Agent\u003C/h2>\n\u003Ch3 id=\"使用模板创建\">使用模板创建\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mofa\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> new-agent\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> you_agent_name\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"核心代码示例\">核心代码示例\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MofaAgent, run_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@run_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(agent: MofaAgent):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        # 接收单个agent输入\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        task \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> agent.receive_parameter(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'task'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        # 接收多个agent输入\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        receive_datas \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> agent.receive_parameter([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'example_one'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'example_two'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        # 结果类似于 {'example_one':'example_one_data','example_two':'example_two_data'}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        # 处理逻辑 你可以把你的逻辑添加到这里\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> process_task(task)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        # 发送输出 确保你的输出是可以被序列化的对象(字符串等)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        agent.send_output(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            agent_output_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'agent_result'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            agent_result\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">result\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    except\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Exception\u003C/span>\u003Cspan style=\"color:#F97583\"> as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        agent.logger.error(\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Error: \u003C/span>\u003Cspan style=\"color:#79B8FF\">{str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e)\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> process_task\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data: \u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) -> \u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"示例处理函数\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Processed: \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">data\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">():\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    agent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MofaAgent(\u003C/span>\u003Cspan style=\"color:#FFAB70\">agent_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'my-new-agent'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    run(\u003C/span>\u003Cspan style=\"color:#FFAB70\">agent\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">agent)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#79B8FF\"> __name__\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"__main__\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    main()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Cp>立即开始您的智能体开发之旅！\u003C/p>",{"headings":372,"localImagePaths":421,"remoteImagePaths":422,"frontmatter":423,"imagePaths":426},[373,376,379,382,384,387,390,393,396,399,402,405,408,411,414,417,419],{"depth":29,"slug":374,"text":375},"-设计理念","🎯 设计理念",{"depth":29,"slug":377,"text":378},"️-技术架构","🏗️ 技术架构",{"depth":29,"slug":380,"text":381},"-快速开始","🚀 快速开始",{"depth":33,"slug":383,"text":383},"环境准备",{"depth":318,"slug":385,"text":386},"python-环境","Python 环境",{"depth":318,"slug":388,"text":389},"rust-环境","Rust 环境",{"depth":33,"slug":391,"text":392},"安装-mofa","安装 MoFA",{"depth":33,"slug":394,"text":395},"hello-world-示例","Hello World 示例",{"depth":29,"slug":397,"text":398},"-5分钟创建第一个应用","💡 5分钟创建第一个应用",{"depth":33,"slug":400,"text":401},"1-创建-agent-项目","1. 创建 Agent 项目",{"depth":33,"slug":403,"text":404},"2-配置环境变量","2. 配置环境变量",{"depth":33,"slug":406,"text":407},"3-实现-agent-逻辑","3. 实现 Agent 逻辑",{"depth":33,"slug":409,"text":410},"4-创建数据流配置","4. 创建数据流配置",{"depth":33,"slug":412,"text":413},"5-运行和测试","5. 运行和测试",{"depth":29,"slug":415,"text":416},"-构建自定义-agent","🔧 构建自定义 Agent",{"depth":33,"slug":418,"text":418},"使用模板创建",{"depth":33,"slug":420,"text":420},"核心代码示例",[],[],{"title":358,"description":359,"date":424,"author":255,"tags":425},["Date","2025-06-09T00:00:00.000Z"],[362,363,364,258,365],[],"introducing-mofa.md","mofa-stage-tasks",{"id":428,"data":430,"body":438,"filePath":439,"digest":440,"rendered":441,"legacyId":484},{"title":431,"description":432,"date":433,"author":434,"tags":435},"MoFA 阶段性规划","MoFA Stage下一阶段的开发任务及其赏金优先级划分。",["Date","2025-07-02T00:00:00.000Z"],"Li Yao",[230,436,260,437],"开发任务","功能规划","##  **AI Native**\n\n### 1. **智能代码助手（类Copilot）**\n```bash\n# 基于Monaco编辑器扩展\nfrontend/src/components/editor/\n├── AIAssistant.vue            # AI助手组件\n├── CodeSuggestion.vue         # 代码建议\n├── SmartRefactor.vue          # 智能重构\n└── ContextMenu.vue            # 右键智能菜单\n```\n**功能**: \n- 划选代码 → AI解释/优化建议\n- 自然语言 → 代码生成\n- 智能import和依赖管理\n\n**优先级**: High\n\n\n### 2. **Intelligent Linking**\n```bash\n# 基于现有DataflowGenerator扩展\n# 现在只支持Flow的自动生成，或许也可以加上Node的自动生成\nfrontend/src/components/ai/\n├── NLConfigGenerator.vue      # 自然语言配置\n├── ConfigValidator.vue        # 配置验证\n└── SmartConfigSuggest.vue     # 智能配置建议\n```\n**功能**: \"我想要一个能够处理PDF文档的智能体\" → 自动生成配置\n\n**优先级**: 先由李尧继续做，后面进一步明确了功能并且解藕为dataflow后，再交给赏金，避免反复对齐反复修改的扯皮。所以暂定为Low。\n\n##  **监控和调试**\n\n### 3. **调试和测试工具**\n```bash\n# 新增调试模块\nfrontend/src/views/Debug/\n├── AgentDebugger.vue         # Agent调试器\n├── DataflowTracer.vue        # 数据流追踪\n└── TestRunner.vue            # 测试运行器\n```\n\n**优先级**: High\n\n\n### 4. **智能日志分析**\n```bash\n# 优化和扩展现有日志功能\nbackend/analytics/\n├── log_parser.py              # 日志解析\n├── anomaly_detector.py        # 异常检测\n└── insights_generator.py      # 洞察生成\n```\n\n**功能**: AI驱动的日志分析和问题诊断\n\n**优先级**: Medium or High？\n\n\n\n### 5. **运行状态监控面板**\n```bash\n# 新增\nfrontend/src/views/Monitoring/\n├── PerformanceDashboard.vue   # 性能仪表盘\n└── ResourceUsage.vue          # 资源使用情况\n```\n\n**优先级**: Low or Medium？\n\n##  **其它**\n\n### 6. **基于nodehub和flowhub，做一个友好的\"商店\"**\n```bash\n# 新增市场模块\nfrontend/src/views/Marketplace/\n├── AgentMarket.vue           # Agent市场\n├── AgentDetails.vue          # Agent详情页\n└── Reviews.vue               # 评价系统\n```\n**优先级**: Low\n\n##  **云部署和基础设施**\n\n### 7. **SaaS化改造**\n```bash\n# 扩展现有\nbackend/routes/organizations.py  # 组织管理\nbackend/routes/users.py         # 用户权限\nfrontend/src/views/Dashboard.vue # 多用户仪表盘\n```\n\n**优先级**: Low\n\n\n### 8. **云部署方案**\n```bash\n# 新增\ndeploy/\n├── kubernetes/                 # K8s部署配置\n├── terraform/                  # 云资源管理\n└── scripts/cloud-deploy.sh     # 一键部署脚本\n```\n**功能**: 支持AWS/Google等主流平台的一键部署\n\n**优先级**: Low","src/content/blog/mofa-stage-tasks.md","1023517551206837",{"html":442,"metadata":443},"\u003Ch2 id=\"ai-native\">\u003Cstrong>AI Native\u003C/strong>\u003C/h2>\n\u003Ch3 id=\"1-智能代码助手类copilot\">1. \u003Cstrong>智能代码助手（类Copilot）\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 基于Monaco编辑器扩展\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">frontend/src/components/editor/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> AIAssistant.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">            # AI助手组件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> CodeSuggestion.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">         # 代码建议\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> SmartRefactor.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">          # 智能重构\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ContextMenu.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">            # 右键智能菜单\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>功能\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>划选代码 → AI解释/优化建议\u003C/li>\n\u003Cli>自然语言 → 代码生成\u003C/li>\n\u003Cli>智能import和依赖管理\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: High\u003C/p>\n\u003Ch3 id=\"2-intelligent-linking\">2. \u003Cstrong>Intelligent Linking\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 基于现有DataflowGenerator扩展\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 现在只支持Flow的自动生成，或许也可以加上Node的自动生成\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">frontend/src/components/ai/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> NLConfigGenerator.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">      # 自然语言配置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ConfigValidator.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">        # 配置验证\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> SmartConfigSuggest.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">     # 智能配置建议\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>功能\u003C/strong>: “我想要一个能够处理PDF文档的智能体” → 自动生成配置\u003C/p>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: 先由李尧继续做，后面进一步明确了功能并且解藕为dataflow后，再交给赏金，避免反复对齐反复修改的扯皮。所以暂定为Low。\u003C/p>\n\u003Ch2 id=\"监控和调试\">\u003Cstrong>监控和调试\u003C/strong>\u003C/h2>\n\u003Ch3 id=\"3-调试和测试工具\">3. \u003Cstrong>调试和测试工具\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 新增调试模块\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">frontend/src/views/Debug/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> AgentDebugger.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">         # Agent调试器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> DataflowTracer.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">        # 数据流追踪\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> TestRunner.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">            # 测试运行器\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: High\u003C/p>\n\u003Ch3 id=\"4-智能日志分析\">4. \u003Cstrong>智能日志分析\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 优化和扩展现有日志功能\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">backend/analytics/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log_parser.py\u003C/span>\u003Cspan style=\"color:#6A737D\">              # 日志解析\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> anomaly_detector.py\u003C/span>\u003Cspan style=\"color:#6A737D\">        # 异常检测\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> insights_generator.py\u003C/span>\u003Cspan style=\"color:#6A737D\">      # 洞察生成\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>功能\u003C/strong>: AI驱动的日志分析和问题诊断\u003C/p>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: Medium or High？\u003C/p>\n\u003Ch3 id=\"5-运行状态监控面板\">5. \u003Cstrong>运行状态监控面板\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 新增\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">frontend/src/views/Monitoring/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> PerformanceDashboard.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">   # 性能仪表盘\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ResourceUsage.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">          # 资源使用情况\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: Low or Medium？\u003C/p>\n\u003Ch2 id=\"其它\">\u003Cstrong>其它\u003C/strong>\u003C/h2>\n\u003Ch3 id=\"6-基于nodehub和flowhub做一个友好的商店\">6. \u003Cstrong>基于nodehub和flowhub，做一个友好的”商店”\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 新增市场模块\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">frontend/src/views/Marketplace/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> AgentMarket.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">           # Agent市场\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> AgentDetails.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">          # Agent详情页\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Reviews.vue\u003C/span>\u003Cspan style=\"color:#6A737D\">               # 评价系统\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: Low\u003C/p>\n\u003Ch2 id=\"云部署和基础设施\">\u003Cstrong>云部署和基础设施\u003C/strong>\u003C/h2>\n\u003Ch3 id=\"7-saas化改造\">7. \u003Cstrong>SaaS化改造\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 扩展现有\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">backend/routes/organizations.py\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 组织管理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">backend/routes/users.py\u003C/span>\u003Cspan style=\"color:#6A737D\">         # 用户权限\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">frontend/src/views/Dashboard.vue\u003C/span>\u003Cspan style=\"color:#6A737D\"> # 多用户仪表盘\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: Low\u003C/p>\n\u003Ch3 id=\"8-云部署方案\">8. \u003Cstrong>云部署方案\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 新增\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">deploy/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> kubernetes/\u003C/span>\u003Cspan style=\"color:#6A737D\">                 # K8s部署配置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> terraform/\u003C/span>\u003Cspan style=\"color:#6A737D\">                  # 云资源管理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> scripts/cloud-deploy.sh\u003C/span>\u003Cspan style=\"color:#6A737D\">     # 一键部署脚本\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>功能\u003C/strong>: 支持AWS/Google等主流平台的一键部署\u003C/p>\n\u003Cp>\u003Cstrong>优先级\u003C/strong>: Low\u003C/p>",{"headings":444,"localImagePaths":478,"remoteImagePaths":479,"frontmatter":480,"imagePaths":483},[445,448,451,454,456,459,462,465,467,470,472,475],{"depth":29,"slug":446,"text":447},"ai-native","AI Native",{"depth":33,"slug":449,"text":450},"1-智能代码助手类copilot","1. 智能代码助手（类Copilot）",{"depth":33,"slug":452,"text":453},"2-intelligent-linking","2. Intelligent Linking",{"depth":29,"slug":455,"text":455},"监控和调试",{"depth":33,"slug":457,"text":458},"3-调试和测试工具","3. 调试和测试工具",{"depth":33,"slug":460,"text":461},"4-智能日志分析","4. 智能日志分析",{"depth":33,"slug":463,"text":464},"5-运行状态监控面板","5. 运行状态监控面板",{"depth":29,"slug":466,"text":466},"其它",{"depth":33,"slug":468,"text":469},"6-基于nodehub和flowhub做一个友好的商店","6. 基于nodehub和flowhub，做一个友好的”商店”",{"depth":29,"slug":471,"text":471},"云部署和基础设施",{"depth":33,"slug":473,"text":474},"7-saas化改造","7. SaaS化改造",{"depth":33,"slug":476,"text":477},"8-云部署方案","8. 云部署方案",[],[],{"title":431,"description":432,"date":481,"author":434,"tags":482},["Date","2025-07-02T00:00:00.000Z"],[230,436,260,437],[],"mofa-stage-tasks.md","types-of-magicians",{"id":485,"data":487,"body":496,"filePath":497,"digest":498,"rendered":499,"legacyId":532},{"title":488,"description":489,"date":490,"author":255,"tags":491},"MoFA 赏金魔法师任务","如果您有兴趣体验我们的组合式AI开发，成为我们的赏金魔法师，可以考虑联系我们，做一下魔法师任务。",["Date","2025-02-12T00:00:00.000Z"],[230,492,493,494,495],"魔法师等级","赏金任务","智能体开发","开发者社区","我们诚挚邀请所有对智能体（AI Agents）感兴趣的开发者，一起来探索、建设和使用 MoFA开源项目，打造更强大的 智能体。\n\n在 MoFA 生态中，开发者拥有一个独特的称号：**“魔法师”**。\n\n但并不是每个人都能轻易成为魔法师。要想真正掌握 MoFA，你需要通过挑战，展现你的技术实力！你可以从简单的任务开始，逐步提升难度，最终成为驾驭 AI 智能体的高手。\n\n当您成为“魔法师”，则有机会完成赏金任务。\n\n------\n\n## **MoFA 魔法师成长之路**\n\n我们将 MoFA 开发者分为四个等级，每一级都代表着更深的理解与更强的技术能力。你会在哪个阶段加入？又会如何进阶？\n\n### 🔹 **初级魔法师（Beginner Magician）**\n\n> **适合初学者，理解 MoFA 基础架构，完成简单代理任务**\n\n- 任务示例：\n  - **问候代理**：开发一个简单的 MoFA Agent，让它自动翻译用户的输入为英文。\n  - **天气查询代理**：输入城市名称，返回该城市的天气情况。\n\n------\n\n### 🔹 **中级魔法师（Intermediate Magician）**\n\n> **掌握 MoFA 组件，构建较复杂的智能系统**\n\n- 任务示例：\n  - **视频总结系统**：创建一个 AI Agent，能自动总结 20 分钟内的视频核心内容。\n  - **智能客服系统**：搭建一个多代理协作的客服系统，包括问题分类、自动回复、情感分析、人工客服转接等功能。\n\n------\n\n### 🔹 **高级魔法师（Advanced Magician）**\n\n> **深入 智能体架构，整合外部数据源，打造高复杂度项目**\n\n- 任务示例：\n  - **社交媒体分析系统**：抓取社交平台内容，分析情感趋势、热点话题，并提供可视化数据。\n  - **知识图谱生成查询系统**：从书籍或文本中提取实体、关系，构建可查询的知识图谱，并支持自然语言查询。\n\n------\n\n### 🔹 **创新型魔法师（Visionary Magician）**\n\n> **不仅是开发者，更是 MoFA 生态的设计者**\n\n- 提出有价值的 MoFA 项目建议和改进方案，比如：\n  - 让 MoFA 成为世界级的开源 AI Agent 框架，如何优化开发体验？\n  - 如何构建 MoFA 的插件生态，扩展其应用场景？\n  - 提供更高效的 智能体训练方法，提高模型性能。\n\n------\n\n我么们也寻找一类魔法师加入我们：\n\n### 🔹 **大本营魔法师（BaseCamp Magician）**\n\n> **专注于 MoFA 代码仓建设，优化开发者体验**\n\n- 任务示例：\n  - **MoFA 安装优化**：改进安装流程，让新开发者更快上手。\n  - **脚手架工具**：设计 MoFA Agent 的代码模板，减少重复工作，提高开发效率。\n  - **CI/CD 流程**：提升 MoFA 的持续集成和自动化部署能力。\n  - **单元测试（Unit Testing）**：为 MoFA 关键功能编写测试，提高代码可靠性。\n\n------\n\n## **你准备好成为魔法师了吗？**\n\nMoFA 不仅是一个 智能体框架，更是一个充满创造力和挑战的开发者社区。无论你是 AI 新手还是资深工程师，都可以找到适合自己的任务，挑战自我，贡献开源，一起把 MoFA 打造成世界级的 AI Agent 生态！\n\n**💡 立即加入 MoFA，成为 MoFA 魔法师，施展你的智能体魔法！获取赏金**\n\n请联系 @阿图教育微信号 rustedu\n![barcode](https://relevantstudy.github.io/images/a-tu-bar-code.jpg)\n\n##","src/content/blog/types-of-magicians.md","893d1535f8935df7",{"html":500,"metadata":501},"\u003Cp>我们诚挚邀请所有对智能体（AI Agents）感兴趣的开发者，一起来探索、建设和使用 MoFA开源项目，打造更强大的 智能体。\u003C/p>\n\u003Cp>在 MoFA 生态中，开发者拥有一个独特的称号：\u003Cstrong>“魔法师”\u003C/strong>。\u003C/p>\n\u003Cp>但并不是每个人都能轻易成为魔法师。要想真正掌握 MoFA，你需要通过挑战，展现你的技术实力！你可以从简单的任务开始，逐步提升难度，最终成为驾驭 AI 智能体的高手。\u003C/p>\n\u003Cp>当您成为“魔法师”，则有机会完成赏金任务。\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"mofa-魔法师成长之路\">\u003Cstrong>MoFA 魔法师成长之路\u003C/strong>\u003C/h2>\n\u003Cp>我们将 MoFA 开发者分为四个等级，每一级都代表着更深的理解与更强的技术能力。你会在哪个阶段加入？又会如何进阶？\u003C/p>\n\u003Ch3 id=\"-初级魔法师beginner-magician\">🔹 \u003Cstrong>初级魔法师（Beginner Magician）\u003C/strong>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>适合初学者，理解 MoFA 基础架构，完成简单代理任务\u003C/strong>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>任务示例：\n\u003Cul>\n\u003Cli>\u003Cstrong>问候代理\u003C/strong>：开发一个简单的 MoFA Agent，让它自动翻译用户的输入为英文。\u003C/li>\n\u003Cli>\u003Cstrong>天气查询代理\u003C/strong>：输入城市名称，返回该城市的天气情况。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch3 id=\"-中级魔法师intermediate-magician\">🔹 \u003Cstrong>中级魔法师（Intermediate Magician）\u003C/strong>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>掌握 MoFA 组件，构建较复杂的智能系统\u003C/strong>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>任务示例：\n\u003Cul>\n\u003Cli>\u003Cstrong>视频总结系统\u003C/strong>：创建一个 AI Agent，能自动总结 20 分钟内的视频核心内容。\u003C/li>\n\u003Cli>\u003Cstrong>智能客服系统\u003C/strong>：搭建一个多代理协作的客服系统，包括问题分类、自动回复、情感分析、人工客服转接等功能。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch3 id=\"-高级魔法师advanced-magician\">🔹 \u003Cstrong>高级魔法师（Advanced Magician）\u003C/strong>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>深入 智能体架构，整合外部数据源，打造高复杂度项目\u003C/strong>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>任务示例：\n\u003Cul>\n\u003Cli>\u003Cstrong>社交媒体分析系统\u003C/strong>：抓取社交平台内容，分析情感趋势、热点话题，并提供可视化数据。\u003C/li>\n\u003Cli>\u003Cstrong>知识图谱生成查询系统\u003C/strong>：从书籍或文本中提取实体、关系，构建可查询的知识图谱，并支持自然语言查询。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch3 id=\"-创新型魔法师visionary-magician\">🔹 \u003Cstrong>创新型魔法师（Visionary Magician）\u003C/strong>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>不仅是开发者，更是 MoFA 生态的设计者\u003C/strong>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>提出有价值的 MoFA 项目建议和改进方案，比如：\n\u003Cul>\n\u003Cli>让 MoFA 成为世界级的开源 AI Agent 框架，如何优化开发体验？\u003C/li>\n\u003Cli>如何构建 MoFA 的插件生态，扩展其应用场景？\u003C/li>\n\u003Cli>提供更高效的 智能体训练方法，提高模型性能。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cp>我么们也寻找一类魔法师加入我们：\u003C/p>\n\u003Ch3 id=\"-大本营魔法师basecamp-magician\">🔹 \u003Cstrong>大本营魔法师（BaseCamp Magician）\u003C/strong>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>专注于 MoFA 代码仓建设，优化开发者体验\u003C/strong>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>任务示例：\n\u003Cul>\n\u003Cli>\u003Cstrong>MoFA 安装优化\u003C/strong>：改进安装流程，让新开发者更快上手。\u003C/li>\n\u003Cli>\u003Cstrong>脚手架工具\u003C/strong>：设计 MoFA Agent 的代码模板，减少重复工作，提高开发效率。\u003C/li>\n\u003Cli>\u003Cstrong>CI/CD 流程\u003C/strong>：提升 MoFA 的持续集成和自动化部署能力。\u003C/li>\n\u003Cli>\u003Cstrong>单元测试（Unit Testing）\u003C/strong>：为 MoFA 关键功能编写测试，提高代码可靠性。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"你准备好成为魔法师了吗\">\u003Cstrong>你准备好成为魔法师了吗？\u003C/strong>\u003C/h2>\n\u003Cp>MoFA 不仅是一个 智能体框架，更是一个充满创造力和挑战的开发者社区。无论你是 AI 新手还是资深工程师，都可以找到适合自己的任务，挑战自我，贡献开源，一起把 MoFA 打造成世界级的 AI Agent 生态！\u003C/p>\n\u003Cp>\u003Cstrong>💡 立即加入 MoFA，成为 MoFA 魔法师，施展你的智能体魔法！获取赏金\u003C/strong>\u003C/p>\n\u003Cp>请联系 @阿图教育微信号 rustedu\n\u003Cimg src=\"https://relevantstudy.github.io/images/a-tu-bar-code.jpg\" alt=\"barcode\">\u003C/p>\n\u003Ch2 id=\"\">\u003C/h2>",{"headings":502,"localImagePaths":526,"remoteImagePaths":527,"frontmatter":528,"imagePaths":531},[503,506,509,512,515,518,521,524],{"depth":29,"slug":504,"text":505},"mofa-魔法师成长之路","MoFA 魔法师成长之路",{"depth":33,"slug":507,"text":508},"-初级魔法师beginner-magician","🔹 初级魔法师（Beginner Magician）",{"depth":33,"slug":510,"text":511},"-中级魔法师intermediate-magician","🔹 中级魔法师（Intermediate Magician）",{"depth":33,"slug":513,"text":514},"-高级魔法师advanced-magician","🔹 高级魔法师（Advanced Magician）",{"depth":33,"slug":516,"text":517},"-创新型魔法师visionary-magician","🔹 创新型魔法师（Visionary Magician）",{"depth":33,"slug":519,"text":520},"-大本营魔法师basecamp-magician","🔹 大本营魔法师（BaseCamp Magician）",{"depth":29,"slug":522,"text":523},"你准备好成为魔法师了吗","你准备好成为魔法师了吗？",{"depth":29,"slug":525,"text":525},"",[],[],{"title":488,"description":489,"date":529,"author":255,"tags":530},["Date","2025-02-12T00:00:00.000Z"],[230,492,493,494,495],[],"types-of-magicians.md","the-design-of-mofa-wizards-hut",{"id":533,"data":535,"body":542,"filePath":543,"digest":544,"rendered":545,"legacyId":571},{"title":536,"description":537,"date":538,"author":128,"tags":539},"魔法师的网上家园：MOFA Wizard's HUT的设计","mofa.ai是魔法师的网上家园。mofa.ai为每一位魔法师提供专属网页，“魔法师小屋”（mofa wizard's hut)。本文阐述了魔法师小屋设计的基础理念。",["Date","2025-09-23T00:00:00.000Z"],[230,231,540,232,541],"mofa.ai","mofa development","## **Position Statement**\n\nmofa.ai是魔法师的网上家园。mofa.ai为每一位魔法师提供专属网页，“魔法师小屋”（mofa wizard's hut)。\n\n## **谁是魔法师**\n\n成为魔法师有两个条件：\n\n1. \n\n- 是mofa的开发者，或\n- 是mofa应用的开发者，或\n- 赏金魔法师项目的开发者，或\n- 是mofa系列黑客松的完赛者或优胜者，或\n- 使用mofa完成任务的开发者，或\n- 对mofa做出各种贡献（不限于开发）的朋友。\n\n2. 在GitHub上为mofa项目点星“🌟”，认同和支持mofa项目。\n\n每一个魔法师在mofa.ai都有他或她的专属网页（Wizard's Hut)。\n\n\n\n## **魔法师id**\n\n因为魔法师都是开发者，我们用魔法师的github id来作为魔法师id，即为魔法师小屋的“门牌号码”。\n\n\n\n## **概念设计**\n\n根本上，Magic House里的内容将与魔法师和mofa有直接关联。这部分要表达：\n\n- mofa.ai 感恩每个魔法师对mofa.ai的贡献\n- mofa.ai希望魔法师对mofa.ai的贡献成为魔法师的“军功章”被世人所认知，背书魔法师，助力魔法师的成长。\n\n### **魔法师信息Hub**\n\n魔法师可以在Magic House里提供他各种社媒连接和联络信息。mofa.ai不重复提供各种社媒已经提供的信息。这些信息由魔法师自行提供。信息由魔法师自主维护。mofa.ai不负责信息的真实性、准确性。\n\n### **魔法师的mofa履历**\n\n包括\n\n- github上对mofa的贡献\n- 赏金猎人项目完成\n- 黑客松优胜，\n- 用mofa完成其他任务获得成绩\n- mofa 相关 repo\n- 对mofa的贡献\n\n不包括\n\n- 与mofa无直接关联的任何履历信息。mofa.ai并不具备背书其他信息的权威资质。\n\n魔法师mofa.ai相关履历信息由项目核心开发小组维护。\n\n## **成为魔法师**\n\n使用[mofa](https://mofa.ai)，开发[mofa](https://github.com/mofa-org/mofa)，支持[mofa.ai](https://mofa.ai)。联络我们，成为魔法师！","src/content/blog/the-design-of-mofa-wizards-hut.md","0b35521f579bf1dc",{"html":546,"metadata":547},"\u003Ch2 id=\"position-statement\">\u003Cstrong>Position Statement\u003C/strong>\u003C/h2>\n\u003Cp>mofa.ai是魔法师的网上家园。mofa.ai为每一位魔法师提供专属网页，“魔法师小屋”（mofa wizard’s hut)。\u003C/p>\n\u003Ch2 id=\"谁是魔法师\">\u003Cstrong>谁是魔法师\u003C/strong>\u003C/h2>\n\u003Cp>成为魔法师有两个条件：\u003C/p>\n\u003Col>\n\u003Cli>\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>是mofa的开发者，或\u003C/li>\n\u003Cli>是mofa应用的开发者，或\u003C/li>\n\u003Cli>赏金魔法师项目的开发者，或\u003C/li>\n\u003Cli>是mofa系列黑客松的完赛者或优胜者，或\u003C/li>\n\u003Cli>使用mofa完成任务的开发者，或\u003C/li>\n\u003Cli>对mofa做出各种贡献（不限于开发）的朋友。\u003C/li>\n\u003C/ul>\n\u003Col start=\"2\">\n\u003Cli>在GitHub上为mofa项目点星“🌟”，认同和支持mofa项目。\u003C/li>\n\u003C/ol>\n\u003Cp>每一个魔法师在mofa.ai都有他或她的专属网页（Wizard’s Hut)。\u003C/p>\n\u003Ch2 id=\"魔法师id\">\u003Cstrong>魔法师id\u003C/strong>\u003C/h2>\n\u003Cp>因为魔法师都是开发者，我们用魔法师的github id来作为魔法师id，即为魔法师小屋的“门牌号码”。\u003C/p>\n\u003Ch2 id=\"概念设计\">\u003Cstrong>概念设计\u003C/strong>\u003C/h2>\n\u003Cp>根本上，Magic House里的内容将与魔法师和mofa有直接关联。这部分要表达：\u003C/p>\n\u003Cul>\n\u003Cli>mofa.ai 感恩每个魔法师对mofa.ai的贡献\u003C/li>\n\u003Cli>mofa.ai希望魔法师对mofa.ai的贡献成为魔法师的“军功章”被世人所认知，背书魔法师，助力魔法师的成长。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"魔法师信息hub\">\u003Cstrong>魔法师信息Hub\u003C/strong>\u003C/h3>\n\u003Cp>魔法师可以在Magic House里提供他各种社媒连接和联络信息。mofa.ai不重复提供各种社媒已经提供的信息。这些信息由魔法师自行提供。信息由魔法师自主维护。mofa.ai不负责信息的真实性、准确性。\u003C/p>\n\u003Ch3 id=\"魔法师的mofa履历\">\u003Cstrong>魔法师的mofa履历\u003C/strong>\u003C/h3>\n\u003Cp>包括\u003C/p>\n\u003Cul>\n\u003Cli>github上对mofa的贡献\u003C/li>\n\u003Cli>赏金猎人项目完成\u003C/li>\n\u003Cli>黑客松优胜，\u003C/li>\n\u003Cli>用mofa完成其他任务获得成绩\u003C/li>\n\u003Cli>mofa 相关 repo\u003C/li>\n\u003Cli>对mofa的贡献\u003C/li>\n\u003C/ul>\n\u003Cp>不包括\u003C/p>\n\u003Cul>\n\u003Cli>与mofa无直接关联的任何履历信息。mofa.ai并不具备背书其他信息的权威资质。\u003C/li>\n\u003C/ul>\n\u003Cp>魔法师mofa.ai相关履历信息由项目核心开发小组维护。\u003C/p>\n\u003Ch2 id=\"成为魔法师\">\u003Cstrong>成为魔法师\u003C/strong>\u003C/h2>\n\u003Cp>使用\u003Ca href=\"https://mofa.ai\">mofa\u003C/a>，开发\u003Ca href=\"https://github.com/mofa-org/mofa\">mofa\u003C/a>，支持\u003Ca href=\"https://mofa.ai\">mofa.ai\u003C/a>。联络我们，成为魔法师！\u003C/p>",{"headings":548,"localImagePaths":565,"remoteImagePaths":566,"frontmatter":567,"imagePaths":570},[549,552,554,556,558,561,563],{"depth":29,"slug":550,"text":551},"position-statement","Position Statement",{"depth":29,"slug":553,"text":553},"谁是魔法师",{"depth":29,"slug":555,"text":555},"魔法师id",{"depth":29,"slug":557,"text":557},"概念设计",{"depth":33,"slug":559,"text":560},"魔法师信息hub","魔法师信息Hub",{"depth":33,"slug":562,"text":562},"魔法师的mofa履历",{"depth":29,"slug":564,"text":564},"成为魔法师",[],[],{"title":536,"description":537,"date":568,"author":128,"tags":569},["Date","2025-09-23T00:00:00.000Z"],[230,231,540,232,541],[],"the-design-of-mofa-wizards-hut.md","docs",["Map",574,575,606,607,641,642,664,665,702,703,770,771,805,806],"1-concepts/designpatterns",{"id":574,"data":576,"body":579,"filePath":580,"digest":581,"rendered":582,"legacyId":605},{"title":577,"description":578,"order":29},"MoFA Agent Design Patterns","Understanding various design patterns used in MoFA agents","MoFA provides various design patterns that help developers build sophisticated agents with different capabilities and behaviors.\n\n## Core Design Patterns\n\n### 1. Reasoner Pattern\nThe simplest pattern for building agents that can reason and respond to queries.\n\n### 2. Self-Refine Pattern\nAgents that can review and improve their own outputs through iterative refinement.\n\n### 3. CrewAI Pattern\nMulti-agent collaboration pattern for complex task execution.\n\n## Pattern Categories\n\n- **Basic Patterns**: Single-agent designs for simple tasks\n- **Collaborative Patterns**: Multi-agent coordination\n- **Reflective Patterns**: Self-improving agents\n- **Service Patterns**: Specialized service agents\n\nThese patterns form the foundation for building more complex agent behaviors in the MoFA framework.","src/content/docs/1. concepts/DesignPatterns.md","34deeda54edf4a9a",{"html":583,"metadata":584},"\u003Cp>MoFA provides various design patterns that help developers build sophisticated agents with different capabilities and behaviors.\u003C/p>\n\u003Ch2 id=\"core-design-patterns\">Core Design Patterns\u003C/h2>\n\u003Ch3 id=\"1-reasoner-pattern\">1. Reasoner Pattern\u003C/h3>\n\u003Cp>The simplest pattern for building agents that can reason and respond to queries.\u003C/p>\n\u003Ch3 id=\"2-self-refine-pattern\">2. Self-Refine Pattern\u003C/h3>\n\u003Cp>Agents that can review and improve their own outputs through iterative refinement.\u003C/p>\n\u003Ch3 id=\"3-crewai-pattern\">3. CrewAI Pattern\u003C/h3>\n\u003Cp>Multi-agent collaboration pattern for complex task execution.\u003C/p>\n\u003Ch2 id=\"pattern-categories\">Pattern Categories\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Basic Patterns\u003C/strong>: Single-agent designs for simple tasks\u003C/li>\n\u003Cli>\u003Cstrong>Collaborative Patterns\u003C/strong>: Multi-agent coordination\u003C/li>\n\u003Cli>\u003Cstrong>Reflective Patterns\u003C/strong>: Self-improving agents\u003C/li>\n\u003Cli>\u003Cstrong>Service Patterns\u003C/strong>: Specialized service agents\u003C/li>\n\u003C/ul>\n\u003Cp>These patterns form the foundation for building more complex agent behaviors in the MoFA framework.\u003C/p>",{"headings":585,"localImagePaths":601,"remoteImagePaths":602,"frontmatter":603,"imagePaths":604},[586,589,592,595,598],{"depth":29,"slug":587,"text":588},"core-design-patterns","Core Design Patterns",{"depth":33,"slug":590,"text":591},"1-reasoner-pattern","1. Reasoner Pattern",{"depth":33,"slug":593,"text":594},"2-self-refine-pattern","2. Self-Refine Pattern",{"depth":33,"slug":596,"text":597},"3-crewai-pattern","3. CrewAI Pattern",{"depth":29,"slug":599,"text":600},"pattern-categories","Pattern Categories",[],[],{"title":577,"description":578,"order":29},[],"1. concepts/DesignPatterns.md","1-concepts/agents",{"id":606,"data":608,"body":611,"filePath":612,"digest":613,"rendered":614,"legacyId":640},{"title":609,"description":610,"order":26},"MoFA智能体模版","Understanding MoFA agent concepts, design patterns, and composition","构建智能体有一定的设计模式（Design Pattern），MoFA提供一系列的设计模式的实现，供开发者作为模版使用。\n\n\n## MoFA组合智能体\n\n基于Dora-RS框架构建的MoFA智能体，实质上就是Dora-RS Dataflow。两个智能体之间可以通过数据连接进行组合，从而形成组合智能体。\n\n在上述的self_refine Agent模版和下面将要介绍的服务智能体和案例，都是MoFA组合智能体。\n\n## MoFA服务智能体\n\n智能体往往需要需要一些服务，包括检索增强生成，记忆，使用外部工具和任务规划和分解等。MoFA认为：Everything Agent。我们以MoFA智能体的方式提供RAG智能体，记忆智能体，规划智能体和行动智能体。开发者可以使用这些已经实现的服务智能体，与自己的智能体相连接组合从而获得相应的服务。MoFA也可以集成第三方的服务智能体，供开发者按照不同的需求使用。\n\n- rag\n- memory\n- action\n- planning\n\n## Nesting Design Patterns of AI Agents\n\nAI agents are intelligent software applications with various design patterns:\n\n- **LLM Inference**: Using large language models for basic inference\n- **Customized Prompt**: Tailoring system prompts for specific agents\n- **Reflection Pattern**: Agents capable of self-review and improvement\n- **Actor Pattern**: Agents with external tool and resource capabilities\n- **ReAct Pattern**: Combining reflection and tool usage\n- **Multi-Agent Collaboration**: Specialized agents working together\n\n## Agent Kernel Services\n\nMoFA provides core services to agents, including:\n- Memory management\n- Task planning\n- Knowledge base integration\n- RAG (Retrieval-Augmented Generation)\n- Action capabilities\n\n## Composition-Based Architecture\n\nComposition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.\n\n## Dataflow-Driven Approach\n\nMoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.","src/content/docs/1. concepts/agents.md","92bfbb348466dd8c",{"html":615,"metadata":616},"\u003Cp>构建智能体有一定的设计模式（Design Pattern），MoFA提供一系列的设计模式的实现，供开发者作为模版使用。\u003C/p>\n\u003Ch2 id=\"mofa组合智能体\">MoFA组合智能体\u003C/h2>\n\u003Cp>基于Dora-RS框架构建的MoFA智能体，实质上就是Dora-RS Dataflow。两个智能体之间可以通过数据连接进行组合，从而形成组合智能体。\u003C/p>\n\u003Cp>在上述的self_refine Agent模版和下面将要介绍的服务智能体和案例，都是MoFA组合智能体。\u003C/p>\n\u003Ch2 id=\"mofa服务智能体\">MoFA服务智能体\u003C/h2>\n\u003Cp>智能体往往需要需要一些服务，包括检索增强生成，记忆，使用外部工具和任务规划和分解等。MoFA认为：Everything Agent。我们以MoFA智能体的方式提供RAG智能体，记忆智能体，规划智能体和行动智能体。开发者可以使用这些已经实现的服务智能体，与自己的智能体相连接组合从而获得相应的服务。MoFA也可以集成第三方的服务智能体，供开发者按照不同的需求使用。\u003C/p>\n\u003Cul>\n\u003Cli>rag\u003C/li>\n\u003Cli>memory\u003C/li>\n\u003Cli>action\u003C/li>\n\u003Cli>planning\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"nesting-design-patterns-of-ai-agents\">Nesting Design Patterns of AI Agents\u003C/h2>\n\u003Cp>AI agents are intelligent software applications with various design patterns:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>LLM Inference\u003C/strong>: Using large language models for basic inference\u003C/li>\n\u003Cli>\u003Cstrong>Customized Prompt\u003C/strong>: Tailoring system prompts for specific agents\u003C/li>\n\u003Cli>\u003Cstrong>Reflection Pattern\u003C/strong>: Agents capable of self-review and improvement\u003C/li>\n\u003Cli>\u003Cstrong>Actor Pattern\u003C/strong>: Agents with external tool and resource capabilities\u003C/li>\n\u003Cli>\u003Cstrong>ReAct Pattern\u003C/strong>: Combining reflection and tool usage\u003C/li>\n\u003Cli>\u003Cstrong>Multi-Agent Collaboration\u003C/strong>: Specialized agents working together\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"agent-kernel-services\">Agent Kernel Services\u003C/h2>\n\u003Cp>MoFA provides core services to agents, including:\u003C/p>\n\u003Cul>\n\u003Cli>Memory management\u003C/li>\n\u003Cli>Task planning\u003C/li>\n\u003Cli>Knowledge base integration\u003C/li>\n\u003Cli>RAG (Retrieval-Augmented Generation)\u003C/li>\n\u003Cli>Action capabilities\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"composition-based-architecture\">Composition-Based Architecture\u003C/h2>\n\u003Cp>Composition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.\u003C/p>\n\u003Ch2 id=\"dataflow-driven-approach\">Dataflow-Driven Approach\u003C/h2>\n\u003Cp>MoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.\u003C/p>",{"headings":617,"localImagePaths":636,"remoteImagePaths":637,"frontmatter":638,"imagePaths":639},[618,621,624,627,630,633],{"depth":29,"slug":619,"text":620},"mofa组合智能体","MoFA组合智能体",{"depth":29,"slug":622,"text":623},"mofa服务智能体","MoFA服务智能体",{"depth":29,"slug":625,"text":626},"nesting-design-patterns-of-ai-agents","Nesting Design Patterns of AI Agents",{"depth":29,"slug":628,"text":629},"agent-kernel-services","Agent Kernel Services",{"depth":29,"slug":631,"text":632},"composition-based-architecture","Composition-Based Architecture",{"depth":29,"slug":634,"text":635},"dataflow-driven-approach","Dataflow-Driven Approach",[],[],{"title":609,"description":610,"order":26},[],"1. concepts/agents.md","0overview",{"id":641,"data":643,"body":646,"filePath":647,"digest":648,"rendered":649,"legacyId":663},{"title":644,"description":645,"order":149},"MoFA 概述","MoFA 是一个通过基于组合的方法构建 AI 智能体的软件框架","MoFA 是一个通过基于组合的方法构建 AI 智能体的软件框架\n\n\n## MoFA设计理念\n\nMoFA是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent)。\n\nMoFA 独特的设计类理念是：\n\n- **平凡人做非凡事**：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。\n- **Composition AI**：受 Unix 哲学启发，MoFA 以“组合”作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。\n- **Everything Agent**：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。\n- **Data Flow**：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用，\n\n## MoFA 技术架构图\n\u003Cp align=\"center\">\n  \u003Cimg src=\"/images/Organizational_Chart_cn.png\" width=\"80%\">\n\u003C/p>","src/content/docs/0.overview.md","6141e4b2c6454d74",{"html":650,"metadata":651},"\u003Cp>MoFA 是一个通过基于组合的方法构建 AI 智能体的软件框架\u003C/p>\n\u003Ch2 id=\"mofa设计理念\">MoFA设计理念\u003C/h2>\n\u003Cp>MoFA是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent)。\u003C/p>\n\u003Cp>MoFA 独特的设计类理念是：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>平凡人做非凡事\u003C/strong>：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。\u003C/li>\n\u003Cli>\u003Cstrong>Composition AI\u003C/strong>：受 Unix 哲学启发，MoFA 以“组合”作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。\u003C/li>\n\u003Cli>\u003Cstrong>Everything Agent\u003C/strong>：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。\u003C/li>\n\u003Cli>\u003Cstrong>Data Flow\u003C/strong>：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用，\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"mofa-技术架构图\">MoFA 技术架构图\u003C/h2>\n\u003Cp align=\"center\">\n  \u003Cimg src=\"/images/Organizational_Chart_cn.png\" width=\"80%\">\n\u003C/p>",{"headings":652,"localImagePaths":659,"remoteImagePaths":660,"frontmatter":661,"imagePaths":662},[653,656],{"depth":29,"slug":654,"text":655},"mofa设计理念","MoFA设计理念",{"depth":29,"slug":657,"text":658},"mofa-技术架构图","MoFA 技术架构图",[],[],{"title":644,"description":645,"order":149},[],"0.overview.md","2-getting-started/your-first-application",{"id":664,"data":666,"body":669,"filePath":670,"digest":671,"rendered":672,"legacyId":701},{"title":667,"description":668,"order":29},"6分钟开发首个MoFA智能体应用","快速构建一个基于大语言模型的MoFA智能体应用","本指南将指导你快速构建一个基于大语言模型的MoFA智能体(Agent),通过标准化流程实现从环境配置到交互测试的完整开发链路。\r\n\r\n## 0. 参考文件结构\r\n\r\n```tree\r\n.\r\n└── mofa/\r\n    ├── dataflows/                     # 数据流配置目录\r\n    │   └── qwen_agent/                # 智能体数据流目录\r\n    │       ├── logs/                  # 运行日志目录\r\n    │       ├── out/                   # 输出文件目录\r\n    │       ├── my_llm_dataflow.yml    # 数据流配置\r\n    │       └── .env.secret            # 环境变量配置\r\n    ├── node-hub/                      # 节点仓库目录\r\n    │   ├── terminal-input/            # 终端输入节点\r\n    │   │   ├── README.md\r\n    │   │   ├── pyproject.toml\r\n    │   │   ├── terminal_input/        # 核心代码\r\n    │   │   │   ├── __init__.py\r\n    │   │   │   └── main.py\r\n    │   │   └── tests/                 # 测试目录\r\n    │   │       └── test.py\r\n    │   └── qwen_agent/                # Qwen智能体节点\r\n    │       ├── README.md\r\n    │       ├── pyproject.toml\r\n    │       ├── qwen_agent/            # 核心代码\r\n    │       │   ├── __init__.py\r\n    │       │   ├── configs/           # 配置目录\r\n    │       │   │   └── agent.yml\r\n    │       │   └── main.py            # 逻辑入口\r\n    │       └── tests/                 # 测试目录\r\n    │            └── test_main.py\r\n    └── README.md                      # 框架说明文档\r\n```\r\n## 1. 环境变量配置（1分钟）\r\n\r\n在示例目录中创建环境变量文件 `.env.secret`\r\n（需与数据流配置文件 `dataflow.yml` 同级，本示例路径为 `mofa/dataflows/qwen_agent`）\r\n\r\n向 `.env.secret` 写入以下配置，替换 `LLM_API_KEY`、`LLM_API_BASE` 和 `LLM_MODEL` 为实际模型参数：\r\n```plaintext\r\n# Qwen API 密钥\r\nLLM_API_KEY=your_api_key_here\r\n# Qwen 模型标识符（如 qwen-turbo、qwen-plus 等，根据服务端支持配置）\r\nLLM_MODEL=qwen-turbo\r\n# API 端点基础路径\r\nLLM_API_BASE=https://dashscope.aliyuncs.com/compatible-mode/v1\r\n```\r\n## 2. 初始化智能体项目（1分钟）\r\n\r\n使用MoFA CLI快速创建智能体项目骨架：\r\n```bash\r\n# 在 node-hub 目录下执行（本示例路径为 mofa/node-hub）\r\nmofa new-agent qwen_agent\r\ncd qwen_agent\r\n```\r\n\r\n生成的项目结构遵循MoFA规范，包含核心模块与配置目录：\r\n```tree\r\n.\r\n├── README.md                  # 项目说明文档\r\n├── qwen_agent                 # 核心代码目录\r\n│   ├── __init__.py            # 包标识文件\r\n│   ├── configs                # 配置文件目录\r\n│   │   └── agent.yml          # 智能体配置定义\r\n│   └── main.py                # 核心逻辑入口\r\n├── pyproject.toml             # 项目依赖与构建配置\r\n└── tests                      # 单元测试目录\r\n    └── test_main.py           # 核心功能测试用例\r\n```\r\n\r\n\r\n## 3. 配置项目元信息（1分钟）\r\n\r\n修改 `qwen_agent` 项目的 `pyproject.toml`\r\n（本示例路径为 `mofa/node-hub/qwen_agent/pyproject.toml`），配置项目元数据与依赖：\r\n\r\n```toml\r\n[tool.poetry]\r\nname = \"qwen_agent\"\r\nversion = \"0.1.0\"\r\nauthors = [\r\n    \"youremail@gmail.com\",\r\n]\r\ndescription = \"基于MoFA框架的Qwen大语言模型智能体\"\r\nlicense = \"MIT\"\r\nhomepage = \"https://github.com/your-org/qwen_agent\"\r\nreadme = \"README.md\"\r\npackages = [{ include = \"qwen_agent\" }]\r\n\r\n[tool.poetry.dependencies]\r\npython = \">=3.10,\u003C3.12\"         # 兼容Python版本范围\r\ndashscope = \"1.20.0\"            # Qwen API客户端依赖\r\npython-dotenv = \"*\"             # 环境变量加载工具\r\n\r\n[tool.poetry.scripts]\r\nqwen_agent = \"qwen_agent.main:main\"  # 定义可执行入口\r\n\r\n[build-system]\r\nrequires = [\"poetry-core>=1.8.0\"]    # 构建系统依赖\r\nbuild-backend = \"poetry.core.masonry.api\"  # 构建后端指定\r\n```\r\n\r\n\r\n## 4. 实现智能体核心逻辑（2分钟）\r\n\r\n编辑 `qwen_agent` 模块的 `main.py`\r\n（本示例路径为 `mofa/node-hub/qwen_agent/qwen_agent/main.py`），实现LLM调用与数据流交互逻辑：\r\n\r\n```python\r\nimport os\r\nfrom dotenv import load_dotenv\r\nfrom mofa.agent_build.base.base_agent import MofaAgent, run_agent\r\n\r\ndef call_qwen_directly(user_input: str) -> str:\r\n    \"\"\"调用Qwen API获取生成结果\"\"\"\r\n    from dashscope import Generation\r\n    try:\r\n        response = Generation.call(\r\n            model=os.getenv('LLM_MODEL', 'qwen-turbo'),\r\n            api_key=os.getenv('LLM_API_KEY'),\r\n            messages=[\r\n                {\"role\": \"system\", \"content\": \"You are a helpful AI assistant.\"},\r\n                {\"role\": \"user\", \"content\": user_input}\r\n            ]\r\n        )\r\n        return response.output.text\r\n    except Exception as e:\r\n        return f\"API调用失败: {str(e)}\"\r\n\r\n\r\n@run_agent\r\ndef run(agent: MofaAgent):\r\n    load_dotenv('.env.secret')\r\n    user_input = agent.receive_parameter('query')\r\n\r\n    if not user_input or str(user_input).strip() == \"\":\r\n        return\r\n\r\n    agent.write_log(f\"收到输入: {user_input}\")\r\n    agent.write_log(\"转发至Qwen模型处理...\")\r\n\r\n    llm_result = call_qwen_directly(user_input)\r\n    agent.write_log(f\"Qwen模型返回结果: {llm_result}\")\r\n\r\n    agent.send_output('llm_result', llm_result)\r\n\r\n\r\ndef main():\r\n    agent = MofaAgent(agent_name='my_llm_agent')\r\n    run(agent=agent)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n\r\n## 5. 定义数据流配置（1分钟）\r\n\r\n在 `dataflows/qwen_agent` 目录下创建 `my_llm_dataflow.yml`\r\n（与 `.env.secret` 同级，本示例路径为 `mofa/dataflows/qwen_agent/my_llm_dataflow.yml`），配置节点间数据交互关系：\r\n\r\n```yaml\r\nnodes:\r\n  - id: terminal-input                 # 终端输入节点ID\r\n    build: pip install ../../node-hub/terminal-input  # 构建命令\r\n    path: dynamic                      # 动态节点标识\r\n    outputs:\r\n      - data                           # 输出端口定义\r\n    inputs:\r\n      agent_response: qwen_agent/llm_result  # 输入映射：接收智能体输出\r\n\r\n  - id: qwen_agent                     # 智能体节点ID\r\n    build: pip install ../../node-hub/qwen_agent  # 构建命令\r\n    path: qwen_agent                   # 智能体包路径\r\n    outputs:\r\n      - llm_result                     # 输出端口定义\r\n    inputs:\r\n      query: terminal-input/data       # 输入映射：接收终端输入\r\n    env:                               # 环境变量配置\r\n      IS_DATAFLOW_END: true            # 标识为数据流终点\r\n      WRITE_LOG: true                  # 启用日志输出\r\n```\r\n\r\n\r\n## 6. 运行与测试\r\n\r\n切换至数据流配置目录（本示例路径为 `mofa/dataflows/qwen_agent`），执行启动命令：\r\n\r\n```bash\r\n# 安装依赖并启动数据流\r\nmofa run my_llm_dataflow.yml\r\n```\r\n\r\n交互测试示例：\r\n```\r\n(nodehub) root@user:~/mofa/dataflows/my_llm_agent# mofa run my_llm_dataflow.yml\r\nCleaning up existing dora processes...\r\nInstalling base requirements...\r\nStarting dataflow with name: 22738b7e7d9c4197bc8ca1e65c294578\r\nStarting terminal-input process...\r\nYou can now interact directly with the agents. Type 'exit' to quit.\r\n Send Your Task :  hi\r\n-------------llm_result---------------\r\nHello! How can I assist you today? 😊\r\n---------------------------------------\r\n Send Your Task :\r\n```","src/content/docs/2. getting-started/your-first-application.md","7dbe92c166b59626",{"html":673,"metadata":674},"\u003Cp>本指南将指导你快速构建一个基于大语言模型的MoFA智能体(Agent),通过标准化流程实现从环境配置到交互测试的完整开发链路。\u003C/p>\n\u003Ch2 id=\"0-参考文件结构\">0. 参考文件结构\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── mofa/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── dataflows/                     # 数据流配置目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   └── qwen_agent/                # 智能体数据流目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       ├── logs/                  # 运行日志目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       ├── out/                   # 输出文件目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       ├── my_llm_dataflow.yml    # 数据流配置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       └── .env.secret            # 环境变量配置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── node-hub/                      # 节点仓库目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   ├── terminal-input/            # 终端输入节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   │   ├── README.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   │   ├── pyproject.toml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   │   ├── terminal_input/        # 核心代码\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   │   │   ├── __init__.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   │   │   └── main.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   │   └── tests/                 # 测试目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   │       └── test.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │   └── qwen_agent/                # Qwen智能体节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       ├── README.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       ├── pyproject.toml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       ├── qwen_agent/            # 核心代码\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       │   ├── __init__.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       │   ├── configs/           # 配置目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       │   │   └── agent.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       │   └── main.py            # 逻辑入口\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │       └── tests/                 # 测试目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    │            └── test_main.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    └── README.md                      # 框架说明文档\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"1-环境变量配置1分钟\">1. 环境变量配置（1分钟）\u003C/h2>\n\u003Cp>在示例目录中创建环境变量文件 \u003Ccode>.env.secret\u003C/code>\r\n（需与数据流配置文件 \u003Ccode>dataflow.yml\u003C/code> 同级，本示例路径为 \u003Ccode>mofa/dataflows/qwen_agent\u003C/code>）\u003C/p>\n\u003Cp>向 \u003Ccode>.env.secret\u003C/code> 写入以下配置，替换 \u003Ccode>LLM_API_KEY\u003C/code>、\u003Ccode>LLM_API_BASE\u003C/code> 和 \u003Ccode>LLM_MODEL\u003C/code> 为实际模型参数：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># Qwen API 密钥\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>LLM_API_KEY=your_api_key_here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># Qwen 模型标识符（如 qwen-turbo、qwen-plus 等，根据服务端支持配置）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>LLM_MODEL=qwen-turbo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># API 端点基础路径\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>LLM_API_BASE=https://dashscope.aliyuncs.com/compatible-mode/v1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-初始化智能体项目1分钟\">2. 初始化智能体项目（1分钟）\u003C/h2>\n\u003Cp>使用MoFA CLI快速创建智能体项目骨架：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 在 node-hub 目录下执行（本示例路径为 mofa/node-hub）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mofa\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> new-agent\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> qwen_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> qwen_agent\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>生成的项目结构遵循MoFA规范，包含核心模块与配置目录：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── README.md                  # 项目说明文档\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── qwen_agent                 # 核心代码目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── __init__.py            # 包标识文件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── configs                # 配置文件目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   └── agent.yml          # 智能体配置定义\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── main.py                # 核心逻辑入口\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── pyproject.toml             # 项目依赖与构建配置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── tests                      # 单元测试目录\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    └── test_main.py           # 核心功能测试用例\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"3-配置项目元信息1分钟\">3. 配置项目元信息（1分钟）\u003C/h2>\n\u003Cp>修改 \u003Ccode>qwen_agent\u003C/code> 项目的 \u003Ccode>pyproject.toml\u003C/code>\r\n（本示例路径为 \u003Ccode>mofa/node-hub/qwen_agent/pyproject.toml\u003C/code>），配置项目元数据与依赖：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"toml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">tool\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">name = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"qwen_agent\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">version = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0.1.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">authors = [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"youremail@gmail.com\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">description = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"基于MoFA框架的Qwen大语言模型智能体\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">license = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"MIT\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">homepage = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://github.com/your-org/qwen_agent\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">readme = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"README.md\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">packages = [{ include = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"qwen_agent\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">tool\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">dependencies\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">python = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\">=3.10,&#x3C;3.12\"\u003C/span>\u003Cspan style=\"color:#6A737D\">         # 兼容Python版本范围\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">dashscope = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1.20.0\"\u003C/span>\u003Cspan style=\"color:#6A737D\">            # Qwen API客户端依赖\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">python-dotenv = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"*\"\u003C/span>\u003Cspan style=\"color:#6A737D\">             # 环境变量加载工具\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">tool\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">scripts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">qwen_agent = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"qwen_agent.main:main\"\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 定义可执行入口\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">build-system\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">requires = [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"poetry-core>=1.8.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]    \u003C/span>\u003Cspan style=\"color:#6A737D\"># 构建系统依赖\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">build-backend = \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"poetry.core.masonry.api\"\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 构建后端指定\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"4-实现智能体核心逻辑2分钟\">4. 实现智能体核心逻辑（2分钟）\u003C/h2>\n\u003Cp>编辑 \u003Ccode>qwen_agent\u003C/code> 模块的 \u003Ccode>main.py\u003C/code>\r\n（本示例路径为 \u003Ccode>mofa/node-hub/qwen_agent/qwen_agent/main.py\u003C/code>），实现LLM调用与数据流交互逻辑：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> os\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dotenv \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> load_dotenv\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MofaAgent, run_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> call_qwen_directly\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user_input: \u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) -> \u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"调用Qwen API获取生成结果\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dashscope \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Generation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Generation.call(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            model\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">os.getenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'LLM_MODEL'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'qwen-turbo'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            api_key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">os.getenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'LLM_API_KEY'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            messages\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"role\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"system\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"content\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"You are a helpful AI assistant.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                {\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"role\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"user\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"content\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: user_input}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response.output.text\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    except\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Exception\u003C/span>\u003Cspan style=\"color:#F97583\"> as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"API调用失败: \u003C/span>\u003Cspan style=\"color:#79B8FF\">{str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e)\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@run_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(agent: MofaAgent):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    load_dotenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'.env.secret'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> agent.receive_parameter(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'query'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#F97583\"> not\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user_input \u003C/span>\u003Cspan style=\"color:#F97583\">or\u003C/span>\u003Cspan style=\"color:#79B8FF\"> str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user_input).strip() \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    agent.write_log(\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"收到输入: \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">user_input\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    agent.write_log(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"转发至Qwen模型处理...\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    llm_result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> call_qwen_directly(user_input)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    agent.write_log(\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Qwen模型返回结果: \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">llm_result\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    agent.send_output(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'llm_result'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, llm_result)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">():\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    agent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MofaAgent(\u003C/span>\u003Cspan style=\"color:#FFAB70\">agent_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'my_llm_agent'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    run(\u003C/span>\u003Cspan style=\"color:#FFAB70\">agent\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">agent)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#79B8FF\"> __name__\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"__main__\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    main()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"5-定义数据流配置1分钟\">5. 定义数据流配置（1分钟）\u003C/h2>\n\u003Cp>在 \u003Ccode>dataflows/qwen_agent\u003C/code> 目录下创建 \u003Ccode>my_llm_dataflow.yml\u003C/code>\r\n（与 \u003Ccode>.env.secret\u003C/code> 同级，本示例路径为 \u003Ccode>mofa/dataflows/qwen_agent/my_llm_dataflow.yml\u003C/code>），配置节点间数据交互关系：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">nodes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">terminal-input\u003C/span>\u003Cspan style=\"color:#6A737D\">                 # 终端输入节点ID\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">pip install ../../node-hub/terminal-input\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 构建命令\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">dynamic\u003C/span>\u003Cspan style=\"color:#6A737D\">                      # 动态节点标识\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    outputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">data\u003C/span>\u003Cspan style=\"color:#6A737D\">                           # 输出端口定义\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    inputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      agent_response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">qwen_agent/llm_result\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 输入映射：接收智能体输出\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">qwen_agent\u003C/span>\u003Cspan style=\"color:#6A737D\">                     # 智能体节点ID\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">pip install ../../node-hub/qwen_agent\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 构建命令\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">qwen_agent\u003C/span>\u003Cspan style=\"color:#6A737D\">                   # 智能体包路径\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    outputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">llm_result\u003C/span>\u003Cspan style=\"color:#6A737D\">                     # 输出端口定义\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    inputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      query\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">terminal-input/data\u003C/span>\u003Cspan style=\"color:#6A737D\">       # 输入映射：接收终端输入\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    env\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:                               \u003C/span>\u003Cspan style=\"color:#6A737D\"># 环境变量配置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      IS_DATAFLOW_END\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#6A737D\">            # 标识为数据流终点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      WRITE_LOG\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#6A737D\">                  # 启用日志输出\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"6-运行与测试\">6. 运行与测试\u003C/h2>\n\u003Cp>切换至数据流配置目录（本示例路径为 \u003Ccode>mofa/dataflows/qwen_agent\u003C/code>），执行启动命令：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装依赖并启动数据流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mofa\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my_llm_dataflow.yml\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>交互测试示例：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>(nodehub) root@user:~/mofa/dataflows/my_llm_agent# mofa run my_llm_dataflow.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Cleaning up existing dora processes...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Installing base requirements...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Starting dataflow with name: 22738b7e7d9c4197bc8ca1e65c294578\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Starting terminal-input process...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>You can now interact directly with the agents. Type 'exit' to quit.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> Send Your Task :  hi\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-------------llm_result---------------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Hello! How can I assist you today? 😊\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>---------------------------------------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> Send Your Task :\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":675,"localImagePaths":697,"remoteImagePaths":698,"frontmatter":699,"imagePaths":700},[676,679,682,685,688,691,694],{"depth":29,"slug":677,"text":678},"0-参考文件结构","0. 参考文件结构",{"depth":29,"slug":680,"text":681},"1-环境变量配置1分钟","1. 环境变量配置（1分钟）",{"depth":29,"slug":683,"text":684},"2-初始化智能体项目1分钟","2. 初始化智能体项目（1分钟）",{"depth":29,"slug":686,"text":687},"3-配置项目元信息1分钟","3. 配置项目元信息（1分钟）",{"depth":29,"slug":689,"text":690},"4-实现智能体核心逻辑2分钟","4. 实现智能体核心逻辑（2分钟）",{"depth":29,"slug":692,"text":693},"5-定义数据流配置1分钟","5. 定义数据流配置（1分钟）",{"depth":29,"slug":695,"text":696},"6-运行与测试","6. 运行与测试",[],[],{"title":667,"description":668,"order":29},[],"2. getting-started/your-first-application.md","3-examples/hello-world-dora",{"id":702,"data":704,"body":707,"filePath":708,"digest":709,"rendered":710,"legacyId":769},{"title":705,"description":706,"order":29},"Hello World Based on Dora","Building a Hello World agent using Dora-RS framework","## Step 1: Install the Development and Runtime Environment\n\n\n## Step 2: Obtain the Intelligent Agent Template\n\n1. Go to the [MoFA Agent Hub](https://github.com/mofa-org/mofa/tree/main/agent-hub).\n2. Select a template like [Hello World](https://github.com/mofa-org/mofa/tree/main/agent-hub/hello-world).\n3. Copy the template to your development directory.\n4. Review the template description in the repository.\n\n## Step 3: Configuration File Setup\n\n### Configuration File Overview\n\nCreate or edit the `reasoner_agent.yml` file:\n\n```yaml\nAGENT:\n  ROLE: Knowledgeable Assistant\n  BACKSTORY: \u003CYour background description>\n  TASK: null  # Specific task\n\nRAG:\n  RAG_ENABLE: false\n  MODULE_PATH: null\n  RAG_MODEL_NAME: text-embedding-3-small\n  COLLECTION_NAME: mofa\n  IS_UPLOAD_FILE: true\n  CHROMA_PATH: ./data/output/chroma_store\n  FILES_PATH:\n    - ./data/output/arxiv_papers\n  ENCODING: utf-8\n  CHUNK_SIZE: 256\n  RAG_SEARCH_NUM: 2\n\nWEB:\n  WEB_ENABLE: false\n  SERPER_API_KEY: \u003CYour Serper API key>\n  SEARCH_NUM: 20\n  SEARCH_ENGINE_TIMEOUT: 5\n\nMODEL:\n  MODEL_API_KEY: \u003CYour model API key>\n  MODEL_NAME: gpt-4o-mini\n  MODEL_MAX_TOKENS: 2048\n\nENV:\n  PROXY_URL: null\n  AGENT_TYPE: reasoner\n\nLOG:\n  LOG_PATH: ./data/output/log/log.md\n  LOG_TYPE: markdown\n  LOG_STEP_NAME: reasoner_result\n  CHECK_LOG_PROMPT: true\n```\n\n### Configuration Details\n\n#### 1. AGENT Module\n\n- **ROLE**: Name of the assistant role.\n- **BACKSTORY**: Background description of the assistant.\n- **TASK**: Specific task (default is `null`).\n\n#### 2. RAG Module\n\n- **RAG_ENABLE**: Enable (`true`) or disable (`false`) RAG.\n- **Other Parameters**: Configure knowledge retrieval enhancement features.\n\n#### 3. WEB Module\n\n- **WEB_ENABLE**: Enable (`true`) or disable (`false`) web search.\n- **SERPER_API_KEY**: Serper search API key.\n\n#### 4. MODEL Module\n\n- **MODEL_API_KEY**: API key for the model service.\n- **MODEL_NAME**: Model name to use (e.g., `gpt-4o-mini`).\n- **MODEL_MAX_TOKENS**: Maximum number of tokens the model can generate.\n\n#### 5. ENV Module\n\n- **PROXY_URL**: Proxy server URL (set to `null` if no proxy is needed).\n- **AGENT_TYPE**: Agent type, e.g., `reasoner`.\n\n#### 6. LOG Module\n\n- **LOG_PATH**: Path to the log file.\n- **LOG_TYPE**: Log format (e.g., `markdown`).\n- **LOG_STEP_NAME**: Log step name.\n- **CHECK_LOG_PROMPT**: Enable log prompt checking (`true` or `false`).\n\n## Step 4: Configure Dora Operator\n\nCreate a `reasoner_agent.py` script:\n\n```python\nimport os\nfrom dora import DoraStatus\nimport pyarrow as pa\nfrom mofa.kernel.utils.util import load_agent_config, create_agent_output\nfrom mofa.run.run_agent import run_dspy_or_crewai_agent\nfrom mofa.utils.files.dir import get_relative_path\nfrom mofa.utils.log.agent import record_agent_result_log\n\n\nclass Operator:\n    \"\"\"\n    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.\n    \"\"\"\n\n    def on_event(self, dora_event, send_output) -> DoraStatus:\n        if dora_event.get(\"type\") == \"INPUT\":\n            agent_inputs = ['data', 'task']\n            event_id = dora_event.get(\"id\")\n\n            if event_id in agent_inputs:\n                task = dora_event[\"value\"][0].as_py()\n\n                yaml_file_path = get_relative_path(\n                    current_file=__file__,\n                    sibling_directory_name='configs',\n                    target_file_name='reasoner_agent.yml'\n                )\n\n                inputs = load_agent_config(yaml_file_path)\n                inputs[\"task\"] = task\n\n                agent_result = run_dspy_or_crewai_agent(agent_config=inputs)\n\n                log_step_name = inputs.get('log_step_name', \"Step_one\")\n                record_agent_result_log(\n                    agent_config=inputs,\n                    agent_result={f\"1, {log_step_name}\": {task: agent_result}}\n                )\n\n                output_data = create_agent_output(\n                    agent_name='keyword_results',\n                    agent_result=agent_result,\n                    dataflow_status=os.getenv('IS_DATAFLOW_END', True)\n                )\n\n                send_output(\n                    \"reasoner_result\",\n                    pa.array([output_data]),\n                    dora_event.get('metadata', {})\n                )\n\n                print('reasoner_results:', agent_result)\n\n        return DoraStatus.CONTINUE\n```\n\n## Step 5: Configure Dora Dataflow\n\nCreate or edit the `reasoner_dataflow.yml` file:\n\n```yaml\nnodes:\n\n  - id: terminal-input\n    build: pip install -e ../../../node-hub/terminal-input\n    path: dynamic\n    outputs:\n      - data\n    inputs:\n      reasoner_results: reasoner-agent/reasoner_results\n\n  - id: reasoner-agent\n    operator:\n      python: scripts/reasoner_agent.py\n      inputs:\n        task: terminal-input/data\n      outputs:\n        - reasoner_results\n```\n\n### Node Descriptions\n\n- **terminal-input**:\n  - **Function**: Handles initial input.\n  - **Action**: Installs the `terminal-input` module.\n  - **Output**: Generates `data`, passing it to `reasoner-agent`.\n  - **Input**: Receives `reasoner_results`.\n- **reasoner-agent**:\n  - **Function**: Processes tasks and generates results.\n  - **Action**: Runs the `reasoner_agent.py` script.\n  - **Input**: Receives `data` from `terminal-input` as `task`.\n  - **Output**: Generates `reasoner_results`, sending them back to `terminal-input`.\n\n## Step 6: Run Dora Dataflow\n\n### Start the Dataflow Using Dora-RS CLI\n\n1. Start the coordinator\n\n```bash\ndora up\n```\n\n2. Build the dataflow\n\n```bash\ndora build reasoner_dataflow.yml\n```\n\n3. Start the dataflow with auto-attach\n\n```bash\ndora start reasoner_dataflow.yml --attach\n```\n\n4. In another terminal, input tasks to the agent\n\n```bash\nterminal-input\n```\n\nThen type your queries to interact with the agent.\n\n## Summary\n\nThis \"Hello World\" example demonstrates:\n- How to set up a basic MoFA agent using templates\n- Configuration file structure and parameters\n- Integration with Dora-RS dataflow\n- Running and interacting with the agent\n\nThis serves as the foundation for building more complex agents and understanding the MoFA framework.","src/content/docs/3. examples/hello-world-dora.md","075db3ccbfddb17f",{"html":711,"metadata":712},"\u003Ch2 id=\"step-1-install-the-development-and-runtime-environment\">Step 1: Install the Development and Runtime Environment\u003C/h2>\n\u003Ch2 id=\"step-2-obtain-the-intelligent-agent-template\">Step 2: Obtain the Intelligent Agent Template\u003C/h2>\n\u003Col>\n\u003Cli>Go to the \u003Ca href=\"https://github.com/mofa-org/mofa/tree/main/agent-hub\">MoFA Agent Hub\u003C/a>.\u003C/li>\n\u003Cli>Select a template like \u003Ca href=\"https://github.com/mofa-org/mofa/tree/main/agent-hub/hello-world\">Hello World\u003C/a>.\u003C/li>\n\u003Cli>Copy the template to your development directory.\u003C/li>\n\u003Cli>Review the template description in the repository.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"step-3-configuration-file-setup\">Step 3: Configuration File Setup\u003C/h2>\n\u003Ch3 id=\"configuration-file-overview\">Configuration File Overview\u003C/h3>\n\u003Cp>Create or edit the \u003Ccode>reasoner_agent.yml\u003C/code> file:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">AGENT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  ROLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Knowledgeable Assistant\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  BACKSTORY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">&#x3C;Your background description>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  TASK\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#6A737D\">  # Specific task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">RAG\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  RAG_ENABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  MODULE_PATH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  RAG_MODEL_NAME\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">text-embedding-3-small\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  COLLECTION_NAME\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">mofa\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  IS_UPLOAD_FILE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  CHROMA_PATH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">./data/output/chroma_store\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  FILES_PATH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">./data/output/arxiv_papers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  ENCODING\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">utf-8\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  CHUNK_SIZE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">256\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  RAG_SEARCH_NUM\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">WEB\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  WEB_ENABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  SERPER_API_KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">&#x3C;Your Serper API key>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  SEARCH_NUM\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  SEARCH_ENGINE_TIMEOUT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">MODEL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  MODEL_API_KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">&#x3C;Your model API key>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  MODEL_NAME\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">gpt-4o-mini\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  MODEL_MAX_TOKENS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2048\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  PROXY_URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  AGENT_TYPE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">reasoner\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">LOG\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  LOG_PATH\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">./data/output/log/log.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  LOG_TYPE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">markdown\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  LOG_STEP_NAME\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">reasoner_result\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  CHECK_LOG_PROMPT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"configuration-details\">Configuration Details\u003C/h3>\n\u003Ch4 id=\"1-agent-module\">1. AGENT Module\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>ROLE\u003C/strong>: Name of the assistant role.\u003C/li>\n\u003Cli>\u003Cstrong>BACKSTORY\u003C/strong>: Background description of the assistant.\u003C/li>\n\u003Cli>\u003Cstrong>TASK\u003C/strong>: Specific task (default is \u003Ccode>null\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"2-rag-module\">2. RAG Module\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>RAG_ENABLE\u003C/strong>: Enable (\u003Ccode>true\u003C/code>) or disable (\u003Ccode>false\u003C/code>) RAG.\u003C/li>\n\u003Cli>\u003Cstrong>Other Parameters\u003C/strong>: Configure knowledge retrieval enhancement features.\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"3-web-module\">3. WEB Module\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>WEB_ENABLE\u003C/strong>: Enable (\u003Ccode>true\u003C/code>) or disable (\u003Ccode>false\u003C/code>) web search.\u003C/li>\n\u003Cli>\u003Cstrong>SERPER_API_KEY\u003C/strong>: Serper search API key.\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"4-model-module\">4. MODEL Module\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>MODEL_API_KEY\u003C/strong>: API key for the model service.\u003C/li>\n\u003Cli>\u003Cstrong>MODEL_NAME\u003C/strong>: Model name to use (e.g., \u003Ccode>gpt-4o-mini\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>MODEL_MAX_TOKENS\u003C/strong>: Maximum number of tokens the model can generate.\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"5-env-module\">5. ENV Module\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>PROXY_URL\u003C/strong>: Proxy server URL (set to \u003Ccode>null\u003C/code> if no proxy is needed).\u003C/li>\n\u003Cli>\u003Cstrong>AGENT_TYPE\u003C/strong>: Agent type, e.g., \u003Ccode>reasoner\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"6-log-module\">6. LOG Module\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>LOG_PATH\u003C/strong>: Path to the log file.\u003C/li>\n\u003Cli>\u003Cstrong>LOG_TYPE\u003C/strong>: Log format (e.g., \u003Ccode>markdown\u003C/code>).\u003C/li>\n\u003Cli>\u003Cstrong>LOG_STEP_NAME\u003C/strong>: Log step name.\u003C/li>\n\u003Cli>\u003Cstrong>CHECK_LOG_PROMPT\u003C/strong>: Enable log prompt checking (\u003Ccode>true\u003C/code> or \u003Ccode>false\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"step-4-configure-dora-operator\">Step 4: Configure Dora Operator\u003C/h2>\n\u003Cp>Create a \u003Ccode>reasoner_agent.py\u003C/code> script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> os\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dora \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> DoraStatus\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pyarrow \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pa\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mofa.kernel.utils.util \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> load_agent_config, create_agent_output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mofa.run.run_agent \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mofa.utils.files.dir \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> get_relative_path\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mofa.utils.log.agent \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> record_agent_result_log\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Operator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> on_event\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(self, dora_event, send_output) -> DoraStatus:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dora_event.get(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"type\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"INPUT\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            agent_inputs \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'data'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'task'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            event_id \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dora_event.get(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> event_id \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> agent_inputs:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                task \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dora_event[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"value\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">].as_py()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                yaml_file_path \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> get_relative_path(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    current_file\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">__file__\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    sibling_directory_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'configs'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    target_file_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'reasoner_agent.yml'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                inputs \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> load_agent_config(yaml_file_path)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                inputs[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"task\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                agent_result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent(\u003C/span>\u003Cspan style=\"color:#FFAB70\">agent_config\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">inputs)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                log_step_name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> inputs.get(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'log_step_name'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Step_one\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                record_agent_result_log(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    agent_config\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">inputs,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    agent_result\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1, \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">log_step_name\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {task: agent_result}}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                output_data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> create_agent_output(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    agent_name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'keyword_results'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    agent_result\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">agent_result,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                    dataflow_status\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">os.getenv(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'IS_DATAFLOW_END'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">True\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                send_output(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                    \"reasoner_result\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    pa.array([output_data]),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    dora_event.get(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'metadata'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'reasoner_results:'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, agent_result)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> DoraStatus.\u003C/span>\u003Cspan style=\"color:#79B8FF\">CONTINUE\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"step-5-configure-dora-dataflow\">Step 5: Configure Dora Dataflow\u003C/h2>\n\u003Cp>Create or edit the \u003Ccode>reasoner_dataflow.yml\u003C/code> file:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">nodes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">terminal-input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">pip install -e ../../../node-hub/terminal-input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">dynamic\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    outputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    inputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      reasoner_results\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">reasoner-agent/reasoner_results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">reasoner-agent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    operator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      python\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">scripts/reasoner_agent.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      inputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        task\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">terminal-input/data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      outputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">reasoner_results\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"node-descriptions\">Node Descriptions\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>terminal-input\u003C/strong>:\n\u003Cul>\n\u003Cli>\u003Cstrong>Function\u003C/strong>: Handles initial input.\u003C/li>\n\u003Cli>\u003Cstrong>Action\u003C/strong>: Installs the \u003Ccode>terminal-input\u003C/code> module.\u003C/li>\n\u003Cli>\u003Cstrong>Output\u003C/strong>: Generates \u003Ccode>data\u003C/code>, passing it to \u003Ccode>reasoner-agent\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Input\u003C/strong>: Receives \u003Ccode>reasoner_results\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>reasoner-agent\u003C/strong>:\n\u003Cul>\n\u003Cli>\u003Cstrong>Function\u003C/strong>: Processes tasks and generates results.\u003C/li>\n\u003Cli>\u003Cstrong>Action\u003C/strong>: Runs the \u003Ccode>reasoner_agent.py\u003C/code> script.\u003C/li>\n\u003Cli>\u003Cstrong>Input\u003C/strong>: Receives \u003Ccode>data\u003C/code> from \u003Ccode>terminal-input\u003C/code> as \u003Ccode>task\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Output\u003C/strong>: Generates \u003Ccode>reasoner_results\u003C/code>, sending them back to \u003Ccode>terminal-input\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"step-6-run-dora-dataflow\">Step 6: Run Dora Dataflow\u003C/h2>\n\u003Ch3 id=\"start-the-dataflow-using-dora-rs-cli\">Start the Dataflow Using Dora-RS CLI\u003C/h3>\n\u003Col>\n\u003Cli>Start the coordinator\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> up\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>Build the dataflow\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> reasoner_dataflow.yml\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"3\">\n\u003Cli>Start the dataflow with auto-attach\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> start\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> reasoner_dataflow.yml\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --attach\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"4\">\n\u003Cli>In another terminal, input tasks to the agent\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">terminal-input\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then type your queries to interact with the agent.\u003C/p>\n\u003Ch2 id=\"summary\">Summary\u003C/h2>\n\u003Cp>This “Hello World” example demonstrates:\u003C/p>\n\u003Cul>\n\u003Cli>How to set up a basic MoFA agent using templates\u003C/li>\n\u003Cli>Configuration file structure and parameters\u003C/li>\n\u003Cli>Integration with Dora-RS dataflow\u003C/li>\n\u003Cli>Running and interacting with the agent\u003C/li>\n\u003C/ul>\n\u003Cp>This serves as the foundation for building more complex agents and understanding the MoFA framework.\u003C/p>",{"headings":713,"localImagePaths":765,"remoteImagePaths":766,"frontmatter":767,"imagePaths":768},[714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762],{"depth":29,"slug":715,"text":716},"step-1-install-the-development-and-runtime-environment","Step 1: Install the Development and Runtime Environment",{"depth":29,"slug":718,"text":719},"step-2-obtain-the-intelligent-agent-template","Step 2: Obtain the Intelligent Agent Template",{"depth":29,"slug":721,"text":722},"step-3-configuration-file-setup","Step 3: Configuration File Setup",{"depth":33,"slug":724,"text":725},"configuration-file-overview","Configuration File Overview",{"depth":33,"slug":727,"text":728},"configuration-details","Configuration Details",{"depth":318,"slug":730,"text":731},"1-agent-module","1. AGENT Module",{"depth":318,"slug":733,"text":734},"2-rag-module","2. RAG Module",{"depth":318,"slug":736,"text":737},"3-web-module","3. WEB Module",{"depth":318,"slug":739,"text":740},"4-model-module","4. MODEL Module",{"depth":318,"slug":742,"text":743},"5-env-module","5. ENV Module",{"depth":318,"slug":745,"text":746},"6-log-module","6. LOG Module",{"depth":29,"slug":748,"text":749},"step-4-configure-dora-operator","Step 4: Configure Dora Operator",{"depth":29,"slug":751,"text":752},"step-5-configure-dora-dataflow","Step 5: Configure Dora Dataflow",{"depth":33,"slug":754,"text":755},"node-descriptions","Node Descriptions",{"depth":29,"slug":757,"text":758},"step-6-run-dora-dataflow","Step 6: Run Dora Dataflow",{"depth":33,"slug":760,"text":761},"start-the-dataflow-using-dora-rs-cli","Start the Dataflow Using Dora-RS CLI",{"depth":29,"slug":763,"text":764},"summary","Summary",[],[],{"title":705,"description":706,"order":29},[],"3. examples/hello-world-dora.md","2-getting-started/installation--hello-world",{"id":770,"data":772,"body":775,"filePath":776,"digest":777,"rendered":778,"legacyId":804},{"title":773,"description":774,"order":26},"快速开始指南","MoFA 安装和 Hello World 示例","## 1. 开发环境配置\r\n\r\n### 1.1 Python 环境\r\n\r\n首先需构建隔离的 Python 运行环境：\r\n\r\n```bash\r\n# 创建虚拟环境\r\npython3 -m venv .mofa\r\n# 激活虚拟环境\r\nsource .mofa/bin/activate\r\n```\r\n\r\n**环境要求**\r\n- Python 版本需为 3.10 或 3.11\r\n- 兼容系统：WSL（Ubuntu 22.04）、macOS\r\n- 暂不支持 Windows 系统\r\n\r\n### 1.2 Rust 环境配置\r\n```bash\r\n# 安装 Rust 工具链\r\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\r\n# 安装过程中保持默认配置（直接按 Enter 确认）\r\n# 安装 Dora 命令行工具\r\ncargo install dora-cli\r\n\r\n# 验证安装结果\r\nrustc --version\r\ncargo --version\r\ndora --version\r\n```\r\n\r\n## 2. 安装 MoFa 框架\r\n```bash\r\npip install git+https://github.com/mofa-org/mofa.git\r\n# 验证安装\r\npip show mofa-ai\r\n```\r\n\r\n## 3. 运行 Hello World 示例\r\n```bash\r\n# 克隆代码仓库\r\ngit clone git@github.com:mofa-org/mofa.git\r\n```\r\n\r\n### 3.1 启动数据流\r\n```bash\r\ncd mofa/dataflows/hello_world\r\nmofa run hello_world_dataflow.yml\r\n```\r\n\r\n\r\n交互示例输出：\r\n\r\n```\r\n Send Your Task :  你好\r\n-------------hello_world_result---------------\r\n你好\r\n```","src/content/docs/2. getting-started/Installation & hello-world.md","5a955e4a5a5ad126",{"html":779,"metadata":780},"\u003Ch2 id=\"1-开发环境配置\">1. 开发环境配置\u003C/h2>\n\u003Ch3 id=\"11-python-环境\">1.1 Python 环境\u003C/h3>\n\u003Cp>首先需构建隔离的 Python 运行环境：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 创建虚拟环境\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">python3\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -m\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> venv\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .mofa\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 激活虚拟环境\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">source\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .mofa/bin/activate\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>环境要求\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Python 版本需为 3.10 或 3.11\u003C/li>\n\u003Cli>兼容系统：WSL（Ubuntu 22.04）、macOS\u003C/li>\n\u003Cli>暂不支持 Windows 系统\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"12-rust-环境配置\">1.2 Rust 环境配置\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装 Rust 工具链\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --proto\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '=https'\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --tlsv1.2\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -sSf\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://sh.rustup.rs\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装过程中保持默认配置（直接按 Enter 确认）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 安装 Dora 命令行工具\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dora-cli\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 验证安装结果\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">rustc\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dora\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-安装-mofa-框架\">2. 安装 MoFa 框架\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> git+https://github.com/mofa-org/mofa.git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 验证安装\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> show\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mofa-ai\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"3-运行-hello-world-示例\">3. 运行 Hello World 示例\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 克隆代码仓库\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> git@github.com:mofa-org/mofa.git\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"31-启动数据流\">3.1 启动数据流\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mofa/dataflows/hello_world\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mofa\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> hello_world_dataflow.yml\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>交互示例输出：\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan> Send Your Task :  你好\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-------------hello_world_result---------------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>你好\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":781,"localImagePaths":800,"remoteImagePaths":801,"frontmatter":802,"imagePaths":803},[782,785,788,791,794,797],{"depth":29,"slug":783,"text":784},"1-开发环境配置","1. 开发环境配置",{"depth":33,"slug":786,"text":787},"11-python-环境","1.1 Python 环境",{"depth":33,"slug":789,"text":790},"12-rust-环境配置","1.2 Rust 环境配置",{"depth":29,"slug":792,"text":793},"2-安装-mofa-框架","2. 安装 MoFa 框架",{"depth":29,"slug":795,"text":796},"3-运行-hello-world-示例","3. 运行 Hello World 示例",{"depth":33,"slug":798,"text":799},"31-启动数据流","3.1 启动数据流",[],[],{"title":773,"description":774,"order":26},[],"2. getting-started/Installation & hello-world.md","3-examples/hello-world",{"id":805,"data":807,"body":810,"filePath":811,"digest":812,"rendered":813,"legacyId":821},{"title":808,"description":809,"order":26},"Hello World Example","The simplest MoFA agent example - Hello World","This section introduces how to implement the simplest \"Hello World\" agent.\n\nThe task of this agent is to print \"Hello World\" as output, regardless of the input it receives.","src/content/docs/3. examples/hello-world.md","fc286cd8ad7c2ea2",{"html":814,"metadata":815},"\u003Cp>This section introduces how to implement the simplest “Hello World” agent.\u003C/p>\n\u003Cp>The task of this agent is to print “Hello World” as output, regardless of the input it receives.\u003C/p>",{"headings":816,"localImagePaths":817,"remoteImagePaths":818,"frontmatter":819,"imagePaths":820},[],[],[],{"title":808,"description":809,"order":26},[],"3. examples/hello-world.md"]