import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<h1 id=\"mofa-移动端部署方案\">MoFA 移动端部署方案：</h1>\n<h2 id=\"技术挑战\">技术挑战</h2>\n<h3 id=\"mofa-的移动端应用场景与传统机器人控制的区别\">MoFA 的移动端应用场景与传统机器人控制的区别：</h3>\n<p><strong>机器人控制场景特点</strong>：</p>\n<ul>\n<li>低延迟的硬件通信（微秒级）</li>\n<li>大量传感器数据实时处理</li>\n<li>Dora-RS 共享内存</li>\n</ul>\n<p><strong>移动端 AI Agent 场景特点</strong>：</p>\n<ul>\n<li>逻辑推理和决策</li>\n<li>网络操作和屏幕交互为主</li>\n<li>对话和任务规划导向</li>\n<li>延迟容忍度相对较高（毫秒级即ok）</li>\n</ul>\n<h3 id=\"dora-rs-的移植问题\">Dora-RS 的移植问题</h3>\n<h4 id=\"一些问题\">一些问题：</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Dora 共享内存</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">shared</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">memory</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">server (Dora自有) </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">├── shared_memory_extended </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"0.13.0\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">├── raw_sync_2 </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"0.1.5\"</span><span style=\"color:#E1E4E8\"> </span></span></code></pre>\n<ol>\n<li><strong>共享内存依赖</strong>：Dora 依赖的 <code>shared_memory_extended</code> crate 在移动平台支持不完整</li>\n<li><strong>进程间通信机制</strong>：移动操作系统 IPC 机制与桌面系统差异</li>\n<li><strong>ARM 架构适配</strong></li>\n</ol>\n<h2 id=\"方案\">方案</h2>\n<h3 id=\"方案一termux--root权限-完整移植demo阶段\">方案一：Termux + Root权限 完整移植（Demo阶段）</h3>\n<h4 id=\"技术架构\">技术架构</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>Android Host</span></span>\n<span class=\"line\"><span>├── Termux (完整Arch Linux 环境)</span></span>\n<span class=\"line\"><span>│   ├── libandroid-shmem (共享内存)</span></span>\n<span class=\"line\"><span>│   ├── Rust 工具链</span></span>\n<span class=\"line\"><span>│   ├── Dora-RS 完整版</span></span>\n<span class=\"line\"><span>│   └── MoFA 智能体框架</span></span>\n<span class=\"line\"><span>└── Host Bridge App（参考Auto.JS）</span></span>\n<span class=\"line\"><span>    ├── 屏幕截图 API</span></span>\n<span class=\"line\"><span>    ├── 触摸注入 API</span></span>\n<span class=\"line\"><span>    └── Socket 通信桥接</span></span></code></pre>\n<h4 id=\"分层验证计划\">分层验证计划</h4>\n<p><strong>基础环境</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">□</span><span style=\"color:#9ECBFF\"> Termux</span><span style=\"color:#9ECBFF\"> 安装与</span><span style=\"color:#9ECBFF\"> Root</span><span style=\"color:#9ECBFF\"> 权限获取</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">□</span><span style=\"color:#9ECBFF\"> 基础</span><span style=\"color:#9ECBFF\"> Linux</span><span style=\"color:#9ECBFF\"> 命令可用性验证</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">□</span><span style=\"color:#9ECBFF\"> 网络连接和文件系统权限测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">pkg</span><span style=\"color:#9ECBFF\"> update</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">pkg</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -y</span><span style=\"color:#9ECBFF\"> git</span><span style=\"color:#9ECBFF\"> curl</span><span style=\"color:#9ECBFF\"> wget</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">su</span><span style=\"color:#79B8FF\"> -c</span><span style=\"color:#9ECBFF\"> \"whoami\"</span><span style=\"color:#6A737D\">  # 验证 root 权限</span></span></code></pre>\n<p><strong>Rust 工具链</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">pkg</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> rust</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">rustc</span><span style=\"color:#79B8FF\"> --version</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">cargo</span><span style=\"color:#79B8FF\"> --version</span></span></code></pre>\n<p><strong>共享内存</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 内核支持检查</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cat</span><span style=\"color:#9ECBFF\"> /proc/version</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">ls</span><span style=\"color:#79B8FF\"> -la</span><span style=\"color:#9ECBFF\"> /dev/shm</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/termux/libandroid-shmem</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> libandroid-shmem</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">make</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">make</span><span style=\"color:#9ECBFF\"> install</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">gcc</span><span style=\"color:#9ECBFF\"> test/test.c</span><span style=\"color:#79B8FF\"> -o</span><span style=\"color:#9ECBFF\"> test_shmem</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">./test_shmem</span></span></code></pre>\n<p><strong>Dora</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/dora-rs/dora</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> dora</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#79B8FF\"> --bin</span><span style=\"color:#9ECBFF\"> dora-daemon</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#79B8FF\"> --bin</span><span style=\"color:#9ECBFF\"> dora-coordinator</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 基础运行测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">./target/debug/dora-daemon</span><span style=\"color:#79B8FF\"> --help</span></span></code></pre>\n<p><strong>MoFA</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -e</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#6A737D\"> #安装MoFA，具体省略</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">python</span><span style=\"color:#9ECBFF\"> examples/hello_world/hello_world.py</span></span></code></pre>\n<h4 id=\"host-vm-桥接层设计\">Host-VM 桥接层设计</h4>\n<p><strong>屏幕数据流</strong>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Android Host 端，demo code，尚未实现</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> ScreenBridge</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    fun</span><span style=\"color:#B392F0\"> captureScreen</span><span style=\"color:#E1E4E8\">(): </span><span style=\"color:#B392F0\">ByteArray</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        val</span><span style=\"color:#E1E4E8\"> mediaProjection </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> getMediaProjection</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        val</span><span style=\"color:#E1E4E8\"> imageReader </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> ImageReader.</span><span style=\"color:#B392F0\">newInstance</span><span style=\"color:#E1E4E8\">(width, height, ImageFormat.JPEG, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        return</span><span style=\"color:#E1E4E8\"> compressedImageData</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    fun</span><span style=\"color:#B392F0\"> sendToVM</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">data</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#B392F0\">ByteArray</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        socket.</span><span style=\"color:#B392F0\">write</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">data</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#6A737D\">// 通过 Socket 发送到 VM</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p><strong>操作指令回传</strong>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\"># VM 中的 MoFA Agent，demo code，尚未实现</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> AndroidOperationNode</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#79B8FF\"> __init__</span><span style=\"color:#E1E4E8\">(self):</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">        self</span><span style=\"color:#E1E4E8\">.bridge_socket </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> socket.connect(</span><span style=\"color:#9ECBFF\">\"unix:///tmp/android_bridge\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#B392F0\"> click</span><span style=\"color:#E1E4E8\">(self, x: </span><span style=\"color:#79B8FF\">int</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">int</span><span style=\"color:#E1E4E8\">):</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        command </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span><span style=\"color:#9ECBFF\">\"action\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"click\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"x\"</span><span style=\"color:#E1E4E8\">: x, </span><span style=\"color:#9ECBFF\">\"y\"</span><span style=\"color:#E1E4E8\">: y}</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">        self</span><span style=\"color:#E1E4E8\">.bridge_socket.send(json.dumps(command))</span></span></code></pre>\n<h3 id=\"方案二原生-android-重设计\">方案二：原生 Android 重设计</h3>\n<h4 id=\"新架构设计\">新架构设计</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>Android Native MoFA</span></span>\n<span class=\"line\"><span>├── Zenoh-Kotlin 通信层</span></span>\n<span class=\"line\"><span>├── Agent Runtime (Kotlin/Java)</span></span>\n<span class=\"line\"><span>├── 智能体模板系统 (简化版)</span></span>\n<span class=\"line\"><span>├── Android Services</span></span>\n<span class=\"line\"><span>│   ├── AccessibilityService (屏幕操作)</span></span>\n<span class=\"line\"><span>│   ├── ScreenCapture (截图服务)</span></span>\n<span class=\"line\"><span>│   └── ForegroundService (后台保活)</span></span>\n<span class=\"line\"><span>└── Mobile Node Hub</span></span>\n<span class=\"line\"><span>    ├── AutoJS 集成节点</span></span>\n<span class=\"line\"><span>    ├── UI Automator 包装</span></span>\n<span class=\"line\"><span>    ├── Intent 调用器</span></span>\n<span class=\"line\"><span>    └── API 调用节点</span></span></code></pre>\n<h2 id=\"前两个方案对比\">前两个方案对比</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>评估维度</th><th>Termux + Linux</th><th>Native 重设计</th></tr></thead><tbody><tr><td><strong>开发速度</strong></td><td>🟢 快速复用现有代码</td><td>🔴 需要完全重写</td></tr><tr><td><strong>运行性能</strong></td><td>🔴 双层虚拟化开销</td><td>🟢 原生性能</td></tr><tr><td><strong>功能完整性</strong></td><td>🟢 100% 兼容</td><td>🔴 功能受限</td></tr><tr><td><strong>用户体验</strong></td><td>🔴 安装极端复杂</td><td>🟢 原生体验</td></tr><tr><td><strong>维护成本</strong></td><td>🟢 低维护</td><td>🔴 双重维护</td></tr></tbody></table>\n<h3 id=\"进一步场景分析\">进一步场景分析</h3>\n<p>除非开发者有特殊需求，比如需要 agent 来操作移动端独占的某些 app（淘宝、微信等），但这个市场相对较小，而且容易偏离核心方向。</p>\n<p>认真来做的话，移动端方案还是挺费资源的。技术复杂度高，投入产出比不太理想。</p>\n<p>但后面可以尝试直接打包到容器，不做操作用户手机的操作，单纯去跑一些信息抓取、文档处理之类的 flow，还是可行的。</p>\n<h3 id=\"方案三容器化部署\">方案三：容器化部署</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>Container-based MoFA Mobile Stage</span></span>\n<span class=\"line\"><span>├── Docker/Podman 容器</span></span>\n<span class=\"line\"><span>│   ├── 完整 MoFA 环境</span></span>\n<span class=\"line\"><span>│   ├── 预装常用依赖</span></span>\n<span class=\"line\"><span>│   └── 标准化运行时</span></span>\n<span class=\"line\"><span>├── 常用Agent/Flow</span></span>\n<span class=\"line\"><span>│   ├── 网页数据抓取</span></span>\n<span class=\"line\"><span>│   ├── 文档处理 Flow</span></span>\n<span class=\"line\"><span>│   ├── API 调用集成</span></span>\n<span class=\"line\"><span>│   └── 数据分析任务</span></span>\n<span class=\"line\"><span>└── 移动端适配</span></span>\n<span class=\"line\"><span>    ├── 响应式 Web UI</span></span>\n<span class=\"line\"><span>    ├── 触摸优化交互</span></span>\n<span class=\"line\"><span>    └── 离线缓存支持</span></span></code></pre>\n<p>好处：</p>\n<ul>\n<li>技术栈完全复用，不用重新造轮子</li>\n<li>部署简单</li>\n</ul>\n<h3 id=\"方案四云端--网页套壳-app\">方案四：云端 + 网页套壳 App</h3>\n<p>后期在云端部署后，做一个网页套壳 MoFA Stage 的 app。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>Cloud MoFA + Mobile Client</span></span>\n<span class=\"line\"><span>├── 云端 MoFA </span></span>\n<span class=\"line\"><span>│   ├── 智能体运行环境</span></span>\n<span class=\"line\"><span>│   ├── 任务调度系统</span></span>\n<span class=\"line\"><span>│   └── 结果缓存层</span></span>\n<span class=\"line\"><span>├── 移动端 App (网页套壳)</span></span>\n<span class=\"line\"><span>│   ├── MoFA Stage 移动版</span></span>\n<span class=\"line\"><span>│   ├── 任务创建与监控</span></span>\n<span class=\"line\"><span>│   ├── 结果展示界面</span></span>\n<span class=\"line\"><span>│   └── 离线模式支持</span></span>\n<span class=\"line\"><span>└── 通信层</span></span>\n<span class=\"line\"><span>    ├── WebSocket 实时通信</span></span>\n<span class=\"line\"><span>    ├── RESTful API</span></span>\n<span class=\"line\"><span>    └── 消息队列同步</span></span></code></pre>\n<p>好处：</p>\n<ul>\n<li>不用造轮子</li>\n<li>技术栈保持一致，维护简单</li>\n<li>解决用户的实际需求，不是为了移动端而移动端</li>\n</ul>\n<hr>";

				const frontmatter = {"title":"MoFA 移动端方案探索","description":"分析 MoFA 智能体框架在移动端部署面临的技术挑战","date":"2025-06-09T00:00:00.000Z","author":"MoFA 团队","tags":["移动端","架构设计","Termux","Android","技术方案"]};
				const file = "/home/runner/work/mofa-org.github.io/mofa-org.github.io/mofa-website/src/content/blog/mofa-mobile-solution-plan.md";
				const url = undefined;
				function rawContent() {
					return "\n# MoFA 移动端部署方案：\n\n## 技术挑战\n\n### MoFA 的移动端应用场景与传统机器人控制的区别：\n\n**机器人控制场景特点**：\n- 低延迟的硬件通信（微秒级）\n- 大量传感器数据实时处理\n- Dora-RS 共享内存\n\n**移动端 AI Agent 场景特点**：\n- 逻辑推理和决策\n- 网络操作和屏幕交互为主\n- 对话和任务规划导向\n- 延迟容忍度相对较高（毫秒级即ok）\n\n### Dora-RS 的移植问题\n\n#### 一些问题：\n\n```rust\n// Dora 共享内存\nshared-memory-server (Dora自有) \n├── shared_memory_extended = \"0.13.0\"\n├── raw_sync_2 = \"0.1.5\" \n```\n\n1. **共享内存依赖**：Dora 依赖的 `shared_memory_extended` crate 在移动平台支持不完整\n2. **进程间通信机制**：移动操作系统 IPC 机制与桌面系统差异\n3. **ARM 架构适配**\n\n\n## 方案\n\n### 方案一：Termux + Root权限 完整移植（Demo阶段）\n\n#### 技术架构\n```\nAndroid Host\n├── Termux (完整Arch Linux 环境)\n│   ├── libandroid-shmem (共享内存)\n│   ├── Rust 工具链\n│   ├── Dora-RS 完整版\n│   └── MoFA 智能体框架\n└── Host Bridge App（参考Auto.JS）\n    ├── 屏幕截图 API\n    ├── 触摸注入 API\n    └── Socket 通信桥接\n```\n\n#### 分层验证计划\n\n**基础环境**\n```bash\n□ Termux 安装与 Root 权限获取\n□ 基础 Linux 命令可用性验证\n□ 网络连接和文件系统权限测试\npkg update && pkg install -y git curl wget\nsu -c \"whoami\"  # 验证 root 权限\n```\n\n**Rust 工具链**\n```bash\npkg install rust\nrustc --version && cargo --version\n```\n\n**共享内存**\n```bash\n# 内核支持检查\ncat /proc/version\nls -la /dev/shm\ngit clone https://github.com/termux/libandroid-shmem\ncd libandroid-shmem && make && make install\ngcc test/test.c -o test_shmem && ./test_shmem\n```\n\n**Dora**\n```bash\ngit clone https://github.com/dora-rs/dora\ncd dora\ncargo build --bin dora-daemon\ncargo build --bin dora-coordinator\n\n# 基础运行测试\n./target/debug/dora-daemon --help\n```\n\n\n\n**MoFA**\n```bash\npip install -e . #安装MoFA，具体省略\npython examples/hello_world/hello_world.py\n```\n\n#### Host-VM 桥接层设计\n\n**屏幕数据流**：\n```kotlin\n// Android Host 端，demo code，尚未实现\nclass ScreenBridge {\n    fun captureScreen(): ByteArray {\n        val mediaProjection = getMediaProjection()\n        val imageReader = ImageReader.newInstance(width, height, ImageFormat.JPEG, 1)\n        return compressedImageData\n    }\n    \n    fun sendToVM(data: ByteArray) {\n        socket.write(data) // 通过 Socket 发送到 VM\n    }\n}\n```\n\n**操作指令回传**：\n```python\n# VM 中的 MoFA Agent，demo code，尚未实现\nclass AndroidOperationNode:\n    def __init__(self):\n        self.bridge_socket = socket.connect(\"unix:///tmp/android_bridge\")\n    \n    def click(self, x: int, y: int):\n        command = {\"action\": \"click\", \"x\": x, \"y\": y}\n        self.bridge_socket.send(json.dumps(command))\n```\n\n### 方案二：原生 Android 重设计\n\n#### 新架构设计\n```\nAndroid Native MoFA\n├── Zenoh-Kotlin 通信层\n├── Agent Runtime (Kotlin/Java)\n├── 智能体模板系统 (简化版)\n├── Android Services\n│   ├── AccessibilityService (屏幕操作)\n│   ├── ScreenCapture (截图服务)\n│   └── ForegroundService (后台保活)\n└── Mobile Node Hub\n    ├── AutoJS 集成节点\n    ├── UI Automator 包装\n    ├── Intent 调用器\n    └── API 调用节点\n```\n\n\n\n## 前两个方案对比\n\n| 评估维度 | Termux + Linux | Native 重设计 | \n|---------|----------------|---------------|\n| **开发速度** | 🟢 快速复用现有代码 | 🔴 需要完全重写 |  \n| **运行性能** | 🔴 双层虚拟化开销 | 🟢 原生性能 | \n| **功能完整性** | 🟢 100% 兼容 | 🔴 功能受限 |  \n| **用户体验** | 🔴 安装极端复杂 | 🟢 原生体验 | \n| **维护成本** | 🟢 低维护 | 🔴 双重维护 |  \n\n\n\n### 进一步场景分析\n\n除非开发者有特殊需求，比如需要 agent 来操作移动端独占的某些 app（淘宝、微信等），但这个市场相对较小，而且容易偏离核心方向。\n\n认真来做的话，移动端方案还是挺费资源的。技术复杂度高，投入产出比不太理想。\n\n但后面可以尝试直接打包到容器，不做操作用户手机的操作，单纯去跑一些信息抓取、文档处理之类的 flow，还是可行的。\n\n### 方案三：容器化部署\n\n```\nContainer-based MoFA Mobile Stage\n├── Docker/Podman 容器\n│   ├── 完整 MoFA 环境\n│   ├── 预装常用依赖\n│   └── 标准化运行时\n├── 常用Agent/Flow\n│   ├── 网页数据抓取\n│   ├── 文档处理 Flow\n│   ├── API 调用集成\n│   └── 数据分析任务\n└── 移动端适配\n    ├── 响应式 Web UI\n    ├── 触摸优化交互\n    └── 离线缓存支持\n```\n\n好处：\n- 技术栈完全复用，不用重新造轮子\n- 部署简单\n\n### 方案四：云端 + 网页套壳 App\n\n后期在云端部署后，做一个网页套壳 MoFA Stage 的 app。\n\n```\nCloud MoFA + Mobile Client\n├── 云端 MoFA \n│   ├── 智能体运行环境\n│   ├── 任务调度系统\n│   └── 结果缓存层\n├── 移动端 App (网页套壳)\n│   ├── MoFA Stage 移动版\n│   ├── 任务创建与监控\n│   ├── 结果展示界面\n│   └── 离线模式支持\n└── 通信层\n    ├── WebSocket 实时通信\n    ├── RESTful API\n    └── 消息队列同步\n```\n\n\n好处：\n- 不用造轮子\n- 技术栈保持一致，维护简单\n- 解决用户的实际需求，不是为了移动端而移动端\n\n---\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"mofa-移动端部署方案","text":"MoFA 移动端部署方案："},{"depth":2,"slug":"技术挑战","text":"技术挑战"},{"depth":3,"slug":"mofa-的移动端应用场景与传统机器人控制的区别","text":"MoFA 的移动端应用场景与传统机器人控制的区别："},{"depth":3,"slug":"dora-rs-的移植问题","text":"Dora-RS 的移植问题"},{"depth":4,"slug":"一些问题","text":"一些问题："},{"depth":2,"slug":"方案","text":"方案"},{"depth":3,"slug":"方案一termux--root权限-完整移植demo阶段","text":"方案一：Termux + Root权限 完整移植（Demo阶段）"},{"depth":4,"slug":"技术架构","text":"技术架构"},{"depth":4,"slug":"分层验证计划","text":"分层验证计划"},{"depth":4,"slug":"host-vm-桥接层设计","text":"Host-VM 桥接层设计"},{"depth":3,"slug":"方案二原生-android-重设计","text":"方案二：原生 Android 重设计"},{"depth":4,"slug":"新架构设计","text":"新架构设计"},{"depth":2,"slug":"前两个方案对比","text":"前两个方案对比"},{"depth":3,"slug":"进一步场景分析","text":"进一步场景分析"},{"depth":3,"slug":"方案三容器化部署","text":"方案三：容器化部署"},{"depth":3,"slug":"方案四云端--网页套壳-app","text":"方案四：云端 + 网页套壳 App"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
