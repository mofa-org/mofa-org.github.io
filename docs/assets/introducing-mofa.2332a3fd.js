import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<p>MoFA（<strong>M</strong>odular <strong>F</strong>ramework for <strong>A</strong>gent）是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent）。</p>\n<h2 id=\"-设计理念\">🎯 设计理念</h2>\n<p>MoFA 独特的设计理念是：</p>\n<ul>\n<li>\n<p><strong>平凡人做非凡事</strong>：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。</p>\n</li>\n<li>\n<p><strong>Composition AI</strong>：受 Unix 哲学启发，MoFA 以”组合”作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。</p>\n</li>\n<li>\n<p><strong>Everything Agent</strong>：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。</p>\n</li>\n<li>\n<p><strong>Data Flow</strong>：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用。</p>\n</li>\n</ul>\n<h2 id=\"️-技术架构\">🏗️ 技术架构</h2>\n<img src=\"https://github.com/RelevantStudy/mofasearch/blob/main/hackathons/docs/images/image-20250310010710778.png\" alt=\"MoFA技术架构图\" style=\"zoom:67%;\">\n<p>MoFA 与 Dora-RS 形成分层架构，构成从底层通信到上层智能体的技术栈：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>┌─────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│           MoFA 层                   │  ← AI智能体开发框架</span></span>\n<span class=\"line\"><span>│  智能体模板 + 组合逻辑 + 核心服务    │     (Python为主)</span></span>\n<span class=\"line\"><span>├─────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│           Dora 层                   │  ← 数据流引擎  </span></span>\n<span class=\"line\"><span>│  实时通信 + 跨语言 + 运行时管理     │     (Rust核心)</span></span>\n<span class=\"line\"><span>└─────────────────────────────────────┘</span></span></code></pre>\n<h2 id=\"-快速开始\">🚀 快速开始</h2>\n<h3 id=\"环境准备\">环境准备</h3>\n<h4 id=\"python-环境\">Python 环境</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 安装 UV 包管理器加速 mofa 安装</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> uv</span></span></code></pre>\n<p><strong>注意事项</strong>：</p>\n<ul>\n<li>本地python环境要纯净，不要多个python版本，否则容易导致Dora-rs运行环境和Mofa安装环境的冲突</li>\n<li>如果使用 Anaconda/Miniconda，务必将 Mofa 安装到 <code>Base</code> 环境下</li>\n<li>要求 python 环境 >= 3.10</li>\n<li>目前已在 WSL（Ubuntu 22.04）和 macOS 上测试，Windows 暂不支持</li>\n</ul>\n<h4 id=\"rust-环境\">Rust 环境</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 安装 Rust</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> --proto</span><span style=\"color:#9ECBFF\"> '=https'</span><span style=\"color:#79B8FF\"> --tlsv1.2</span><span style=\"color:#79B8FF\"> -sSf</span><span style=\"color:#9ECBFF\"> https://sh.rustup.rs</span><span style=\"color:#F97583\"> |</span><span style=\"color:#B392F0\"> sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 安装 Dora 运行时</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> dora-cli</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 验证安装</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#79B8FF\"> --version</span></span></code></pre>\n<h3 id=\"安装-mofa\">安装 MoFA</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 克隆仓库</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/moxin-org/mofa.git</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> mofa/python</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 安装依赖</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">uv</span><span style=\"color:#9ECBFF\"> pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -e</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -e</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#E1E4E8\"> </span></span></code></pre>\n<h3 id=\"hello-world-示例\">Hello World 示例</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> mofa/python/examples/hello_world</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 启动 Dora 服务</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 构建并运行数据流</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> hello_world_dataflow.yml</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> hello_world_dataflow.yml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 在另一个终端测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> hello</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 输出: hello</span></span></code></pre>\n<h2 id=\"-5分钟创建第一个应用\">💡 5分钟创建第一个应用</h2>\n<h3 id=\"1-创建-agent-项目\">1. 创建 Agent 项目</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">mofa</span><span style=\"color:#9ECBFF\"> new-agent</span><span style=\"color:#9ECBFF\"> my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> my-llm-agent</span></span></code></pre>\n<h3 id=\"2-配置环境变量\">2. 配置环境变量</h3>\n<p>创建 <code>.env.secret</code> 文件：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>LLM_API_KEY=your_api_key_here</span></span>\n<span class=\"line\"><span>LLM_API_BASE=https://api.openai.com/v1</span></span>\n<span class=\"line\"><span>LLM_MODEL=gpt-3.5-turbo</span></span></code></pre>\n<h3 id=\"3-实现-agent-逻辑\">3. 实现 Agent 逻辑</h3>\n<p>编辑 <code>my_llm_agent/main.py</code>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> MofaAgent, run_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> openai </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> OpenAI</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> os</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> dotenv </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> load_dotenv</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">@run_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> run</span><span style=\"color:#E1E4E8\">(agent: MofaAgent):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    try</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        load_dotenv(</span><span style=\"color:#9ECBFF\">'.env.secret'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        client </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> OpenAI(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            api_key</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_API_KEY'</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            base_url</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_API_BASE'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        user_input </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> agent.receive_parameter(</span><span style=\"color:#9ECBFF\">'query'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> client.chat.completions.create(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            model</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_MODEL'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'gpt-3.5-turbo'</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            messages</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"system\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"You are a helpful AI assistant.\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: user_input}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            ]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_output_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'llm_result'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">response.choices[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].message.content</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    except</span><span style=\"color:#79B8FF\"> Exception</span><span style=\"color:#F97583\"> as</span><span style=\"color:#E1E4E8\"> e:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.logger.error(</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"Error: </span><span style=\"color:#79B8FF\">{str</span><span style=\"color:#E1E4E8\">(e)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span><span style=\"color:#9ECBFF\">'llm_result'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"Error: </span><span style=\"color:#79B8FF\">{str</span><span style=\"color:#E1E4E8\">(e)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">():</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> MofaAgent(</span><span style=\"color:#FFAB70\">agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'my-llm-agent'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    run(</span><span style=\"color:#FFAB70\">agent</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">agent)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#79B8FF\"> __name__</span><span style=\"color:#F97583\"> ==</span><span style=\"color:#9ECBFF\"> \"__main__\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    main()</span></span></code></pre>\n<h3 id=\"4-创建数据流配置\">4. 创建数据流配置</h3>\n<p>创建 <code>my_llm_dataflow.yml</code>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#85E89D\">nodes</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../node-hub/terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">dynamic</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      agent_response</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">my-llm-agent/llm_result</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e . ../../agent-hub/my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">llm_result</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      query</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input/data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    env</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      IS_DATAFLOW_END</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      WRITE_LOG</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span></code></pre>\n<h3 id=\"5-运行和测试\">5. 运行和测试</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> my_llm_dataflow.yml</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> my_llm_dataflow.yml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 新开终端测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> 你好，请介绍一下自己</span></span></code></pre>\n<h2 id=\"-构建自定义-agent\">🔧 构建自定义 Agent</h2>\n<h3 id=\"使用模板创建\">使用模板创建</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">mofa</span><span style=\"color:#9ECBFF\"> new-agent</span><span style=\"color:#9ECBFF\"> you_agent_name</span><span style=\"color:#E1E4E8\"> </span></span></code></pre>\n<h3 id=\"核心代码示例\">核心代码示例</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> MofaAgent, run_agent</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">@run_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> run</span><span style=\"color:#E1E4E8\">(agent: MofaAgent):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    try</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 接收单个agent输入</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        task </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> agent.receive_parameter(</span><span style=\"color:#9ECBFF\">'task'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 接收多个agent输入</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        receive_datas </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> agent.receive_parameter([</span><span style=\"color:#9ECBFF\">'example_one'</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#9ECBFF\">'example_two'</span><span style=\"color:#E1E4E8\">])</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 结果类似于 {'example_one':'example_one_data','example_two':'example_two_data'}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 处理逻辑 你可以把你的逻辑添加到这里</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        result </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> process_task(task)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 发送输出 确保你的输出是可以被序列化的对象(字符串等)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_output_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'agent_result'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">result</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    except</span><span style=\"color:#79B8FF\"> Exception</span><span style=\"color:#F97583\"> as</span><span style=\"color:#E1E4E8\"> e:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.logger.error(</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"Error: </span><span style=\"color:#79B8FF\">{str</span><span style=\"color:#E1E4E8\">(e)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> process_task</span><span style=\"color:#E1E4E8\">(data: </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">) -> </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"示例处理函数\"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#F97583\"> f</span><span style=\"color:#9ECBFF\">\"Processed: </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">data</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">():</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> MofaAgent(</span><span style=\"color:#FFAB70\">agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'my-new-agent'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    run(</span><span style=\"color:#FFAB70\">agent</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">agent)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#79B8FF\"> __name__</span><span style=\"color:#F97583\"> ==</span><span style=\"color:#9ECBFF\"> \"__main__\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    main()</span></span></code></pre>\n<hr>\n<p>立即开始您的智能体开发之旅！</p>";

				const frontmatter = {"title":"MoFA 开发框架：组合式 AI 智能体构建平台","description":"MoFA 是一个以组合的方式构建 AI 智能体的软件框架，让平凡人也能创造非凡的 AI 应用","date":"2025-06-09T00:00:00.000Z","author":"MoFA Team","tags":["架构","AI框架","Dora-RS","智能体","组合式AI"]};
				const file = "/home/runner/work/mofa-org.github.io/mofa-org.github.io/mofa-website/src/content/blog/introducing-mofa.md";
				const url = undefined;
				function rawContent() {
					return "\nMoFA（**M**odular **F**ramework for **A**gent）是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent）。\n\n## 🎯 设计理念\n\nMoFA 独特的设计理念是：\n\n- **平凡人做非凡事**：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。\n\n- **Composition AI**：受 Unix 哲学启发，MoFA 以\"组合\"作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。\n\n- **Everything Agent**：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。\n\n- **Data Flow**：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用。\n\n## 🏗️ 技术架构\n\n<img src=\"https://github.com/RelevantStudy/mofasearch/blob/main/hackathons/docs/images/image-20250310010710778.png\" alt=\"MoFA技术架构图\" style=\"zoom:67%;\" />\n\nMoFA 与 Dora-RS 形成分层架构，构成从底层通信到上层智能体的技术栈：\n\n```\n┌─────────────────────────────────────┐\n│           MoFA 层                   │  ← AI智能体开发框架\n│  智能体模板 + 组合逻辑 + 核心服务    │     (Python为主)\n├─────────────────────────────────────┤\n│           Dora 层                   │  ← 数据流引擎  \n│  实时通信 + 跨语言 + 运行时管理     │     (Rust核心)\n└─────────────────────────────────────┘\n```\n\n## 🚀 快速开始\n\n### 环境准备\n\n#### Python 环境\n```bash\n# 安装 UV 包管理器加速 mofa 安装\npip install uv\n```\n\n**注意事项**：\n- 本地python环境要纯净，不要多个python版本，否则容易导致Dora-rs运行环境和Mofa安装环境的冲突\n- 如果使用 Anaconda/Miniconda，务必将 Mofa 安装到 `Base` 环境下\n- 要求 python 环境 >= 3.10\n- 目前已在 WSL（Ubuntu 22.04）和 macOS 上测试，Windows 暂不支持\n\n#### Rust 环境\n```bash\n# 安装 Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# 安装 Dora 运行时\ncargo install dora-cli\n\n# 验证安装\ndora --version\n```\n\n### 安装 MoFA\n\n```bash\n# 克隆仓库\ngit clone https://github.com/moxin-org/mofa.git\ncd mofa/python\n\n# 安装依赖\nuv pip install -e . && pip install -e . \n```\n\n### Hello World 示例\n\n```bash\ncd mofa/python/examples/hello_world\n\n# 启动 Dora 服务\ndora up\n\n# 构建并运行数据流\ndora build hello_world_dataflow.yml\ndora start hello_world_dataflow.yml\n\n# 在另一个终端测试\nterminal-input\n> hello\n# 输出: hello\n```\n\n## 💡 5分钟创建第一个应用\n\n### 1. 创建 Agent 项目\n```bash\nmofa new-agent my-llm-agent\ncd my-llm-agent\n```\n\n### 2. 配置环境变量\n创建 `.env.secret` 文件：\n```plaintext\nLLM_API_KEY=your_api_key_here\nLLM_API_BASE=https://api.openai.com/v1\nLLM_MODEL=gpt-3.5-turbo\n```\n\n### 3. 实现 Agent 逻辑\n编辑 `my_llm_agent/main.py`：\n```python\nfrom mofa.agent_build.base.base_agent import MofaAgent, run_agent\nfrom openai import OpenAI\nimport os\nfrom dotenv import load_dotenv\n\n@run_agent\ndef run(agent: MofaAgent):\n    try:\n        load_dotenv('.env.secret')\n        \n        client = OpenAI(\n            api_key=os.getenv('LLM_API_KEY'),\n            base_url=os.getenv('LLM_API_BASE')\n        )\n        \n        user_input = agent.receive_parameter('query')\n        \n        response = client.chat.completions.create(\n            model=os.getenv('LLM_MODEL', 'gpt-3.5-turbo'),\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful AI assistant.\"},\n                {\"role\": \"user\", \"content\": user_input}\n            ]\n        )\n        \n        agent.send_output(\n            agent_output_name='llm_result',\n            agent_result=response.choices[0].message.content\n        )\n        \n    except Exception as e:\n        agent.logger.error(f\"Error: {str(e)}\")\n        agent.send_output('llm_result', f\"Error: {str(e)}\")\n\ndef main():\n    agent = MofaAgent(agent_name='my-llm-agent')\n    run(agent=agent)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### 4. 创建数据流配置\n创建 `my_llm_dataflow.yml`：\n```yaml\nnodes:\n  - id: terminal-input\n    build: pip install -e ../../node-hub/terminal-input\n    path: dynamic\n    outputs: data\n    inputs:\n      agent_response: my-llm-agent/llm_result\n\n  - id: my-llm-agent\n    build: pip install -e . ../../agent-hub/my-llm-agent\n    path: my-llm-agent\n    outputs: llm_result\n    inputs:\n      query: terminal-input/data\n    env:\n      IS_DATAFLOW_END: true\n      WRITE_LOG: true\n```\n\n### 5. 运行和测试\n```bash\ndora up\ndora build my_llm_dataflow.yml\ndora start my_llm_dataflow.yml\n\n# 新开终端测试\nterminal-input\n> 你好，请介绍一下自己\n```\n\n## 🔧 构建自定义 Agent\n\n### 使用模板创建\n```bash\nmofa new-agent you_agent_name \n```\n\n### 核心代码示例\n```python\nfrom mofa.agent_build.base.base_agent import MofaAgent, run_agent\n\n@run_agent\ndef run(agent: MofaAgent):\n    try:\n        # 接收单个agent输入\n        task = agent.receive_parameter('task')\n        \n        # 接收多个agent输入\n        receive_datas = agent.receive_parameter(['example_one','example_two'])\n        # 结果类似于 {'example_one':'example_one_data','example_two':'example_two_data'}\n\n        # 处理逻辑 你可以把你的逻辑添加到这里\n        result = process_task(task)\n        \n        # 发送输出 确保你的输出是可以被序列化的对象(字符串等)\n        agent.send_output(\n            agent_output_name='agent_result',\n            agent_result=result\n        )\n        \n    except Exception as e:\n        agent.logger.error(f\"Error: {str(e)}\")\n        \n\ndef process_task(data: str) -> str:\n    \"\"\"示例处理函数\"\"\"\n    return f\"Processed: {data}\"\n\ndef main():\n    agent = MofaAgent(agent_name='my-new-agent')\n    run(agent=agent)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n立即开始您的智能体开发之旅！\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"-设计理念","text":"🎯 设计理念"},{"depth":2,"slug":"️-技术架构","text":"🏗️ 技术架构"},{"depth":2,"slug":"-快速开始","text":"🚀 快速开始"},{"depth":3,"slug":"环境准备","text":"环境准备"},{"depth":4,"slug":"python-环境","text":"Python 环境"},{"depth":4,"slug":"rust-环境","text":"Rust 环境"},{"depth":3,"slug":"安装-mofa","text":"安装 MoFA"},{"depth":3,"slug":"hello-world-示例","text":"Hello World 示例"},{"depth":2,"slug":"-5分钟创建第一个应用","text":"💡 5分钟创建第一个应用"},{"depth":3,"slug":"1-创建-agent-项目","text":"1. 创建 Agent 项目"},{"depth":3,"slug":"2-配置环境变量","text":"2. 配置环境变量"},{"depth":3,"slug":"3-实现-agent-逻辑","text":"3. 实现 Agent 逻辑"},{"depth":3,"slug":"4-创建数据流配置","text":"4. 创建数据流配置"},{"depth":3,"slug":"5-运行和测试","text":"5. 运行和测试"},{"depth":2,"slug":"-构建自定义-agent","text":"🔧 构建自定义 Agent"},{"depth":3,"slug":"使用模板创建","text":"使用模板创建"},{"depth":3,"slug":"核心代码示例","text":"核心代码示例"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
