import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<h1 id=\"mofa智能体模版\">MoFA智能体模版</h1>\n<p>构建智能体有一定的设计模式（Design Pattern），MoFA提供一系列的设计模式的实现，供开发者作为模版使用。</p>\n<ul>\n<li><a href=\"templates/design_patterns.md\">设计模式</a></li>\n<li><a href=\"templates/reasoner_template.md\">reasoner</a></li>\n<li><a href=\"templates/self_refine_template.md\">self_refine</a></li>\n<li><a href=\"templates/crewai_template.md\">crewai</a></li>\n<li>…</li>\n</ul>\n<h2 id=\"mofa组合智能体\">MoFA组合智能体</h2>\n<p>基于Dora-RS框架构建的MoFA智能体，实质上就是Dora-RS Dataflow。两个智能体之间可以通过数据连接进行组合，从而形成组合智能体。</p>\n<p>在上述的self_refine Agent模版和下面将要介绍的服务智能体和案例，都是MoFA组合智能体。</p>\n<h2 id=\"mofa服务智能体\">MoFA服务智能体</h2>\n<p>智能体往往需要需要一些服务，包括检索增强生成，记忆，使用外部工具和任务规划和分解等。MoFA认为：Everything Agent。我们以MoFA智能体的方式提供RAG智能体，记忆智能体，规划智能体和行动智能体。开发者可以使用这些已经实现的服务智能体，与自己的智能体相连接组合从而获得相应的服务。MoFA也可以集成第三方的服务智能体，供开发者按照不同的需求使用。</p>\n<ul>\n<li>rag</li>\n<li>memory</li>\n<li>action</li>\n<li>planning</li>\n</ul>\n<h2 id=\"nesting-design-patterns-of-ai-agents\">Nesting Design Patterns of AI Agents</h2>\n<p>AI agents are intelligent software applications with various design patterns:</p>\n<ul>\n<li><strong>LLM Inference</strong>: Using large language models for basic inference</li>\n<li><strong>Customized Prompt</strong>: Tailoring system prompts for specific agents</li>\n<li><strong>Reflection Pattern</strong>: Agents capable of self-review and improvement</li>\n<li><strong>Actor Pattern</strong>: Agents with external tool and resource capabilities</li>\n<li><strong>ReAct Pattern</strong>: Combining reflection and tool usage</li>\n<li><strong>Multi-Agent Collaboration</strong>: Specialized agents working together</li>\n</ul>\n<h2 id=\"agent-kernel-services\">Agent Kernel Services</h2>\n<p>MoFA provides core services to agents, including:</p>\n<ul>\n<li>Memory management</li>\n<li>Task planning</li>\n<li>Knowledge base integration</li>\n<li>RAG (Retrieval-Augmented Generation)</li>\n<li>Action capabilities</li>\n</ul>\n<h2 id=\"composition-based-architecture\">Composition-Based Architecture</h2>\n<p>Composition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.</p>\n<h2 id=\"dataflow-driven-approach\">Dataflow-Driven Approach</h2>\n<p>MoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.</p>";

				const frontmatter = {"title":"MoFA Agents","description":"Understanding MoFA agent concepts, design patterns, and composition"};
				const file = "/home/runner/work/mofa-org.github.io/mofa-org.github.io/mofa-website/src/content/docs/1. concepts/agents.md";
				const url = undefined;
				function rawContent() {
					return "\n# MoFA智能体模版\n\n构建智能体有一定的设计模式（Design Pattern），MoFA提供一系列的设计模式的实现，供开发者作为模版使用。\n\n- [设计模式](templates/design_patterns.md)\n- [reasoner](templates/reasoner_template.md)\n- [self_refine](templates/self_refine_template.md)\n- [crewai](templates/crewai_template.md)\n- ...\n\n## MoFA组合智能体\n\n基于Dora-RS框架构建的MoFA智能体，实质上就是Dora-RS Dataflow。两个智能体之间可以通过数据连接进行组合，从而形成组合智能体。\n\n在上述的self_refine Agent模版和下面将要介绍的服务智能体和案例，都是MoFA组合智能体。\n\n## MoFA服务智能体\n\n智能体往往需要需要一些服务，包括检索增强生成，记忆，使用外部工具和任务规划和分解等。MoFA认为：Everything Agent。我们以MoFA智能体的方式提供RAG智能体，记忆智能体，规划智能体和行动智能体。开发者可以使用这些已经实现的服务智能体，与自己的智能体相连接组合从而获得相应的服务。MoFA也可以集成第三方的服务智能体，供开发者按照不同的需求使用。\n\n- rag\n- memory\n- action\n- planning\n\n## Nesting Design Patterns of AI Agents\n\nAI agents are intelligent software applications with various design patterns:\n\n- **LLM Inference**: Using large language models for basic inference\n- **Customized Prompt**: Tailoring system prompts for specific agents\n- **Reflection Pattern**: Agents capable of self-review and improvement\n- **Actor Pattern**: Agents with external tool and resource capabilities\n- **ReAct Pattern**: Combining reflection and tool usage\n- **Multi-Agent Collaboration**: Specialized agents working together\n\n## Agent Kernel Services\n\nMoFA provides core services to agents, including:\n- Memory management\n- Task planning\n- Knowledge base integration\n- RAG (Retrieval-Augmented Generation)\n- Action capabilities\n\n## Composition-Based Architecture\n\nComposition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.\n\n## Dataflow-Driven Approach\n\nMoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"mofa智能体模版","text":"MoFA智能体模版"},{"depth":2,"slug":"mofa组合智能体","text":"MoFA组合智能体"},{"depth":2,"slug":"mofa服务智能体","text":"MoFA服务智能体"},{"depth":2,"slug":"nesting-design-patterns-of-ai-agents","text":"Nesting Design Patterns of AI Agents"},{"depth":2,"slug":"agent-kernel-services","text":"Agent Kernel Services"},{"depth":2,"slug":"composition-based-architecture","text":"Composition-Based Architecture"},{"depth":2,"slug":"dataflow-driven-approach","text":"Dataflow-Driven Approach"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
