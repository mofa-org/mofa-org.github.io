const _astro_dataLayerContent = [["Map",1,2,9,10,326,327],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.7","content-config-digest","b483d9d0ebb1a660","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://mofa-org.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"always\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,38,39,81,82,130,131,187,188,261,262],"ai-is-a-way-of-reveal-humanity",{id:11,data:13,body:24,filePath:25,digest:26,rendered:27,legacyId:37},{title:14,description:15,date:16,author:17,tags:18},"AI技术的本质：人性揭蔽","1953年，海德格尔说，技术的本质是对存在的揭蔽，古代和现代技术的本质揭蔽了自然的真相。那么，大约70年以后，AI技术的本质变了吗？",["Date","2025-02-16T00:00:00.000Z"],"XiaoKuge",[19,20,21,22,23],"哲学思考","AI技术","人性","海德格尔","技术哲学","**从 GPT-3 助手到 DeepSeek 顾问，再到未来的 AI 超人**\n\nDeepSeek 的问世震撼全球。天下苦昂贵算力久已、苦技术垄断久已、苦闭源 AI久已。而DeepSeek 横空出世，无疑打破了这些桎梏。\n\n我们同样为此兴奋，却更感迷茫。对我们而言，最具冲击力的并非技术本身，而是亲身体验到 DeepSeek 的“深度思考”能力。R1 模型那成竹在胸、不急不徐、井井有条的推理能力。这不仅意味着我们不再需要用繁琐的提示工程去引导 AI 进行逻辑推演，更重要的是，AI能够深入理解用户意图，提供内容丰富、结构完整的答案。这一突破，使 AI 从曾经的“助手”（Assistant）跃升为“高级顾问”（Consultant），其学识、思辨能力，甚至经验积累，已然超越人类。\n\n可以预见，AI 的发展不会止步于此。顾问之后，是否会进化为“超人”？\n\n带着这些疑问，我们向 DeepSeek 提出关于 AI 与人性的关系问题。它在 18 秒的深度思考后，生成了一篇内容酷炫的文章。尽管 生成AI的旁征博引和华丽文采已不再让人感到那么新鲜，但其中有一句话让人眼前一亮：“站在人机共生的门槛上，我们需要重新理解海德格尔提出的‘技术是存在的揭蔽’之深意。” 于是，我们开始研究哲学家马丁·海德格尔（Martin Heidegger）及其代表性论述《技术的追问》（*The Question Concerning Technology*）。\n\n![图片](https://relevantstudy.github.io/images/heidegger.jpg)\n\n截图：Martin Heidegger\n\n**海德格尔：技术是存在的揭蔽（Reveal）**\n\n在《技术的追问》中，海德格尔并未止步于将技术定义为简单的工具，而是深入探讨了技术的本质（essence）。他指出，技术的核心在于**揭示（bringing forth）真相，使隐匿的存在显现**。在此框架下，他区分了古代技术与现代技术的不同特性：\n\n1. **古代技术：与自然共舞的揭蔽（Bring-Forth）**\n\n   - 古代技术尊重自然，通过风车利用风力、农耕借助土地生产作物，是一种“带出”（bring-forth）真相的方式。它揭示了人与自然的关系，是一种顺应自然的技术形态。\n\n2. **现代技术：挑战性的揭蔽（Challenging-Forth）**\n\n   - 现代技术不再是顺应自然，而是对自然施加压力，强行索取资源。它通过解锁（unlock）、转换（transform）、存储（store）和分发（distribute）能量，把自然视为可被提取和消耗的“资源池”，使其变成单一、可控的“持存物”（standing-reserve）。例如，工厂化养殖、工业能源提取，皆是将自然转化为满足人类需求的可消耗单元。\n\n3. **现代技术的危险**\n\n   - 海德格尔警示，现代技术的真正威胁在于，它不仅改变了自然的面貌，更改变了人类认知世界的方式。所有事物在技术框架下都被简化为可计算、可存储、可调用的“备用物”，使人类逐渐失去对世界本源的理解。这种技术主导的思维方式，可能使人类沦为技术体系中的一环，而非世界的真正主体。\n\n4. **如何克服技术的危险**\n\n   海德格尔认为，若能回归与自然和谐共存的方式，人类或许能避免被现代技术异化，重新找回技术与存在的平衡。古希腊的 techne（技艺）和poiesis（创造）是人类化解危险的方法。\n\n   - *Techne* 是对自然的深刻理解，如木匠顺应木材的纹理进行加工，而非强行改造。\n   - *Poiesis* 则强调创造力，如雕塑家将原本普通的石块雕琢成艺术品，使隐藏的美展现于世。\n\n![图片](https://relevantstudy.github.io/images/question-concerning_technology-paper.png)\n\n截图：Martin Heidegger 技术的追问文章\n\n**AI 技术的本质：人性的揭蔽**\n\n《技术的追问》发表于 1953 年。彼时，人类经历了广岛、长崎的核爆不久，对技术带来的震撼远不亚于我们今日面对 AI 的突飞猛进。当时人们对技术的恐惧，与我们对 AI 对人类前景的影响之忧，不无相似之处。\n\n然而，AI 技术已经超越了海德格尔所描述的现代技术。它不仅仅是能量的转换，而是具备知识、能够学习、善于推理的智能体。这种转变，使 AI 所带来的风险不再局限于资源索取，而是对**人类存在本身的挑战**。\n\n不过，我们还是可以借海德格尔的框架，将现代技术的概念替换成AI技术，将自然的概念替换成人性，试着解构AI技术的本质和相关问题：\n\n![图片](https://relevantstudy.github.io/images/roadmap-of-revealing.png)\n\n图：技术发展，其对存在揭蔽的本质不变，但方法却有阶段性特点\n\n1. 当前，**AI 技术是人性的揭示**\n   - 现阶段的 AI，如 ChatGPT 和 DeepSeek，正处于**“带出”（Bring Forth）人性真相**的阶段。它通过学习和模拟人类的语言、行为模式，增强了人类思维的逻辑、情感的表达，使我们对自身有了更深刻的认知。\n2. **更危险的阶段：挑战人性的揭示**\n   - 未来，当 AI 进入**“挑战”（Challenge Forth）人性真相**的阶段，它将不仅仅是揭示人类思维方式，而是能够揭示人性更底层的真相，从而具备了Engineering Humanity的能力。这将使 AI 拥有比人类更强的判断力、创造力，自主设定目标的能力。它是否会颠覆人类的主体性？人类是否还能维持自身在世界中的主导地位？\n3. **如何应对 AI 技术的挑战**\n   - 回归人性，或许是应对 AI 风险的关键。就像海德格尔提倡的 *techne* 和 *poiesis* 一样，我们需要创造一种**能回应人性的技术框架**，确保 AI 在发展过程中不只是简单地优化效率，而是以促进人类价值为核心。\n\n**感悟**\n\nAI不是第一个人类创造毁灭自己的技术，原子弹早就可以做到了。但在世界末日的巨大阴影之下，人类又已经生存和快速发展了近百年。整体态势欣欣向荣。所以，技术的危险性并非源于技术本身，而在于人类如何回应其揭示的真相。\n\n不难预见，AI将带来的挑战更大。海德格尔的理论无法解答AI技术发展所带来的人类未来命运的问题。不过，既然AI技术的本质也是对真相的解蔽，那就让我们用它认清人性的真相，把它用在彰显人性美好和让人性更加美好的地方。\n\n本文浅尝辄止，抛砖引玉。\n\n部分参考资料：\n\n- https://en.wikipedia.org/wiki/Martin_Heidegger\n- Heidegger's \"The Question Concerning Technology\"，a lecture. https://www.youtube.com/watch?v=nRp5lzP5L80\n- The Question Concerning Technology, the paper. https://www2.hawaii.edu/~freeman/courses/phil394/The%20Question%20Concerning%20Technology.pdf","src/content/blog/ai-is-a-way-of-reveal-humanity.md","4e980a2d235b20a1",{html:28,metadata:29},"<p><strong>从 GPT-3 助手到 DeepSeek 顾问，再到未来的 AI 超人</strong></p>\n<p>DeepSeek 的问世震撼全球。天下苦昂贵算力久已、苦技术垄断久已、苦闭源 AI久已。而DeepSeek 横空出世，无疑打破了这些桎梏。</p>\n<p>我们同样为此兴奋，却更感迷茫。对我们而言，最具冲击力的并非技术本身，而是亲身体验到 DeepSeek 的“深度思考”能力。R1 模型那成竹在胸、不急不徐、井井有条的推理能力。这不仅意味着我们不再需要用繁琐的提示工程去引导 AI 进行逻辑推演，更重要的是，AI能够深入理解用户意图，提供内容丰富、结构完整的答案。这一突破，使 AI 从曾经的“助手”（Assistant）跃升为“高级顾问”（Consultant），其学识、思辨能力，甚至经验积累，已然超越人类。</p>\n<p>可以预见，AI 的发展不会止步于此。顾问之后，是否会进化为“超人”？</p>\n<p>带着这些疑问，我们向 DeepSeek 提出关于 AI 与人性的关系问题。它在 18 秒的深度思考后，生成了一篇内容酷炫的文章。尽管 生成AI的旁征博引和华丽文采已不再让人感到那么新鲜，但其中有一句话让人眼前一亮：“站在人机共生的门槛上，我们需要重新理解海德格尔提出的‘技术是存在的揭蔽’之深意。” 于是，我们开始研究哲学家马丁·海德格尔（Martin Heidegger）及其代表性论述《技术的追问》（<em>The Question Concerning Technology</em>）。</p>\n<p><img src=\"https://relevantstudy.github.io/images/heidegger.jpg\" alt=\"图片\"></p>\n<p>截图：Martin Heidegger</p>\n<p><strong>海德格尔：技术是存在的揭蔽（Reveal）</strong></p>\n<p>在《技术的追问》中，海德格尔并未止步于将技术定义为简单的工具，而是深入探讨了技术的本质（essence）。他指出，技术的核心在于<strong>揭示（bringing forth）真相，使隐匿的存在显现</strong>。在此框架下，他区分了古代技术与现代技术的不同特性：</p>\n<ol>\n<li>\n<p><strong>古代技术：与自然共舞的揭蔽（Bring-Forth）</strong></p>\n<ul>\n<li>古代技术尊重自然，通过风车利用风力、农耕借助土地生产作物，是一种“带出”（bring-forth）真相的方式。它揭示了人与自然的关系，是一种顺应自然的技术形态。</li>\n</ul>\n</li>\n<li>\n<p><strong>现代技术：挑战性的揭蔽（Challenging-Forth）</strong></p>\n<ul>\n<li>现代技术不再是顺应自然，而是对自然施加压力，强行索取资源。它通过解锁（unlock）、转换（transform）、存储（store）和分发（distribute）能量，把自然视为可被提取和消耗的“资源池”，使其变成单一、可控的“持存物”（standing-reserve）。例如，工厂化养殖、工业能源提取，皆是将自然转化为满足人类需求的可消耗单元。</li>\n</ul>\n</li>\n<li>\n<p><strong>现代技术的危险</strong></p>\n<ul>\n<li>海德格尔警示，现代技术的真正威胁在于，它不仅改变了自然的面貌，更改变了人类认知世界的方式。所有事物在技术框架下都被简化为可计算、可存储、可调用的“备用物”，使人类逐渐失去对世界本源的理解。这种技术主导的思维方式，可能使人类沦为技术体系中的一环，而非世界的真正主体。</li>\n</ul>\n</li>\n<li>\n<p><strong>如何克服技术的危险</strong></p>\n<p>海德格尔认为，若能回归与自然和谐共存的方式，人类或许能避免被现代技术异化，重新找回技术与存在的平衡。古希腊的 techne（技艺）和poiesis（创造）是人类化解危险的方法。</p>\n<ul>\n<li><em>Techne</em> 是对自然的深刻理解，如木匠顺应木材的纹理进行加工，而非强行改造。</li>\n<li><em>Poiesis</em> 则强调创造力，如雕塑家将原本普通的石块雕琢成艺术品，使隐藏的美展现于世。</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://relevantstudy.github.io/images/question-concerning_technology-paper.png\" alt=\"图片\"></p>\n<p>截图：Martin Heidegger 技术的追问文章</p>\n<p><strong>AI 技术的本质：人性的揭蔽</strong></p>\n<p>《技术的追问》发表于 1953 年。彼时，人类经历了广岛、长崎的核爆不久，对技术带来的震撼远不亚于我们今日面对 AI 的突飞猛进。当时人们对技术的恐惧，与我们对 AI 对人类前景的影响之忧，不无相似之处。</p>\n<p>然而，AI 技术已经超越了海德格尔所描述的现代技术。它不仅仅是能量的转换，而是具备知识、能够学习、善于推理的智能体。这种转变，使 AI 所带来的风险不再局限于资源索取，而是对<strong>人类存在本身的挑战</strong>。</p>\n<p>不过，我们还是可以借海德格尔的框架，将现代技术的概念替换成AI技术，将自然的概念替换成人性，试着解构AI技术的本质和相关问题：</p>\n<p><img src=\"https://relevantstudy.github.io/images/roadmap-of-revealing.png\" alt=\"图片\"></p>\n<p>图：技术发展，其对存在揭蔽的本质不变，但方法却有阶段性特点</p>\n<ol>\n<li>当前，<strong>AI 技术是人性的揭示</strong>\n<ul>\n<li>现阶段的 AI，如 ChatGPT 和 DeepSeek，正处于**“带出”（Bring Forth）人性真相**的阶段。它通过学习和模拟人类的语言、行为模式，增强了人类思维的逻辑、情感的表达，使我们对自身有了更深刻的认知。</li>\n</ul>\n</li>\n<li><strong>更危险的阶段：挑战人性的揭示</strong>\n<ul>\n<li>未来，当 AI 进入**“挑战”（Challenge Forth）人性真相**的阶段，它将不仅仅是揭示人类思维方式，而是能够揭示人性更底层的真相，从而具备了Engineering Humanity的能力。这将使 AI 拥有比人类更强的判断力、创造力，自主设定目标的能力。它是否会颠覆人类的主体性？人类是否还能维持自身在世界中的主导地位？</li>\n</ul>\n</li>\n<li><strong>如何应对 AI 技术的挑战</strong>\n<ul>\n<li>回归人性，或许是应对 AI 风险的关键。就像海德格尔提倡的 <em>techne</em> 和 <em>poiesis</em> 一样，我们需要创造一种<strong>能回应人性的技术框架</strong>，确保 AI 在发展过程中不只是简单地优化效率，而是以促进人类价值为核心。</li>\n</ul>\n</li>\n</ol>\n<p><strong>感悟</strong></p>\n<p>AI不是第一个人类创造毁灭自己的技术，原子弹早就可以做到了。但在世界末日的巨大阴影之下，人类又已经生存和快速发展了近百年。整体态势欣欣向荣。所以，技术的危险性并非源于技术本身，而在于人类如何回应其揭示的真相。</p>\n<p>不难预见，AI将带来的挑战更大。海德格尔的理论无法解答AI技术发展所带来的人类未来命运的问题。不过，既然AI技术的本质也是对真相的解蔽，那就让我们用它认清人性的真相，把它用在彰显人性美好和让人性更加美好的地方。</p>\n<p>本文浅尝辄止，抛砖引玉。</p>\n<p>部分参考资料：</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Martin_Heidegger\">https://en.wikipedia.org/wiki/Martin_Heidegger</a></li>\n<li>Heidegger’s “The Question Concerning Technology”，a lecture. <a href=\"https://www.youtube.com/watch?v=nRp5lzP5L80\">https://www.youtube.com/watch?v=nRp5lzP5L80</a></li>\n<li>The Question Concerning Technology, the paper. <a href=\"https://www2.hawaii.edu/~freeman/courses/phil394/The%20Question%20Concerning%20Technology.pdf\">https://www2.hawaii.edu/~freeman/courses/phil394/The%20Question%20Concerning%20Technology.pdf</a></li>\n</ul>",{headings:30,localImagePaths:31,remoteImagePaths:32,frontmatter:33,imagePaths:36},[],[],[],{title:14,description:15,date:34,author:17,tags:35},["Date","2025-02-16T00:00:00.000Z"],[19,20,21,22,23],[],"ai-is-a-way-of-reveal-humanity.md","call-for-bounty-developers",{id:38,data:40,body:51,filePath:52,digest:53,rendered:54,legacyId:80},{title:41,description:42,date:43,author:44,tags:45},"MoFA 魔法师召集令","开源智能体框架MoFA，邀你共建未来AI生态！",["Date","2025-02-11T00:00:00.000Z"],"MoFA Team",[46,47,48,49,50],"MoFA","开源项目","智能体","开发者招募","悬赏任务","你是否想过，用代码赋予AI真正的“生命力”？**MoFA（Multi-agent Open Framework for AI）** 正是一个面向未来的开源智能体协作框架，致力于让开发者轻松构建、连接和扩展智能体（Agent），打造超级AI工作流！\n\n### 🌟 **关于MoFA**\n\nMoFA由Moxin团队开源（[GitHub项目地址](https://github.com/mofa-org/mofa)），聚焦多智能体系统的开发与协作。它通过模块化设计、动态数据流和智能链接能力，让开发者像搭积木一样快速组合Agent，实现复杂任务自动化。无论是代码生成、实时搜索，还是智能规划，MoFA都能成为你的终极工具箱！\n\n### 🛠 **开发者任务：你的代码，定义AI的未来**\n\n我们急需热爱技术的你加入我们的“魔法师”团队，共同攻克以下方向（部分任务示例）：\n\n- **MoFA Agent开发**：构建可复用的智能体（如代码生成器、实时爬虫、数据分析Agent）。\n- **MoFA Hub**：一个管理成千上万的MoFA智能体的智能体库，以及浏览、查询和搜索工具。\n- **框架优化**：简化安装流程、设计全局变量管理、实现动态数据流。\n- **智能增强**：用大模型实现Agent自动化链接、参数推理与任务规划。\n- **搜索引擎升级**：开发深度网页抓取、多源结果融合、实时爬虫等核心模块。\n\n**任务模式**：基于“悬赏制”（Bounty Hunter），完成任务即赢奖励与技术荣誉！\n\n### 🎯 **谁能加入？**\n\n- 熟悉Python，了解以GitHub为核心的开源工具链。\n\n- 有智能体开发经验，了解AI Agent框架（如LangChain、Autogen），对多Agent协作感兴趣。\n\n- Dora-RS、MoFA等项目经验是加分项。\n\n- 热爱开源，渴望用代码推动AI技术边界！\n\n  \n\n### 📌 **如何参与？**\n\n1. **探索GitHub**：阅读[MoFA文档](https://github.com/mofa-org/mofa)，了解框架设计。\n2. **认领任务**：查看任务列表，或提交你的创意提案。与项目负责人确认任务的认领。\n3. **开发任务**：根据任务不同要求，通过独立工作或协作的方式完成任务。\n4. **提交成果**：通过Pull Request或指定平台提交代码，通过审核即可获得奖励！\n\n### 🌍 **为什么选择MoFA？**\n\n- **技术前沿**：与全球开发者共创下一代AI基础设施。\n- **社区赋能**：参与Hackathon、获得资深开源开发者指导、积累顶尖项目经验。\n- **无限可能**：你的代码将直接对世界开放，定义AI的未来！\n\n**立即行动，成为MoFA生态的奠基者！**\n🔗 **GitHub入口**：https://github.com/mofa-org/mofa\n📩 **联系团队**：提交Issue或邮件至[dev@moxin.org](mailto:dev@moxin.org)，标注【开发者招募】","src/content/blog/call-for-bounty-developers.md","061c7d44257a1473",{html:55,metadata:56},"<p>你是否想过，用代码赋予AI真正的“生命力”？<strong>MoFA（Multi-agent Open Framework for AI）</strong> 正是一个面向未来的开源智能体协作框架，致力于让开发者轻松构建、连接和扩展智能体（Agent），打造超级AI工作流！</p>\n<h3 id=\"-关于mofa\">🌟 <strong>关于MoFA</strong></h3>\n<p>MoFA由Moxin团队开源（<a href=\"https://github.com/mofa-org/mofa\">GitHub项目地址</a>），聚焦多智能体系统的开发与协作。它通过模块化设计、动态数据流和智能链接能力，让开发者像搭积木一样快速组合Agent，实现复杂任务自动化。无论是代码生成、实时搜索，还是智能规划，MoFA都能成为你的终极工具箱！</p>\n<h3 id=\"-开发者任务你的代码定义ai的未来\">🛠 <strong>开发者任务：你的代码，定义AI的未来</strong></h3>\n<p>我们急需热爱技术的你加入我们的“魔法师”团队，共同攻克以下方向（部分任务示例）：</p>\n<ul>\n<li><strong>MoFA Agent开发</strong>：构建可复用的智能体（如代码生成器、实时爬虫、数据分析Agent）。</li>\n<li><strong>MoFA Hub</strong>：一个管理成千上万的MoFA智能体的智能体库，以及浏览、查询和搜索工具。</li>\n<li><strong>框架优化</strong>：简化安装流程、设计全局变量管理、实现动态数据流。</li>\n<li><strong>智能增强</strong>：用大模型实现Agent自动化链接、参数推理与任务规划。</li>\n<li><strong>搜索引擎升级</strong>：开发深度网页抓取、多源结果融合、实时爬虫等核心模块。</li>\n</ul>\n<p><strong>任务模式</strong>：基于“悬赏制”（Bounty Hunter），完成任务即赢奖励与技术荣誉！</p>\n<h3 id=\"-谁能加入\">🎯 <strong>谁能加入？</strong></h3>\n<ul>\n<li>\n<p>熟悉Python，了解以GitHub为核心的开源工具链。</p>\n</li>\n<li>\n<p>有智能体开发经验，了解AI Agent框架（如LangChain、Autogen），对多Agent协作感兴趣。</p>\n</li>\n<li>\n<p>Dora-RS、MoFA等项目经验是加分项。</p>\n</li>\n<li>\n<p>热爱开源，渴望用代码推动AI技术边界！</p>\n</li>\n</ul>\n<h3 id=\"-如何参与\">📌 <strong>如何参与？</strong></h3>\n<ol>\n<li><strong>探索GitHub</strong>：阅读<a href=\"https://github.com/mofa-org/mofa\">MoFA文档</a>，了解框架设计。</li>\n<li><strong>认领任务</strong>：查看任务列表，或提交你的创意提案。与项目负责人确认任务的认领。</li>\n<li><strong>开发任务</strong>：根据任务不同要求，通过独立工作或协作的方式完成任务。</li>\n<li><strong>提交成果</strong>：通过Pull Request或指定平台提交代码，通过审核即可获得奖励！</li>\n</ol>\n<h3 id=\"-为什么选择mofa\">🌍 <strong>为什么选择MoFA？</strong></h3>\n<ul>\n<li><strong>技术前沿</strong>：与全球开发者共创下一代AI基础设施。</li>\n<li><strong>社区赋能</strong>：参与Hackathon、获得资深开源开发者指导、积累顶尖项目经验。</li>\n<li><strong>无限可能</strong>：你的代码将直接对世界开放，定义AI的未来！</li>\n</ul>\n<p><strong>立即行动，成为MoFA生态的奠基者！</strong>\n🔗 <strong>GitHub入口</strong>：<a href=\"https://github.com/mofa-org/mofa\">https://github.com/mofa-org/mofa</a>\n📩 <strong>联系团队</strong>：提交Issue或邮件至<a href=\"mailto:dev@moxin.org\">dev@moxin.org</a>，标注【开发者招募】</p>",{headings:57,localImagePaths:74,remoteImagePaths:75,frontmatter:76,imagePaths:79},[58,62,65,68,71],{depth:59,slug:60,text:61},3,"-关于mofa","🌟 关于MoFA",{depth:59,slug:63,text:64},"-开发者任务你的代码定义ai的未来","🛠 开发者任务：你的代码，定义AI的未来",{depth:59,slug:66,text:67},"-谁能加入","🎯 谁能加入？",{depth:59,slug:69,text:70},"-如何参与","📌 如何参与？",{depth:59,slug:72,text:73},"-为什么选择mofa","🌍 为什么选择MoFA？",[],[],{title:41,description:42,date:77,author:44,tags:78},["Date","2025-02-11T00:00:00.000Z"],[46,47,48,49,50],[],"call-for-bounty-developers.md","types-of-magicians",{id:81,data:83,body:92,filePath:93,digest:94,rendered:95,legacyId:129},{title:84,description:85,date:86,author:44,tags:87},"MoFA 赏金魔法师任务","如果您有兴趣体验我们的组合式AI开发，成为我们的赏金魔法师，可以考虑联系我们，做一下魔法师任务。",["Date","2025-02-12T00:00:00.000Z"],[46,88,89,90,91],"魔法师等级","赏金任务","智能体开发","开发者社区","我们诚挚邀请所有对智能体（AI Agents）感兴趣的开发者，一起来探索、建设和使用 MoFA开源项目，打造更强大的 智能体。\n\n在 MoFA 生态中，开发者拥有一个独特的称号：**“魔法师”**。\n\n但并不是每个人都能轻易成为魔法师。要想真正掌握 MoFA，你需要通过挑战，展现你的技术实力！你可以从简单的任务开始，逐步提升难度，最终成为驾驭 AI 智能体的高手。\n\n当您成为“魔法师”，则有机会完成赏金任务。\n\n------\n\n## **MoFA 魔法师成长之路**\n\n我们将 MoFA 开发者分为四个等级，每一级都代表着更深的理解与更强的技术能力。你会在哪个阶段加入？又会如何进阶？\n\n### 🔹 **初级魔法师（Beginner Magician）**\n\n> **适合初学者，理解 MoFA 基础架构，完成简单代理任务**\n\n- 任务示例：\n  - **问候代理**：开发一个简单的 MoFA Agent，让它自动翻译用户的输入为英文。\n  - **天气查询代理**：输入城市名称，返回该城市的天气情况。\n\n------\n\n### 🔹 **中级魔法师（Intermediate Magician）**\n\n> **掌握 MoFA 组件，构建较复杂的智能系统**\n\n- 任务示例：\n  - **视频总结系统**：创建一个 AI Agent，能自动总结 20 分钟内的视频核心内容。\n  - **智能客服系统**：搭建一个多代理协作的客服系统，包括问题分类、自动回复、情感分析、人工客服转接等功能。\n\n------\n\n### 🔹 **高级魔法师（Advanced Magician）**\n\n> **深入 智能体架构，整合外部数据源，打造高复杂度项目**\n\n- 任务示例：\n  - **社交媒体分析系统**：抓取社交平台内容，分析情感趋势、热点话题，并提供可视化数据。\n  - **知识图谱生成查询系统**：从书籍或文本中提取实体、关系，构建可查询的知识图谱，并支持自然语言查询。\n\n------\n\n### 🔹 **创新型魔法师（Visionary Magician）**\n\n> **不仅是开发者，更是 MoFA 生态的设计者**\n\n- 提出有价值的 MoFA 项目建议和改进方案，比如：\n  - 让 MoFA 成为世界级的开源 AI Agent 框架，如何优化开发体验？\n  - 如何构建 MoFA 的插件生态，扩展其应用场景？\n  - 提供更高效的 智能体训练方法，提高模型性能。\n\n------\n\n我么们也寻找一类魔法师加入我们：\n\n### 🔹 **大本营魔法师（BaseCamp Magician）**\n\n> **专注于 MoFA 代码仓建设，优化开发者体验**\n\n- 任务示例：\n  - **MoFA 安装优化**：改进安装流程，让新开发者更快上手。\n  - **脚手架工具**：设计 MoFA Agent 的代码模板，减少重复工作，提高开发效率。\n  - **CI/CD 流程**：提升 MoFA 的持续集成和自动化部署能力。\n  - **单元测试（Unit Testing）**：为 MoFA 关键功能编写测试，提高代码可靠性。\n\n------\n\n## **你准备好成为魔法师了吗？**\n\nMoFA 不仅是一个 智能体框架，更是一个充满创造力和挑战的开发者社区。无论你是 AI 新手还是资深工程师，都可以找到适合自己的任务，挑战自我，贡献开源，一起把 MoFA 打造成世界级的 AI Agent 生态！\n\n**💡 立即加入 MoFA，成为 MoFA 魔法师，施展你的智能体魔法！获取赏金**\n\n请联系 @阿图教育微信号 rustedu\n![barcode](https://relevantstudy.github.io/images/a-tu-bar-code.jpg)\n\n##","src/content/blog/types-of-magicians.md","893d1535f8935df7",{html:96,metadata:97},"<p>我们诚挚邀请所有对智能体（AI Agents）感兴趣的开发者，一起来探索、建设和使用 MoFA开源项目，打造更强大的 智能体。</p>\n<p>在 MoFA 生态中，开发者拥有一个独特的称号：<strong>“魔法师”</strong>。</p>\n<p>但并不是每个人都能轻易成为魔法师。要想真正掌握 MoFA，你需要通过挑战，展现你的技术实力！你可以从简单的任务开始，逐步提升难度，最终成为驾驭 AI 智能体的高手。</p>\n<p>当您成为“魔法师”，则有机会完成赏金任务。</p>\n<hr>\n<h2 id=\"mofa-魔法师成长之路\"><strong>MoFA 魔法师成长之路</strong></h2>\n<p>我们将 MoFA 开发者分为四个等级，每一级都代表着更深的理解与更强的技术能力。你会在哪个阶段加入？又会如何进阶？</p>\n<h3 id=\"-初级魔法师beginner-magician\">🔹 <strong>初级魔法师（Beginner Magician）</strong></h3>\n<blockquote>\n<p><strong>适合初学者，理解 MoFA 基础架构，完成简单代理任务</strong></p>\n</blockquote>\n<ul>\n<li>任务示例：\n<ul>\n<li><strong>问候代理</strong>：开发一个简单的 MoFA Agent，让它自动翻译用户的输入为英文。</li>\n<li><strong>天气查询代理</strong>：输入城市名称，返回该城市的天气情况。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"-中级魔法师intermediate-magician\">🔹 <strong>中级魔法师（Intermediate Magician）</strong></h3>\n<blockquote>\n<p><strong>掌握 MoFA 组件，构建较复杂的智能系统</strong></p>\n</blockquote>\n<ul>\n<li>任务示例：\n<ul>\n<li><strong>视频总结系统</strong>：创建一个 AI Agent，能自动总结 20 分钟内的视频核心内容。</li>\n<li><strong>智能客服系统</strong>：搭建一个多代理协作的客服系统，包括问题分类、自动回复、情感分析、人工客服转接等功能。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"-高级魔法师advanced-magician\">🔹 <strong>高级魔法师（Advanced Magician）</strong></h3>\n<blockquote>\n<p><strong>深入 智能体架构，整合外部数据源，打造高复杂度项目</strong></p>\n</blockquote>\n<ul>\n<li>任务示例：\n<ul>\n<li><strong>社交媒体分析系统</strong>：抓取社交平台内容，分析情感趋势、热点话题，并提供可视化数据。</li>\n<li><strong>知识图谱生成查询系统</strong>：从书籍或文本中提取实体、关系，构建可查询的知识图谱，并支持自然语言查询。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"-创新型魔法师visionary-magician\">🔹 <strong>创新型魔法师（Visionary Magician）</strong></h3>\n<blockquote>\n<p><strong>不仅是开发者，更是 MoFA 生态的设计者</strong></p>\n</blockquote>\n<ul>\n<li>提出有价值的 MoFA 项目建议和改进方案，比如：\n<ul>\n<li>让 MoFA 成为世界级的开源 AI Agent 框架，如何优化开发体验？</li>\n<li>如何构建 MoFA 的插件生态，扩展其应用场景？</li>\n<li>提供更高效的 智能体训练方法，提高模型性能。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>我么们也寻找一类魔法师加入我们：</p>\n<h3 id=\"-大本营魔法师basecamp-magician\">🔹 <strong>大本营魔法师（BaseCamp Magician）</strong></h3>\n<blockquote>\n<p><strong>专注于 MoFA 代码仓建设，优化开发者体验</strong></p>\n</blockquote>\n<ul>\n<li>任务示例：\n<ul>\n<li><strong>MoFA 安装优化</strong>：改进安装流程，让新开发者更快上手。</li>\n<li><strong>脚手架工具</strong>：设计 MoFA Agent 的代码模板，减少重复工作，提高开发效率。</li>\n<li><strong>CI/CD 流程</strong>：提升 MoFA 的持续集成和自动化部署能力。</li>\n<li><strong>单元测试（Unit Testing）</strong>：为 MoFA 关键功能编写测试，提高代码可靠性。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"你准备好成为魔法师了吗\"><strong>你准备好成为魔法师了吗？</strong></h2>\n<p>MoFA 不仅是一个 智能体框架，更是一个充满创造力和挑战的开发者社区。无论你是 AI 新手还是资深工程师，都可以找到适合自己的任务，挑战自我，贡献开源，一起把 MoFA 打造成世界级的 AI Agent 生态！</p>\n<p><strong>💡 立即加入 MoFA，成为 MoFA 魔法师，施展你的智能体魔法！获取赏金</strong></p>\n<p>请联系 @阿图教育微信号 rustedu\n<img src=\"https://relevantstudy.github.io/images/a-tu-bar-code.jpg\" alt=\"barcode\"></p>\n<h2 id=\"\"></h2>",{headings:98,localImagePaths:123,remoteImagePaths:124,frontmatter:125,imagePaths:128},[99,103,106,109,112,115,118,121],{depth:100,slug:101,text:102},2,"mofa-魔法师成长之路","MoFA 魔法师成长之路",{depth:59,slug:104,text:105},"-初级魔法师beginner-magician","🔹 初级魔法师（Beginner Magician）",{depth:59,slug:107,text:108},"-中级魔法师intermediate-magician","🔹 中级魔法师（Intermediate Magician）",{depth:59,slug:110,text:111},"-高级魔法师advanced-magician","🔹 高级魔法师（Advanced Magician）",{depth:59,slug:113,text:114},"-创新型魔法师visionary-magician","🔹 创新型魔法师（Visionary Magician）",{depth:59,slug:116,text:117},"-大本营魔法师basecamp-magician","🔹 大本营魔法师（BaseCamp Magician）",{depth:100,slug:119,text:120},"你准备好成为魔法师了吗","你准备好成为魔法师了吗？",{depth:100,slug:122,text:122},"",[],[],{title:84,description:85,date:126,author:44,tags:127},["Date","2025-02-12T00:00:00.000Z"],[46,88,89,90,91],[],"types-of-magicians.md","mofa-stage-tasks",{id:130,data:132,body:140,filePath:141,digest:142,rendered:143,legacyId:186},{title:133,description:134,date:135,author:136,tags:137},"MoFA 阶段性规划","MoFA Stage下一阶段的开发任务及其赏金优先级划分。",["Date","2025-07-02T00:00:00.000Z"],"Li Yao",[46,138,50,139],"开发任务","功能规划","##  **AI Native**\n\n### 1. **智能代码助手（类Copilot）**\n```bash\n# 基于Monaco编辑器扩展\nfrontend/src/components/editor/\n├── AIAssistant.vue            # AI助手组件\n├── CodeSuggestion.vue         # 代码建议\n├── SmartRefactor.vue          # 智能重构\n└── ContextMenu.vue            # 右键智能菜单\n```\n**功能**: \n- 划选代码 → AI解释/优化建议\n- 自然语言 → 代码生成\n- 智能import和依赖管理\n\n**优先级**: High\n\n\n### 2. **Intelligent Linking**\n```bash\n# 基于现有DataflowGenerator扩展\n# 现在只支持Flow的自动生成，或许也可以加上Node的自动生成\nfrontend/src/components/ai/\n├── NLConfigGenerator.vue      # 自然语言配置\n├── ConfigValidator.vue        # 配置验证\n└── SmartConfigSuggest.vue     # 智能配置建议\n```\n**功能**: \"我想要一个能够处理PDF文档的智能体\" → 自动生成配置\n\n**优先级**: 先由李尧继续做，后面进一步明确了功能并且解藕为dataflow后，再交给赏金，避免反复对齐反复修改的扯皮。所以暂定为Low。\n\n##  **监控和调试**\n\n### 3. **调试和测试工具**\n```bash\n# 新增调试模块\nfrontend/src/views/Debug/\n├── AgentDebugger.vue         # Agent调试器\n├── DataflowTracer.vue        # 数据流追踪\n└── TestRunner.vue            # 测试运行器\n```\n\n**优先级**: High\n\n\n### 4. **智能日志分析**\n```bash\n# 优化和扩展现有日志功能\nbackend/analytics/\n├── log_parser.py              # 日志解析\n├── anomaly_detector.py        # 异常检测\n└── insights_generator.py      # 洞察生成\n```\n\n**功能**: AI驱动的日志分析和问题诊断\n\n**优先级**: Medium or High？\n\n\n\n### 5. **运行状态监控面板**\n```bash\n# 新增\nfrontend/src/views/Monitoring/\n├── PerformanceDashboard.vue   # 性能仪表盘\n└── ResourceUsage.vue          # 资源使用情况\n```\n\n**优先级**: Low or Medium？\n\n##  **其它**\n\n### 6. **基于nodehub和flowhub，做一个友好的\"商店\"**\n```bash\n# 新增市场模块\nfrontend/src/views/Marketplace/\n├── AgentMarket.vue           # Agent市场\n├── AgentDetails.vue          # Agent详情页\n└── Reviews.vue               # 评价系统\n```\n**优先级**: Low\n\n##  **云部署和基础设施**\n\n### 7. **SaaS化改造**\n```bash\n# 扩展现有\nbackend/routes/organizations.py  # 组织管理\nbackend/routes/users.py         # 用户权限\nfrontend/src/views/Dashboard.vue # 多用户仪表盘\n```\n\n**优先级**: Low\n\n\n### 8. **云部署方案**\n```bash\n# 新增\ndeploy/\n├── kubernetes/                 # K8s部署配置\n├── terraform/                  # 云资源管理\n└── scripts/cloud-deploy.sh     # 一键部署脚本\n```\n**功能**: 支持AWS/Google等主流平台的一键部署\n\n**优先级**: Low","src/content/blog/mofa-stage-tasks.md","1023517551206837",{html:144,metadata:145},"<h2 id=\"ai-native\"><strong>AI Native</strong></h2>\n<h3 id=\"1-智能代码助手类copilot\">1. <strong>智能代码助手（类Copilot）</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 基于Monaco编辑器扩展</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">frontend/src/components/editor/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> AIAssistant.vue</span><span style=\"color:#6A737D\">            # AI助手组件</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> CodeSuggestion.vue</span><span style=\"color:#6A737D\">         # 代码建议</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> SmartRefactor.vue</span><span style=\"color:#6A737D\">          # 智能重构</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> ContextMenu.vue</span><span style=\"color:#6A737D\">            # 右键智能菜单</span></span></code></pre>\n<p><strong>功能</strong>:</p>\n<ul>\n<li>划选代码 → AI解释/优化建议</li>\n<li>自然语言 → 代码生成</li>\n<li>智能import和依赖管理</li>\n</ul>\n<p><strong>优先级</strong>: High</p>\n<h3 id=\"2-intelligent-linking\">2. <strong>Intelligent Linking</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 基于现有DataflowGenerator扩展</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 现在只支持Flow的自动生成，或许也可以加上Node的自动生成</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">frontend/src/components/ai/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> NLConfigGenerator.vue</span><span style=\"color:#6A737D\">      # 自然语言配置</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> ConfigValidator.vue</span><span style=\"color:#6A737D\">        # 配置验证</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> SmartConfigSuggest.vue</span><span style=\"color:#6A737D\">     # 智能配置建议</span></span></code></pre>\n<p><strong>功能</strong>: “我想要一个能够处理PDF文档的智能体” → 自动生成配置</p>\n<p><strong>优先级</strong>: 先由李尧继续做，后面进一步明确了功能并且解藕为dataflow后，再交给赏金，避免反复对齐反复修改的扯皮。所以暂定为Low。</p>\n<h2 id=\"监控和调试\"><strong>监控和调试</strong></h2>\n<h3 id=\"3-调试和测试工具\">3. <strong>调试和测试工具</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 新增调试模块</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">frontend/src/views/Debug/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> AgentDebugger.vue</span><span style=\"color:#6A737D\">         # Agent调试器</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> DataflowTracer.vue</span><span style=\"color:#6A737D\">        # 数据流追踪</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> TestRunner.vue</span><span style=\"color:#6A737D\">            # 测试运行器</span></span></code></pre>\n<p><strong>优先级</strong>: High</p>\n<h3 id=\"4-智能日志分析\">4. <strong>智能日志分析</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 优化和扩展现有日志功能</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">backend/analytics/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> log_parser.py</span><span style=\"color:#6A737D\">              # 日志解析</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> anomaly_detector.py</span><span style=\"color:#6A737D\">        # 异常检测</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> insights_generator.py</span><span style=\"color:#6A737D\">      # 洞察生成</span></span></code></pre>\n<p><strong>功能</strong>: AI驱动的日志分析和问题诊断</p>\n<p><strong>优先级</strong>: Medium or High？</p>\n<h3 id=\"5-运行状态监控面板\">5. <strong>运行状态监控面板</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 新增</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">frontend/src/views/Monitoring/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> PerformanceDashboard.vue</span><span style=\"color:#6A737D\">   # 性能仪表盘</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> ResourceUsage.vue</span><span style=\"color:#6A737D\">          # 资源使用情况</span></span></code></pre>\n<p><strong>优先级</strong>: Low or Medium？</p>\n<h2 id=\"其它\"><strong>其它</strong></h2>\n<h3 id=\"6-基于nodehub和flowhub做一个友好的商店\">6. <strong>基于nodehub和flowhub，做一个友好的”商店”</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 新增市场模块</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">frontend/src/views/Marketplace/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> AgentMarket.vue</span><span style=\"color:#6A737D\">           # Agent市场</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> AgentDetails.vue</span><span style=\"color:#6A737D\">          # Agent详情页</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> Reviews.vue</span><span style=\"color:#6A737D\">               # 评价系统</span></span></code></pre>\n<p><strong>优先级</strong>: Low</p>\n<h2 id=\"云部署和基础设施\"><strong>云部署和基础设施</strong></h2>\n<h3 id=\"7-saas化改造\">7. <strong>SaaS化改造</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 扩展现有</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">backend/routes/organizations.py</span><span style=\"color:#6A737D\">  # 组织管理</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">backend/routes/users.py</span><span style=\"color:#6A737D\">         # 用户权限</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">frontend/src/views/Dashboard.vue</span><span style=\"color:#6A737D\"> # 多用户仪表盘</span></span></code></pre>\n<p><strong>优先级</strong>: Low</p>\n<h3 id=\"8-云部署方案\">8. <strong>云部署方案</strong></h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 新增</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">deploy/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> kubernetes/</span><span style=\"color:#6A737D\">                 # K8s部署配置</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> terraform/</span><span style=\"color:#6A737D\">                  # 云资源管理</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> scripts/cloud-deploy.sh</span><span style=\"color:#6A737D\">     # 一键部署脚本</span></span></code></pre>\n<p><strong>功能</strong>: 支持AWS/Google等主流平台的一键部署</p>\n<p><strong>优先级</strong>: Low</p>",{headings:146,localImagePaths:180,remoteImagePaths:181,frontmatter:182,imagePaths:185},[147,150,153,156,158,161,164,167,169,172,174,177],{depth:100,slug:148,text:149},"ai-native","AI Native",{depth:59,slug:151,text:152},"1-智能代码助手类copilot","1. 智能代码助手（类Copilot）",{depth:59,slug:154,text:155},"2-intelligent-linking","2. Intelligent Linking",{depth:100,slug:157,text:157},"监控和调试",{depth:59,slug:159,text:160},"3-调试和测试工具","3. 调试和测试工具",{depth:59,slug:162,text:163},"4-智能日志分析","4. 智能日志分析",{depth:59,slug:165,text:166},"5-运行状态监控面板","5. 运行状态监控面板",{depth:100,slug:168,text:168},"其它",{depth:59,slug:170,text:171},"6-基于nodehub和flowhub做一个友好的商店","6. 基于nodehub和flowhub，做一个友好的”商店”",{depth:100,slug:173,text:173},"云部署和基础设施",{depth:59,slug:175,text:176},"7-saas化改造","7. SaaS化改造",{depth:59,slug:178,text:179},"8-云部署方案","8. 云部署方案",[],[],{title:133,description:134,date:183,author:136,tags:184},["Date","2025-07-02T00:00:00.000Z"],[46,138,50,139],[],"mofa-stage-tasks.md","introducing-mofa",{id:187,data:189,body:198,filePath:199,digest:200,rendered:201,legacyId:260},{title:190,description:191,date:192,author:44,tags:193},"MoFA 开发框架：组合式 AI 智能体构建平台","MoFA 是一个以组合的方式构建 AI 智能体的软件框架，让平凡人也能创造非凡的 AI 应用",["Date","2025-06-09T00:00:00.000Z"],[194,195,196,48,197],"架构","AI框架","Dora-RS","组合式AI","MoFA（**M**odular **F**ramework for **A**gent）是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent）。\n\n## 🎯 设计理念\n\nMoFA 独特的设计理念是：\n\n- **平凡人做非凡事**：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。\n\n- **Composition AI**：受 Unix 哲学启发，MoFA 以\"组合\"作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。\n\n- **Everything Agent**：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。\n\n- **Data Flow**：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用。\n\n## 🏗️ 技术架构\n\n<img src=\"https://github.com/RelevantStudy/mofasearch/blob/main/hackathons/docs/images/image-20250310010710778.png\" alt=\"MoFA技术架构图\" style=\"zoom:67%;\" />\n\nMoFA 与 Dora-RS 形成分层架构，构成从底层通信到上层智能体的技术栈：\n\n```\n┌─────────────────────────────────────┐\n│           MoFA 层                   │  ← AI智能体开发框架\n│  智能体模板 + 组合逻辑 + 核心服务    │     (Python为主)\n├─────────────────────────────────────┤\n│           Dora 层                   │  ← 数据流引擎  \n│  实时通信 + 跨语言 + 运行时管理     │     (Rust核心)\n└─────────────────────────────────────┘\n```\n\n## 🚀 快速开始\n\n### 环境准备\n\n#### Python 环境\n```bash\n# 安装 UV 包管理器加速 mofa 安装\npip install uv\n```\n\n**注意事项**：\n- 本地python环境要纯净，不要多个python版本，否则容易导致Dora-rs运行环境和Mofa安装环境的冲突\n- 如果使用 Anaconda/Miniconda，务必将 Mofa 安装到 `Base` 环境下\n- 要求 python 环境 >= 3.10\n- 目前已在 WSL（Ubuntu 22.04）和 macOS 上测试，Windows 暂不支持\n\n#### Rust 环境\n```bash\n# 安装 Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# 安装 Dora 运行时\ncargo install dora-cli\n\n# 验证安装\ndora --version\n```\n\n### 安装 MoFA\n\n```bash\n# 克隆仓库\ngit clone https://github.com/mofa-org/mofa.git\ncd mofa/python\n\n# 安装依赖\nuv pip install -e . && pip install -e . \n```\n\n### Hello World 示例\n\n```bash\ncd mofa/python/examples/hello_world\n\n# 启动 Dora 服务\ndora up\n\n# 构建并运行数据流\ndora build hello_world_dataflow.yml\ndora start hello_world_dataflow.yml\n\n# 在另一个终端测试\nterminal-input\n> hello\n# 输出: hello\n```\n\n## 💡 5分钟创建第一个应用\n\n### 1. 创建 Agent 项目\n```bash\nmofa new-agent my-llm-agent\ncd my-llm-agent\n```\n\n### 2. 配置环境变量\n创建 `.env.secret` 文件：\n```plaintext\nLLM_API_KEY=your_api_key_here\nLLM_API_BASE=https://api.openai.com/v1\nLLM_MODEL=gpt-3.5-turbo\n```\n\n### 3. 实现 Agent 逻辑\n编辑 `my_llm_agent/main.py`：\n```python\nfrom mofa.agent_build.base.base_agent import MofaAgent, run_agent\nfrom openai import OpenAI\nimport os\nfrom dotenv import load_dotenv\n\n@run_agent\ndef run(agent: MofaAgent):\n    try:\n        load_dotenv('.env.secret')\n        \n        client = OpenAI(\n            api_key=os.getenv('LLM_API_KEY'),\n            base_url=os.getenv('LLM_API_BASE')\n        )\n        \n        user_input = agent.receive_parameter('query')\n        \n        response = client.chat.completions.create(\n            model=os.getenv('LLM_MODEL', 'gpt-3.5-turbo'),\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful AI assistant.\"},\n                {\"role\": \"user\", \"content\": user_input}\n            ]\n        )\n        \n        agent.send_output(\n            agent_output_name='llm_result',\n            agent_result=response.choices[0].message.content\n        )\n        \n    except Exception as e:\n        agent.logger.error(f\"Error: {str(e)}\")\n        agent.send_output('llm_result', f\"Error: {str(e)}\")\n\ndef main():\n    agent = MofaAgent(agent_name='my-llm-agent')\n    run(agent=agent)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### 4. 创建数据流配置\n创建 `my_llm_dataflow.yml`：\n```yaml\nnodes:\n  - id: terminal-input\n    build: pip install -e ../../node-hub/terminal-input\n    path: dynamic\n    outputs: data\n    inputs:\n      agent_response: my-llm-agent/llm_result\n\n  - id: my-llm-agent\n    build: pip install -e . ../../agent-hub/my-llm-agent\n    path: my-llm-agent\n    outputs: llm_result\n    inputs:\n      query: terminal-input/data\n    env:\n      IS_DATAFLOW_END: true\n      WRITE_LOG: true\n```\n\n### 5. 运行和测试\n```bash\ndora up\ndora build my_llm_dataflow.yml\ndora start my_llm_dataflow.yml\n\n# 新开终端测试\nterminal-input\n> 你好，请介绍一下自己\n```\n\n## 🔧 构建自定义 Agent\n\n### 使用模板创建\n```bash\nmofa new-agent you_agent_name \n```\n\n### 核心代码示例\n```python\nfrom mofa.agent_build.base.base_agent import MofaAgent, run_agent\n\n@run_agent\ndef run(agent: MofaAgent):\n    try:\n        # 接收单个agent输入\n        task = agent.receive_parameter('task')\n        \n        # 接收多个agent输入\n        receive_datas = agent.receive_parameter(['example_one','example_two'])\n        # 结果类似于 {'example_one':'example_one_data','example_two':'example_two_data'}\n\n        # 处理逻辑 你可以把你的逻辑添加到这里\n        result = process_task(task)\n        \n        # 发送输出 确保你的输出是可以被序列化的对象(字符串等)\n        agent.send_output(\n            agent_output_name='agent_result',\n            agent_result=result\n        )\n        \n    except Exception as e:\n        agent.logger.error(f\"Error: {str(e)}\")\n        \n\ndef process_task(data: str) -> str:\n    \"\"\"示例处理函数\"\"\"\n    return f\"Processed: {data}\"\n\ndef main():\n    agent = MofaAgent(agent_name='my-new-agent')\n    run(agent=agent)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n立即开始您的智能体开发之旅！","src/content/blog/introducing-mofa.md","30c59d8c551a7780",{html:202,metadata:203},"<p>MoFA（<strong>M</strong>odular <strong>F</strong>ramework for <strong>A</strong>gent）是一个以组合的方式构建AI智能体的软件框架。使用MoFA，AI智能体可以通过模版方式构建，堆叠的方式组合，形成更强大的超级智能体（Super Agent）。</p>\n<h2 id=\"-设计理念\">🎯 设计理念</h2>\n<p>MoFA 独特的设计理念是：</p>\n<ul>\n<li>\n<p><strong>平凡人做非凡事</strong>：AI 不该是精英和巨头的专属领地。MoFA 让每个人都能驾驭和发展 AI，把不可能变成可能，让平凡人也能创造非凡。</p>\n</li>\n<li>\n<p><strong>Composition AI</strong>：受 Unix 哲学启发，MoFA 以”组合”作为核心原则。你可以像搭积木一样，构建智能体、连接智能体、集成工具，让 AI 变得简单、灵活、强大。</p>\n</li>\n<li>\n<p><strong>Everything Agent</strong>：与绝大多数软件不同，在 MoFA 的世界里，智能体（Agent）就是 AI 时代的应用（Application）。不仅是大语言模型，它可以是代码、脚本、API，甚至是 MoFA 本身。MoFA 不是一个框架，而是一个 Agent 生态。</p>\n</li>\n<li>\n<p><strong>Data Flow</strong>：大多数智能体框架依赖复杂的工作流（WorkFlow），而 MoFA 选择更直观、更强大的数据流（Data Flow）。这种方式让智能体能自由组合、拆解和重用。</p>\n</li>\n</ul>\n<h2 id=\"️-技术架构\">🏗️ 技术架构</h2>\n<img src=\"https://github.com/RelevantStudy/mofasearch/blob/main/hackathons/docs/images/image-20250310010710778.png\" alt=\"MoFA技术架构图\" style=\"zoom:67%;\">\n<p>MoFA 与 Dora-RS 形成分层架构，构成从底层通信到上层智能体的技术栈：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>┌─────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│           MoFA 层                   │  ← AI智能体开发框架</span></span>\n<span class=\"line\"><span>│  智能体模板 + 组合逻辑 + 核心服务    │     (Python为主)</span></span>\n<span class=\"line\"><span>├─────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│           Dora 层                   │  ← 数据流引擎  </span></span>\n<span class=\"line\"><span>│  实时通信 + 跨语言 + 运行时管理     │     (Rust核心)</span></span>\n<span class=\"line\"><span>└─────────────────────────────────────┘</span></span></code></pre>\n<h2 id=\"-快速开始\">🚀 快速开始</h2>\n<h3 id=\"环境准备\">环境准备</h3>\n<h4 id=\"python-环境\">Python 环境</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 安装 UV 包管理器加速 mofa 安装</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> uv</span></span></code></pre>\n<p><strong>注意事项</strong>：</p>\n<ul>\n<li>本地python环境要纯净，不要多个python版本，否则容易导致Dora-rs运行环境和Mofa安装环境的冲突</li>\n<li>如果使用 Anaconda/Miniconda，务必将 Mofa 安装到 <code>Base</code> 环境下</li>\n<li>要求 python 环境 >= 3.10</li>\n<li>目前已在 WSL（Ubuntu 22.04）和 macOS 上测试，Windows 暂不支持</li>\n</ul>\n<h4 id=\"rust-环境\">Rust 环境</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 安装 Rust</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> --proto</span><span style=\"color:#9ECBFF\"> '=https'</span><span style=\"color:#79B8FF\"> --tlsv1.2</span><span style=\"color:#79B8FF\"> -sSf</span><span style=\"color:#9ECBFF\"> https://sh.rustup.rs</span><span style=\"color:#F97583\"> |</span><span style=\"color:#B392F0\"> sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 安装 Dora 运行时</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> dora-cli</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 验证安装</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#79B8FF\"> --version</span></span></code></pre>\n<h3 id=\"安装-mofa\">安装 MoFA</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 克隆仓库</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/mofa-org/mofa.git</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> mofa/python</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 安装依赖</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">uv</span><span style=\"color:#9ECBFF\"> pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -e</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -e</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#E1E4E8\"> </span></span></code></pre>\n<h3 id=\"hello-world-示例\">Hello World 示例</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> mofa/python/examples/hello_world</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 启动 Dora 服务</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 构建并运行数据流</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> hello_world_dataflow.yml</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> hello_world_dataflow.yml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 在另一个终端测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> hello</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 输出: hello</span></span></code></pre>\n<h2 id=\"-5分钟创建第一个应用\">💡 5分钟创建第一个应用</h2>\n<h3 id=\"1-创建-agent-项目\">1. 创建 Agent 项目</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">mofa</span><span style=\"color:#9ECBFF\"> new-agent</span><span style=\"color:#9ECBFF\"> my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> my-llm-agent</span></span></code></pre>\n<h3 id=\"2-配置环境变量\">2. 配置环境变量</h3>\n<p>创建 <code>.env.secret</code> 文件：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>LLM_API_KEY=your_api_key_here</span></span>\n<span class=\"line\"><span>LLM_API_BASE=https://api.openai.com/v1</span></span>\n<span class=\"line\"><span>LLM_MODEL=gpt-3.5-turbo</span></span></code></pre>\n<h3 id=\"3-实现-agent-逻辑\">3. 实现 Agent 逻辑</h3>\n<p>编辑 <code>my_llm_agent/main.py</code>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> MofaAgent, run_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> openai </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> OpenAI</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> os</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> dotenv </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> load_dotenv</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">@run_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> run</span><span style=\"color:#E1E4E8\">(agent: MofaAgent):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    try</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        load_dotenv(</span><span style=\"color:#9ECBFF\">'.env.secret'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        client </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> OpenAI(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            api_key</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_API_KEY'</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            base_url</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_API_BASE'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        user_input </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> agent.receive_parameter(</span><span style=\"color:#9ECBFF\">'query'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> client.chat.completions.create(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            model</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_MODEL'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'gpt-3.5-turbo'</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            messages</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"system\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"You are a helpful AI assistant.\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: user_input}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            ]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_output_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'llm_result'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">response.choices[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].message.content</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    except</span><span style=\"color:#79B8FF\"> Exception</span><span style=\"color:#F97583\"> as</span><span style=\"color:#E1E4E8\"> e:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.logger.error(</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"Error: </span><span style=\"color:#79B8FF\">{str</span><span style=\"color:#E1E4E8\">(e)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span><span style=\"color:#9ECBFF\">'llm_result'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"Error: </span><span style=\"color:#79B8FF\">{str</span><span style=\"color:#E1E4E8\">(e)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">():</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> MofaAgent(</span><span style=\"color:#FFAB70\">agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'my-llm-agent'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    run(</span><span style=\"color:#FFAB70\">agent</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">agent)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#79B8FF\"> __name__</span><span style=\"color:#F97583\"> ==</span><span style=\"color:#9ECBFF\"> \"__main__\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    main()</span></span></code></pre>\n<h3 id=\"4-创建数据流配置\">4. 创建数据流配置</h3>\n<p>创建 <code>my_llm_dataflow.yml</code>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">nodes</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../node-hub/terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">dynamic</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      agent_response</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">my-llm-agent/llm_result</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e . ../../agent-hub/my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">my-llm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">llm_result</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      query</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input/data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    env</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      IS_DATAFLOW_END</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      WRITE_LOG</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span></code></pre>\n<h3 id=\"5-运行和测试\">5. 运行和测试</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> my_llm_dataflow.yml</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> my_llm_dataflow.yml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 新开终端测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> 你好，请介绍一下自己</span></span></code></pre>\n<h2 id=\"-构建自定义-agent\">🔧 构建自定义 Agent</h2>\n<h3 id=\"使用模板创建\">使用模板创建</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">mofa</span><span style=\"color:#9ECBFF\"> new-agent</span><span style=\"color:#9ECBFF\"> you_agent_name</span><span style=\"color:#E1E4E8\"> </span></span></code></pre>\n<h3 id=\"核心代码示例\">核心代码示例</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> MofaAgent, run_agent</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">@run_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> run</span><span style=\"color:#E1E4E8\">(agent: MofaAgent):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    try</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 接收单个agent输入</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        task </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> agent.receive_parameter(</span><span style=\"color:#9ECBFF\">'task'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 接收多个agent输入</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        receive_datas </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> agent.receive_parameter([</span><span style=\"color:#9ECBFF\">'example_one'</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#9ECBFF\">'example_two'</span><span style=\"color:#E1E4E8\">])</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 结果类似于 {'example_one':'example_one_data','example_two':'example_two_data'}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 处理逻辑 你可以把你的逻辑添加到这里</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        result </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> process_task(task)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        # 发送输出 确保你的输出是可以被序列化的对象(字符串等)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_output_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'agent_result'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">result</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    except</span><span style=\"color:#79B8FF\"> Exception</span><span style=\"color:#F97583\"> as</span><span style=\"color:#E1E4E8\"> e:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.logger.error(</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"Error: </span><span style=\"color:#79B8FF\">{str</span><span style=\"color:#E1E4E8\">(e)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> process_task</span><span style=\"color:#E1E4E8\">(data: </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">) -> </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"示例处理函数\"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#F97583\"> f</span><span style=\"color:#9ECBFF\">\"Processed: </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">data</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">():</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> MofaAgent(</span><span style=\"color:#FFAB70\">agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'my-new-agent'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    run(</span><span style=\"color:#FFAB70\">agent</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">agent)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#79B8FF\"> __name__</span><span style=\"color:#F97583\"> ==</span><span style=\"color:#9ECBFF\"> \"__main__\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    main()</span></span></code></pre>\n<hr>\n<p>立即开始您的智能体开发之旅！</p>",{headings:204,localImagePaths:254,remoteImagePaths:255,frontmatter:256,imagePaths:259},[205,208,211,214,216,220,223,226,229,232,235,238,241,244,247,250,252],{depth:100,slug:206,text:207},"-设计理念","🎯 设计理念",{depth:100,slug:209,text:210},"️-技术架构","🏗️ 技术架构",{depth:100,slug:212,text:213},"-快速开始","🚀 快速开始",{depth:59,slug:215,text:215},"环境准备",{depth:217,slug:218,text:219},4,"python-环境","Python 环境",{depth:217,slug:221,text:222},"rust-环境","Rust 环境",{depth:59,slug:224,text:225},"安装-mofa","安装 MoFA",{depth:59,slug:227,text:228},"hello-world-示例","Hello World 示例",{depth:100,slug:230,text:231},"-5分钟创建第一个应用","💡 5分钟创建第一个应用",{depth:59,slug:233,text:234},"1-创建-agent-项目","1. 创建 Agent 项目",{depth:59,slug:236,text:237},"2-配置环境变量","2. 配置环境变量",{depth:59,slug:239,text:240},"3-实现-agent-逻辑","3. 实现 Agent 逻辑",{depth:59,slug:242,text:243},"4-创建数据流配置","4. 创建数据流配置",{depth:59,slug:245,text:246},"5-运行和测试","5. 运行和测试",{depth:100,slug:248,text:249},"-构建自定义-agent","🔧 构建自定义 Agent",{depth:59,slug:251,text:251},"使用模板创建",{depth:59,slug:253,text:253},"核心代码示例",[],[],{title:190,description:191,date:257,author:44,tags:258},["Date","2025-06-09T00:00:00.000Z"],[194,195,196,48,197],[],"introducing-mofa.md","mofa-mobile-solution-plan",{id:261,data:263,body:274,filePath:275,digest:276,rendered:277,legacyId:325},{title:264,description:265,date:266,author:267,tags:268},"MoFA 移动端方案探索","分析 MoFA 智能体框架在移动端部署面临的技术挑战",["Date","2025-06-09T00:00:00.000Z"],"BH3GEI",[269,270,271,272,273],"移动端","架构设计","Termux","Android","技术方案","## 技术挑战\n\n### MoFA 的移动端应用场景与传统机器人控制的区别：\n\n**机器人控制场景特点**：\n- 低延迟的硬件通信（微秒级）\n- 大量传感器数据实时处理\n- Dora-RS 共享内存\n\n**移动端 AI Agent 场景特点**：\n- 逻辑推理和决策\n- 网络操作和屏幕交互为主\n- 对话和任务规划导向\n- 延迟容忍度相对较高（毫秒级即ok）\n\n### Dora-RS 的移植问题\n\n#### 一些问题：\n\n```rust\n// Dora 共享内存\nshared-memory-server (Dora自有) \n├── shared_memory_extended = \"0.13.0\"\n├── raw_sync_2 = \"0.1.5\" \n```\n\n1. **共享内存依赖**：Dora 依赖的 `shared_memory_extended` crate 在移动平台支持不完整\n2. **进程间通信机制**：移动操作系统 IPC 机制与桌面系统差异\n3. **ARM 架构适配**\n\n\n## 方案\n\n### 方案一：Termux + Root权限 完整移植（Demo阶段）\n\n#### 技术架构\n```\nAndroid Host\n├── Termux (完整Arch Linux 环境)\n│   ├── libandroid-shmem (共享内存)\n│   ├── Rust 工具链\n│   ├── Dora-RS 完整版\n│   └── MoFA 智能体框架\n└── Host Bridge App（参考Auto.JS）\n    ├── 屏幕截图 API\n    ├── 触摸注入 API\n    └── Socket 通信桥接\n```\n\n#### 分层验证计划\n\n**基础环境**\n```bash\n□ Termux 安装与 Root 权限获取\n□ 基础 Linux 命令可用性验证\n□ 网络连接和文件系统权限测试\npkg update && pkg install -y git curl wget\nsu -c \"whoami\"  # 验证 root 权限\n```\n\n**Rust 工具链**\n```bash\npkg install rust\nrustc --version && cargo --version\n```\n\n**共享内存**\n```bash\n# 内核支持检查\ncat /proc/version\nls -la /dev/shm\ngit clone https://github.com/termux/libandroid-shmem\ncd libandroid-shmem && make && make install\ngcc test/test.c -o test_shmem && ./test_shmem\n```\n\n**Dora**\n```bash\ngit clone https://github.com/dora-rs/dora\ncd dora\ncargo build --bin dora-daemon\ncargo build --bin dora-coordinator\n\n# 基础运行测试\n./target/debug/dora-daemon --help\n```\n\n\n\n**MoFA**\n```bash\npip install -e . #安装MoFA，具体省略\npython examples/hello_world/hello_world.py\n```\n\n#### Host-VM 桥接层设计\n\n**屏幕数据流**：\n```kotlin\n// Android Host 端，demo code，尚未实现\nclass ScreenBridge {\n    fun captureScreen(): ByteArray {\n        val mediaProjection = getMediaProjection()\n        val imageReader = ImageReader.newInstance(width, height, ImageFormat.JPEG, 1)\n        return compressedImageData\n    }\n    \n    fun sendToVM(data: ByteArray) {\n        socket.write(data) // 通过 Socket 发送到 VM\n    }\n}\n```\n\n**操作指令回传**：\n```python\n# VM 中的 MoFA Agent，demo code，尚未实现\nclass AndroidOperationNode:\n    def __init__(self):\n        self.bridge_socket = socket.connect(\"unix:///tmp/android_bridge\")\n    \n    def click(self, x: int, y: int):\n        command = {\"action\": \"click\", \"x\": x, \"y\": y}\n        self.bridge_socket.send(json.dumps(command))\n```\n\n### 方案二：原生 Android 重设计\n\n#### 新架构设计\n```\nAndroid Native MoFA\n├── Zenoh-Kotlin 通信层\n├── Agent Runtime (Kotlin/Java)\n├── 智能体模板系统 (简化版)\n├── Android Services\n│   ├── AccessibilityService (屏幕操作)\n│   ├── ScreenCapture (截图服务)\n│   └── ForegroundService (后台保活)\n└── Mobile Node Hub\n    ├── AutoJS 集成节点\n    ├── UI Automator 包装\n    ├── Intent 调用器\n    └── API 调用节点\n```\n\n\n\n## 前两个方案对比\n\n| 评估维度 | Termux + Linux | Native 重设计 | \n|---------|----------------|---------------|\n| **开发速度** | 🟢 快速复用现有代码 | 🔴 需要完全重写 |  \n| **运行性能** | 🔴 双层虚拟化开销 | 🟢 原生性能 | \n| **功能完整性** | 🟢 100% 兼容 | 🔴 功能受限 |  \n| **用户体验** | 🔴 安装极端复杂 | 🟢 原生体验 | \n| **维护成本** | 🟢 低维护 | 🔴 双重维护 |  \n\n\n### 进一步场景分析\n\n除非开发者有特殊需求，比如需要 agent 来操作移动端独占的某些 app（淘宝、微信等），但这个市场相对较小，而且容易偏离核心方向。\n\n认真来做的话，移动端方案还是挺费资源的。技术复杂度高，投入产出比不太理想。\n\n但后面可以尝试直接打包到容器，不做操作用户手机的操作，单纯去跑一些信息抓取、文档处理之类的 flow，还是可行的。\n\n### 方案三：容器化部署\n\n```\nContainer-based MoFA Mobile Stage\n├── Docker/Podman 容器\n│   ├── 完整 MoFA 环境\n│   ├── 预装常用依赖\n│   └── 标准化运行时\n├── 常用Agent/Flow\n│   ├── 网页数据抓取\n│   ├── 文档处理 Flow\n│   ├── API 调用集成\n│   └── 数据分析任务\n└── 移动端适配\n    ├── 响应式 Web UI\n    ├── 触摸优化交互\n    └── 离线缓存支持\n```\n\n好处：\n- 技术栈完全复用，不用重新造轮子\n- 部署简单\n\n### 方案四：云端 + 网页套壳 App\n\n后期在云端部署后，做一个网页套壳 MoFA Stage 的 app。\n\n```\nCloud MoFA + Mobile Client\n├── 云端 MoFA \n│   ├── 智能体运行环境\n│   ├── 任务调度系统\n│   └── 结果缓存层\n├── 移动端 App (网页套壳)\n│   ├── MoFA Stage 移动版\n│   ├── 任务创建与监控\n│   ├── 结果展示界面\n│   └── 离线模式支持\n└── 通信层\n    ├── WebSocket 实时通信\n    ├── RESTful API\n    └── 消息队列同步\n```\n\n\n好处：\n- 不用造轮子\n- 技术栈保持一致，维护简单\n- 解决用户的实际需求，不是为了移动端而移动端\n\n---","src/content/blog/mofa-mobile-solution-plan.md","9b6d67f55dd7290a",{html:278,metadata:279},"<h2 id=\"技术挑战\">技术挑战</h2>\n<h3 id=\"mofa-的移动端应用场景与传统机器人控制的区别\">MoFA 的移动端应用场景与传统机器人控制的区别：</h3>\n<p><strong>机器人控制场景特点</strong>：</p>\n<ul>\n<li>低延迟的硬件通信（微秒级）</li>\n<li>大量传感器数据实时处理</li>\n<li>Dora-RS 共享内存</li>\n</ul>\n<p><strong>移动端 AI Agent 场景特点</strong>：</p>\n<ul>\n<li>逻辑推理和决策</li>\n<li>网络操作和屏幕交互为主</li>\n<li>对话和任务规划导向</li>\n<li>延迟容忍度相对较高（毫秒级即ok）</li>\n</ul>\n<h3 id=\"dora-rs-的移植问题\">Dora-RS 的移植问题</h3>\n<h4 id=\"一些问题\">一些问题：</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Dora 共享内存</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">shared</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">memory</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">server (Dora自有) </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">├── shared_memory_extended </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"0.13.0\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">├── raw_sync_2 </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"0.1.5\"</span><span style=\"color:#E1E4E8\"> </span></span></code></pre>\n<ol>\n<li><strong>共享内存依赖</strong>：Dora 依赖的 <code>shared_memory_extended</code> crate 在移动平台支持不完整</li>\n<li><strong>进程间通信机制</strong>：移动操作系统 IPC 机制与桌面系统差异</li>\n<li><strong>ARM 架构适配</strong></li>\n</ol>\n<h2 id=\"方案\">方案</h2>\n<h3 id=\"方案一termux--root权限-完整移植demo阶段\">方案一：Termux + Root权限 完整移植（Demo阶段）</h3>\n<h4 id=\"技术架构\">技术架构</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Android Host</span></span>\n<span class=\"line\"><span>├── Termux (完整Arch Linux 环境)</span></span>\n<span class=\"line\"><span>│   ├── libandroid-shmem (共享内存)</span></span>\n<span class=\"line\"><span>│   ├── Rust 工具链</span></span>\n<span class=\"line\"><span>│   ├── Dora-RS 完整版</span></span>\n<span class=\"line\"><span>│   └── MoFA 智能体框架</span></span>\n<span class=\"line\"><span>└── Host Bridge App（参考Auto.JS）</span></span>\n<span class=\"line\"><span>    ├── 屏幕截图 API</span></span>\n<span class=\"line\"><span>    ├── 触摸注入 API</span></span>\n<span class=\"line\"><span>    └── Socket 通信桥接</span></span></code></pre>\n<h4 id=\"分层验证计划\">分层验证计划</h4>\n<p><strong>基础环境</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">□</span><span style=\"color:#9ECBFF\"> Termux</span><span style=\"color:#9ECBFF\"> 安装与</span><span style=\"color:#9ECBFF\"> Root</span><span style=\"color:#9ECBFF\"> 权限获取</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">□</span><span style=\"color:#9ECBFF\"> 基础</span><span style=\"color:#9ECBFF\"> Linux</span><span style=\"color:#9ECBFF\"> 命令可用性验证</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">□</span><span style=\"color:#9ECBFF\"> 网络连接和文件系统权限测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">pkg</span><span style=\"color:#9ECBFF\"> update</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">pkg</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -y</span><span style=\"color:#9ECBFF\"> git</span><span style=\"color:#9ECBFF\"> curl</span><span style=\"color:#9ECBFF\"> wget</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">su</span><span style=\"color:#79B8FF\"> -c</span><span style=\"color:#9ECBFF\"> \"whoami\"</span><span style=\"color:#6A737D\">  # 验证 root 权限</span></span></code></pre>\n<p><strong>Rust 工具链</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">pkg</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> rust</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">rustc</span><span style=\"color:#79B8FF\"> --version</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">cargo</span><span style=\"color:#79B8FF\"> --version</span></span></code></pre>\n<p><strong>共享内存</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># 内核支持检查</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cat</span><span style=\"color:#9ECBFF\"> /proc/version</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">ls</span><span style=\"color:#79B8FF\"> -la</span><span style=\"color:#9ECBFF\"> /dev/shm</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/termux/libandroid-shmem</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> libandroid-shmem</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">make</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">make</span><span style=\"color:#9ECBFF\"> install</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">gcc</span><span style=\"color:#9ECBFF\"> test/test.c</span><span style=\"color:#79B8FF\"> -o</span><span style=\"color:#9ECBFF\"> test_shmem</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">./test_shmem</span></span></code></pre>\n<p><strong>Dora</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/dora-rs/dora</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> dora</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#79B8FF\"> --bin</span><span style=\"color:#9ECBFF\"> dora-daemon</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#79B8FF\"> --bin</span><span style=\"color:#9ECBFF\"> dora-coordinator</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># 基础运行测试</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">./target/debug/dora-daemon</span><span style=\"color:#79B8FF\"> --help</span></span></code></pre>\n<p><strong>MoFA</strong></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -e</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#6A737D\"> #安装MoFA，具体省略</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">python</span><span style=\"color:#9ECBFF\"> examples/hello_world/hello_world.py</span></span></code></pre>\n<h4 id=\"host-vm-桥接层设计\">Host-VM 桥接层设计</h4>\n<p><strong>屏幕数据流</strong>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Android Host 端，demo code，尚未实现</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> ScreenBridge</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    fun</span><span style=\"color:#B392F0\"> captureScreen</span><span style=\"color:#E1E4E8\">(): </span><span style=\"color:#B392F0\">ByteArray</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        val</span><span style=\"color:#E1E4E8\"> mediaProjection </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> getMediaProjection</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        val</span><span style=\"color:#E1E4E8\"> imageReader </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> ImageReader.</span><span style=\"color:#B392F0\">newInstance</span><span style=\"color:#E1E4E8\">(width, height, ImageFormat.JPEG, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        return</span><span style=\"color:#E1E4E8\"> compressedImageData</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    fun</span><span style=\"color:#B392F0\"> sendToVM</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">data</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#B392F0\">ByteArray</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        socket.</span><span style=\"color:#B392F0\">write</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">data</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#6A737D\">// 通过 Socket 发送到 VM</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p><strong>操作指令回传</strong>：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#6A737D\"># VM 中的 MoFA Agent，demo code，尚未实现</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> AndroidOperationNode</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#79B8FF\"> __init__</span><span style=\"color:#E1E4E8\">(self):</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">        self</span><span style=\"color:#E1E4E8\">.bridge_socket </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> socket.connect(</span><span style=\"color:#9ECBFF\">\"unix:///tmp/android_bridge\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#B392F0\"> click</span><span style=\"color:#E1E4E8\">(self, x: </span><span style=\"color:#79B8FF\">int</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">int</span><span style=\"color:#E1E4E8\">):</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        command </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span><span style=\"color:#9ECBFF\">\"action\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"click\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"x\"</span><span style=\"color:#E1E4E8\">: x, </span><span style=\"color:#9ECBFF\">\"y\"</span><span style=\"color:#E1E4E8\">: y}</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">        self</span><span style=\"color:#E1E4E8\">.bridge_socket.send(json.dumps(command))</span></span></code></pre>\n<h3 id=\"方案二原生-android-重设计\">方案二：原生 Android 重设计</h3>\n<h4 id=\"新架构设计\">新架构设计</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Android Native MoFA</span></span>\n<span class=\"line\"><span>├── Zenoh-Kotlin 通信层</span></span>\n<span class=\"line\"><span>├── Agent Runtime (Kotlin/Java)</span></span>\n<span class=\"line\"><span>├── 智能体模板系统 (简化版)</span></span>\n<span class=\"line\"><span>├── Android Services</span></span>\n<span class=\"line\"><span>│   ├── AccessibilityService (屏幕操作)</span></span>\n<span class=\"line\"><span>│   ├── ScreenCapture (截图服务)</span></span>\n<span class=\"line\"><span>│   └── ForegroundService (后台保活)</span></span>\n<span class=\"line\"><span>└── Mobile Node Hub</span></span>\n<span class=\"line\"><span>    ├── AutoJS 集成节点</span></span>\n<span class=\"line\"><span>    ├── UI Automator 包装</span></span>\n<span class=\"line\"><span>    ├── Intent 调用器</span></span>\n<span class=\"line\"><span>    └── API 调用节点</span></span></code></pre>\n<h2 id=\"前两个方案对比\">前两个方案对比</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>评估维度</th><th>Termux + Linux</th><th>Native 重设计</th></tr></thead><tbody><tr><td><strong>开发速度</strong></td><td>🟢 快速复用现有代码</td><td>🔴 需要完全重写</td></tr><tr><td><strong>运行性能</strong></td><td>🔴 双层虚拟化开销</td><td>🟢 原生性能</td></tr><tr><td><strong>功能完整性</strong></td><td>🟢 100% 兼容</td><td>🔴 功能受限</td></tr><tr><td><strong>用户体验</strong></td><td>🔴 安装极端复杂</td><td>🟢 原生体验</td></tr><tr><td><strong>维护成本</strong></td><td>🟢 低维护</td><td>🔴 双重维护</td></tr></tbody></table>\n<h3 id=\"进一步场景分析\">进一步场景分析</h3>\n<p>除非开发者有特殊需求，比如需要 agent 来操作移动端独占的某些 app（淘宝、微信等），但这个市场相对较小，而且容易偏离核心方向。</p>\n<p>认真来做的话，移动端方案还是挺费资源的。技术复杂度高，投入产出比不太理想。</p>\n<p>但后面可以尝试直接打包到容器，不做操作用户手机的操作，单纯去跑一些信息抓取、文档处理之类的 flow，还是可行的。</p>\n<h3 id=\"方案三容器化部署\">方案三：容器化部署</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Container-based MoFA Mobile Stage</span></span>\n<span class=\"line\"><span>├── Docker/Podman 容器</span></span>\n<span class=\"line\"><span>│   ├── 完整 MoFA 环境</span></span>\n<span class=\"line\"><span>│   ├── 预装常用依赖</span></span>\n<span class=\"line\"><span>│   └── 标准化运行时</span></span>\n<span class=\"line\"><span>├── 常用Agent/Flow</span></span>\n<span class=\"line\"><span>│   ├── 网页数据抓取</span></span>\n<span class=\"line\"><span>│   ├── 文档处理 Flow</span></span>\n<span class=\"line\"><span>│   ├── API 调用集成</span></span>\n<span class=\"line\"><span>│   └── 数据分析任务</span></span>\n<span class=\"line\"><span>└── 移动端适配</span></span>\n<span class=\"line\"><span>    ├── 响应式 Web UI</span></span>\n<span class=\"line\"><span>    ├── 触摸优化交互</span></span>\n<span class=\"line\"><span>    └── 离线缓存支持</span></span></code></pre>\n<p>好处：</p>\n<ul>\n<li>技术栈完全复用，不用重新造轮子</li>\n<li>部署简单</li>\n</ul>\n<h3 id=\"方案四云端--网页套壳-app\">方案四：云端 + 网页套壳 App</h3>\n<p>后期在云端部署后，做一个网页套壳 MoFA Stage 的 app。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Cloud MoFA + Mobile Client</span></span>\n<span class=\"line\"><span>├── 云端 MoFA </span></span>\n<span class=\"line\"><span>│   ├── 智能体运行环境</span></span>\n<span class=\"line\"><span>│   ├── 任务调度系统</span></span>\n<span class=\"line\"><span>│   └── 结果缓存层</span></span>\n<span class=\"line\"><span>├── 移动端 App (网页套壳)</span></span>\n<span class=\"line\"><span>│   ├── MoFA Stage 移动版</span></span>\n<span class=\"line\"><span>│   ├── 任务创建与监控</span></span>\n<span class=\"line\"><span>│   ├── 结果展示界面</span></span>\n<span class=\"line\"><span>│   └── 离线模式支持</span></span>\n<span class=\"line\"><span>└── 通信层</span></span>\n<span class=\"line\"><span>    ├── WebSocket 实时通信</span></span>\n<span class=\"line\"><span>    ├── RESTful API</span></span>\n<span class=\"line\"><span>    └── 消息队列同步</span></span></code></pre>\n<p>好处：</p>\n<ul>\n<li>不用造轮子</li>\n<li>技术栈保持一致，维护简单</li>\n<li>解决用户的实际需求，不是为了移动端而移动端</li>\n</ul>\n<hr>",{headings:280,localImagePaths:319,remoteImagePaths:320,frontmatter:321,imagePaths:324},[281,283,286,289,292,294,297,299,301,304,307,309,311,313,316],{depth:100,slug:282,text:282},"技术挑战",{depth:59,slug:284,text:285},"mofa-的移动端应用场景与传统机器人控制的区别","MoFA 的移动端应用场景与传统机器人控制的区别：",{depth:59,slug:287,text:288},"dora-rs-的移植问题","Dora-RS 的移植问题",{depth:217,slug:290,text:291},"一些问题","一些问题：",{depth:100,slug:293,text:293},"方案",{depth:59,slug:295,text:296},"方案一termux--root权限-完整移植demo阶段","方案一：Termux + Root权限 完整移植（Demo阶段）",{depth:217,slug:298,text:298},"技术架构",{depth:217,slug:300,text:300},"分层验证计划",{depth:217,slug:302,text:303},"host-vm-桥接层设计","Host-VM 桥接层设计",{depth:59,slug:305,text:306},"方案二原生-android-重设计","方案二：原生 Android 重设计",{depth:217,slug:308,text:308},"新架构设计",{depth:100,slug:310,text:310},"前两个方案对比",{depth:59,slug:312,text:312},"进一步场景分析",{depth:59,slug:314,text:315},"方案三容器化部署","方案三：容器化部署",{depth:59,slug:317,text:318},"方案四云端--网页套壳-app","方案四：云端 + 网页套壳 App",[],[],{title:264,description:265,date:322,author:267,tags:323},["Date","2025-06-09T00:00:00.000Z"],[269,270,271,272,273],[],"mofa-mobile-solution-plan.md","docs",["Map",328,329,367,368,402,403,422,423,463,464,495,496,566,567,601,602],"1-concepts/agents",{id:328,data:330,body:333,filePath:334,digest:335,rendered:336,legacyId:366},{title:331,description:332},"MoFA Agents","Understanding MoFA agent concepts, design patterns, and composition","# MoFA智能体模版\n\n构建智能体有一定的设计模式（Design Pattern），MoFA提供一系列的设计模式的实现，供开发者作为模版使用。\n\n- [设计模式](templates/design_patterns.md)\n- [reasoner](templates/reasoner_template.md)\n- [self_refine](templates/self_refine_template.md)\n- [crewai](templates/crewai_template.md)\n- ...\n\n## MoFA组合智能体\n\n基于Dora-RS框架构建的MoFA智能体，实质上就是Dora-RS Dataflow。两个智能体之间可以通过数据连接进行组合，从而形成组合智能体。\n\n在上述的self_refine Agent模版和下面将要介绍的服务智能体和案例，都是MoFA组合智能体。\n\n## MoFA服务智能体\n\n智能体往往需要需要一些服务，包括检索增强生成，记忆，使用外部工具和任务规划和分解等。MoFA认为：Everything Agent。我们以MoFA智能体的方式提供RAG智能体，记忆智能体，规划智能体和行动智能体。开发者可以使用这些已经实现的服务智能体，与自己的智能体相连接组合从而获得相应的服务。MoFA也可以集成第三方的服务智能体，供开发者按照不同的需求使用。\n\n- rag\n- memory\n- action\n- planning\n\n## Nesting Design Patterns of AI Agents\n\nAI agents are intelligent software applications with various design patterns:\n\n- **LLM Inference**: Using large language models for basic inference\n- **Customized Prompt**: Tailoring system prompts for specific agents\n- **Reflection Pattern**: Agents capable of self-review and improvement\n- **Actor Pattern**: Agents with external tool and resource capabilities\n- **ReAct Pattern**: Combining reflection and tool usage\n- **Multi-Agent Collaboration**: Specialized agents working together\n\n## Agent Kernel Services\n\nMoFA provides core services to agents, including:\n- Memory management\n- Task planning\n- Knowledge base integration\n- RAG (Retrieval-Augmented Generation)\n- Action capabilities\n\n## Composition-Based Architecture\n\nComposition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.\n\n## Dataflow-Driven Approach\n\nMoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.","src/content/docs/1. concepts/agents.md","1ea1e90acc676988",{html:337,metadata:338},"<h1 id=\"mofa智能体模版\">MoFA智能体模版</h1>\n<p>构建智能体有一定的设计模式（Design Pattern），MoFA提供一系列的设计模式的实现，供开发者作为模版使用。</p>\n<ul>\n<li><a href=\"templates/design_patterns.md\">设计模式</a></li>\n<li><a href=\"templates/reasoner_template.md\">reasoner</a></li>\n<li><a href=\"templates/self_refine_template.md\">self_refine</a></li>\n<li><a href=\"templates/crewai_template.md\">crewai</a></li>\n<li>…</li>\n</ul>\n<h2 id=\"mofa组合智能体\">MoFA组合智能体</h2>\n<p>基于Dora-RS框架构建的MoFA智能体，实质上就是Dora-RS Dataflow。两个智能体之间可以通过数据连接进行组合，从而形成组合智能体。</p>\n<p>在上述的self_refine Agent模版和下面将要介绍的服务智能体和案例，都是MoFA组合智能体。</p>\n<h2 id=\"mofa服务智能体\">MoFA服务智能体</h2>\n<p>智能体往往需要需要一些服务，包括检索增强生成，记忆，使用外部工具和任务规划和分解等。MoFA认为：Everything Agent。我们以MoFA智能体的方式提供RAG智能体，记忆智能体，规划智能体和行动智能体。开发者可以使用这些已经实现的服务智能体，与自己的智能体相连接组合从而获得相应的服务。MoFA也可以集成第三方的服务智能体，供开发者按照不同的需求使用。</p>\n<ul>\n<li>rag</li>\n<li>memory</li>\n<li>action</li>\n<li>planning</li>\n</ul>\n<h2 id=\"nesting-design-patterns-of-ai-agents\">Nesting Design Patterns of AI Agents</h2>\n<p>AI agents are intelligent software applications with various design patterns:</p>\n<ul>\n<li><strong>LLM Inference</strong>: Using large language models for basic inference</li>\n<li><strong>Customized Prompt</strong>: Tailoring system prompts for specific agents</li>\n<li><strong>Reflection Pattern</strong>: Agents capable of self-review and improvement</li>\n<li><strong>Actor Pattern</strong>: Agents with external tool and resource capabilities</li>\n<li><strong>ReAct Pattern</strong>: Combining reflection and tool usage</li>\n<li><strong>Multi-Agent Collaboration</strong>: Specialized agents working together</li>\n</ul>\n<h2 id=\"agent-kernel-services\">Agent Kernel Services</h2>\n<p>MoFA provides core services to agents, including:</p>\n<ul>\n<li>Memory management</li>\n<li>Task planning</li>\n<li>Knowledge base integration</li>\n<li>RAG (Retrieval-Augmented Generation)</li>\n<li>Action capabilities</li>\n</ul>\n<h2 id=\"composition-based-architecture\">Composition-Based Architecture</h2>\n<p>Composition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.</p>\n<h2 id=\"dataflow-driven-approach\">Dataflow-Driven Approach</h2>\n<p>MoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.</p>",{headings:339,localImagePaths:362,remoteImagePaths:363,frontmatter:364,imagePaths:365},[340,344,347,350,353,356,359],{depth:341,slug:342,text:343},1,"mofa智能体模版","MoFA智能体模版",{depth:100,slug:345,text:346},"mofa组合智能体","MoFA组合智能体",{depth:100,slug:348,text:349},"mofa服务智能体","MoFA服务智能体",{depth:100,slug:351,text:352},"nesting-design-patterns-of-ai-agents","Nesting Design Patterns of AI Agents",{depth:100,slug:354,text:355},"agent-kernel-services","Agent Kernel Services",{depth:100,slug:357,text:358},"composition-based-architecture","Composition-Based Architecture",{depth:100,slug:360,text:361},"dataflow-driven-approach","Dataflow-Driven Approach",[],[],{title:331,description:332},[],"1. concepts/agents.md","1-concepts/designpatterns",{id:367,data:369,body:372,filePath:373,digest:374,rendered:375,legacyId:401},{title:370,description:371},"Design Patterns","Understanding various design patterns used in MoFA agents","# MoFA Agent Design Patterns\n\nMoFA provides various design patterns that help developers build sophisticated agents with different capabilities and behaviors.\n\n## Core Design Patterns\n\n### 1. Reasoner Pattern\nThe simplest pattern for building agents that can reason and respond to queries.\n\n### 2. Self-Refine Pattern  \nAgents that can review and improve their own outputs through iterative refinement.\n\n### 3. CrewAI Pattern\nMulti-agent collaboration pattern for complex task execution.\n\n## Pattern Categories\n\n- **Basic Patterns**: Single-agent designs for simple tasks\n- **Collaborative Patterns**: Multi-agent coordination\n- **Reflective Patterns**: Self-improving agents\n- **Service Patterns**: Specialized service agents\n\nThese patterns form the foundation for building more complex agent behaviors in the MoFA framework.","src/content/docs/1. concepts/DesignPatterns.md","ee801df59d213e62",{html:376,metadata:377},"<h1 id=\"mofa-agent-design-patterns\">MoFA Agent Design Patterns</h1>\n<p>MoFA provides various design patterns that help developers build sophisticated agents with different capabilities and behaviors.</p>\n<h2 id=\"core-design-patterns\">Core Design Patterns</h2>\n<h3 id=\"1-reasoner-pattern\">1. Reasoner Pattern</h3>\n<p>The simplest pattern for building agents that can reason and respond to queries.</p>\n<h3 id=\"2-self-refine-pattern\">2. Self-Refine Pattern</h3>\n<p>Agents that can review and improve their own outputs through iterative refinement.</p>\n<h3 id=\"3-crewai-pattern\">3. CrewAI Pattern</h3>\n<p>Multi-agent collaboration pattern for complex task execution.</p>\n<h2 id=\"pattern-categories\">Pattern Categories</h2>\n<ul>\n<li><strong>Basic Patterns</strong>: Single-agent designs for simple tasks</li>\n<li><strong>Collaborative Patterns</strong>: Multi-agent coordination</li>\n<li><strong>Reflective Patterns</strong>: Self-improving agents</li>\n<li><strong>Service Patterns</strong>: Specialized service agents</li>\n</ul>\n<p>These patterns form the foundation for building more complex agent behaviors in the MoFA framework.</p>",{headings:378,localImagePaths:397,remoteImagePaths:398,frontmatter:399,imagePaths:400},[379,382,385,388,391,394],{depth:341,slug:380,text:381},"mofa-agent-design-patterns","MoFA Agent Design Patterns",{depth:100,slug:383,text:384},"core-design-patterns","Core Design Patterns",{depth:59,slug:386,text:387},"1-reasoner-pattern","1. Reasoner Pattern",{depth:59,slug:389,text:390},"2-self-refine-pattern","2. Self-Refine Pattern",{depth:59,slug:392,text:393},"3-crewai-pattern","3. CrewAI Pattern",{depth:100,slug:395,text:396},"pattern-categories","Pattern Categories",[],[],{title:370,description:371},[],"1. concepts/DesignPatterns.md","3-examples/hello-world",{id:402,data:404,body:407,filePath:408,digest:409,rendered:410,legacyId:421},{title:405,description:406},"Hello World Example","The simplest MoFA agent example - Hello World","# Hello World\n\n[English](hello_world.md) | [简体中文](hello_world_cn.md)\n\nThis section introduces how to implement the simplest \"Hello World\" agent.\n\nThe task of this agent is to print \"Hello World\" as output, regardless of the input it receives.\n\n[Customization of an agent template based on Dora-RS + configuration of Dora-RS data flow](hello-world-dora)","src/content/docs/3. examples/hello-world.md","4deea47fb45f8e37",{html:411,metadata:412},"<h1 id=\"hello-world\">Hello World</h1>\n<p><a href=\"hello_world.md\">English</a> | <a href=\"hello_world_cn.md\">简体中文</a></p>\n<p>This section introduces how to implement the simplest “Hello World” agent.</p>\n<p>The task of this agent is to print “Hello World” as output, regardless of the input it receives.</p>\n<p><a href=\"hello-world-dora\">Customization of an agent template based on Dora-RS + configuration of Dora-RS data flow</a></p>",{headings:413,localImagePaths:417,remoteImagePaths:418,frontmatter:419,imagePaths:420},[414],{depth:341,slug:415,text:416},"hello-world","Hello World",[],[],{title:405,description:406},[],"3. examples/hello-world.md","0overview",{id:422,data:424,body:427,filePath:428,digest:429,rendered:430,legacyId:462},{title:425,description:426},"MoFA Overview","MoFA is a software framework for building AI agents through a composition-based approach","# MoFA with DoRA\n\n[English](README.md) | [简体中文](README_cn.md)\n\n### DORA\n\n[DORA](https://github.com/dora-rs/dora) is an open-source project implementing a dataflow-oriented middleware,  designed to simplify and streamline the creation of AI-based robotic applications. It provides low-latency, composable, and distributed dataflow functionality. Applications are modeled as directed graphs, also known as Pipelines. DORA naturally offers a multi-agent, multi-process computation environment, as well as a foundation for modularity and composability. MoFA uses DORA as its executor to establish the Agent framework.\n\n### MoFA Agent Templates\n\nThere are specific design patterns for building agents, and MoFA offers a series of implementations of these design patterns as templates for developers to use.\n\n[Design Patterns ](templates/design_patterns.md)\n\n- [Reasoner](templates/reasoner_template.md)\n- [Self Refine](templates/self_refine_template.md)\n- [Crewai](templates/crewai_template.md)\n- ...\n\n### MoFA Composite Agents\n\nMoFA agents built on the Dora-RS framework essentially operate as Dora-RS Dataflows. Two agents can be combined via data connections, forming composite agents.\n\nThe self_refine Agent template mentioned above and the service agents and examples described below are all MoFA composite agents.\n\n### MoFA Service Agents\n\nAgents often require certain services, such as retrieval-augmented generation (RAG), memory, external tool usage, and task planning/decomposition. MoFA follows the principle of \"Everything is an Agent.\" It provides RAG agents, memory agents, planning agents, and action agents as MoFA agents. Developers can connect these pre-implemented service agents to their own agents to gain these services. MoFA also integrates third-party service agents for developers to use based on their needs.\n\n- RAG\n- Memory\n- Action\n- Planning\n\n### Command Line\n\nIn general, you can use the Dora-RS command line to run agents:\n\n1. Install the MoFA project package.\n\n2. Execute the following command to start the agent process:\n\n   ```sh\n   dora up && dora build your_agent_dataflow.yml && dora start your_agent_dataflow.yml --attach\n   ```\n\n3. If the first node of the agent dataflow is a dynamic node used for input/output in Dora, open another terminal and run `terminal-input`. Enter the corresponding tasks to start the Agent process.\n\n### Web Services\n\n### Case Studies\n\n- [Hello World: The Simplest End-to-End Process](examples/hello_world.md)\n  - [Hello World, With Dora-RS & Template](examples/hello_world_dora.md)\n- Composite Agent Examples:\n  - [Simplicity AI](../examples/simplicity_ai/README.md)\n  - [ArXiv Research](../examples/arxiv_research/README.md)\n  - [Agent Fight](../examples/agent_fight/README.md)\n  - [Query Assistant](../examples/query_assistant/README.md)","src/content/docs/0.overview.md","1555b529dfd6f281",{html:431,metadata:432},"<h1 id=\"mofa-with-dora\">MoFA with DoRA</h1>\n<p><a href=\"README.md\">English</a> | <a href=\"README_cn.md\">简体中文</a></p>\n<h3 id=\"dora\">DORA</h3>\n<p><a href=\"https://github.com/dora-rs/dora\">DORA</a> is an open-source project implementing a dataflow-oriented middleware,  designed to simplify and streamline the creation of AI-based robotic applications. It provides low-latency, composable, and distributed dataflow functionality. Applications are modeled as directed graphs, also known as Pipelines. DORA naturally offers a multi-agent, multi-process computation environment, as well as a foundation for modularity and composability. MoFA uses DORA as its executor to establish the Agent framework.</p>\n<h3 id=\"mofa-agent-templates\">MoFA Agent Templates</h3>\n<p>There are specific design patterns for building agents, and MoFA offers a series of implementations of these design patterns as templates for developers to use.</p>\n<p><a href=\"templates/design_patterns.md\">Design Patterns </a></p>\n<ul>\n<li><a href=\"templates/reasoner_template.md\">Reasoner</a></li>\n<li><a href=\"templates/self_refine_template.md\">Self Refine</a></li>\n<li><a href=\"templates/crewai_template.md\">Crewai</a></li>\n<li>…</li>\n</ul>\n<h3 id=\"mofa-composite-agents\">MoFA Composite Agents</h3>\n<p>MoFA agents built on the Dora-RS framework essentially operate as Dora-RS Dataflows. Two agents can be combined via data connections, forming composite agents.</p>\n<p>The self_refine Agent template mentioned above and the service agents and examples described below are all MoFA composite agents.</p>\n<h3 id=\"mofa-service-agents\">MoFA Service Agents</h3>\n<p>Agents often require certain services, such as retrieval-augmented generation (RAG), memory, external tool usage, and task planning/decomposition. MoFA follows the principle of “Everything is an Agent.” It provides RAG agents, memory agents, planning agents, and action agents as MoFA agents. Developers can connect these pre-implemented service agents to their own agents to gain these services. MoFA also integrates third-party service agents for developers to use based on their needs.</p>\n<ul>\n<li>RAG</li>\n<li>Memory</li>\n<li>Action</li>\n<li>Planning</li>\n</ul>\n<h3 id=\"command-line\">Command Line</h3>\n<p>In general, you can use the Dora-RS command line to run agents:</p>\n<ol>\n<li>\n<p>Install the MoFA project package.</p>\n</li>\n<li>\n<p>Execute the following command to start the agent process:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> your_agent_dataflow.yml</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> your_agent_dataflow.yml</span><span style=\"color:#79B8FF\"> --attach</span></span></code></pre>\n</li>\n<li>\n<p>If the first node of the agent dataflow is a dynamic node used for input/output in Dora, open another terminal and run <code>terminal-input</code>. Enter the corresponding tasks to start the Agent process.</p>\n</li>\n</ol>\n<h3 id=\"web-services\">Web Services</h3>\n<h3 id=\"case-studies\">Case Studies</h3>\n<ul>\n<li><a href=\"examples/hello_world.md\">Hello World: The Simplest End-to-End Process</a>\n<ul>\n<li><a href=\"examples/hello_world_dora.md\">Hello World, With Dora-RS &#x26; Template</a></li>\n</ul>\n</li>\n<li>Composite Agent Examples:\n<ul>\n<li><a href=\"../examples/simplicity_ai/README.md\">Simplicity AI</a></li>\n<li><a href=\"../examples/arxiv_research/README.md\">ArXiv Research</a></li>\n<li><a href=\"../examples/agent_fight/README.md\">Agent Fight</a></li>\n<li><a href=\"../examples/query_assistant/README.md\">Query Assistant</a></li>\n</ul>\n</li>\n</ul>",{headings:433,localImagePaths:458,remoteImagePaths:459,frontmatter:460,imagePaths:461},[434,437,440,443,446,449,452,455],{depth:341,slug:435,text:436},"mofa-with-dora","MoFA with DoRA",{depth:59,slug:438,text:439},"dora","DORA",{depth:59,slug:441,text:442},"mofa-agent-templates","MoFA Agent Templates",{depth:59,slug:444,text:445},"mofa-composite-agents","MoFA Composite Agents",{depth:59,slug:447,text:448},"mofa-service-agents","MoFA Service Agents",{depth:59,slug:450,text:451},"command-line","Command Line",{depth:59,slug:453,text:454},"web-services","Web Services",{depth:59,slug:456,text:457},"case-studies","Case Studies",[],[],{title:425,description:426},[],"0.overview.md","2-getting-started/installation",{id:463,data:465,body:468,filePath:469,digest:470,rendered:471,legacyId:494},{title:466,description:467},"Installation","How to install MoFA and set up your development environment","This guide will help you install MoFA and set up your development environment.\n\n## Prerequisites\n\nBefore installing MoFA, make sure you have:\n\n- **Python 3.8 or higher**\n- **pip package manager**\n- **Git** (for cloning repositories)\n- At least **4GB of RAM**\n\n## Installation Methods\n\n### Method 1: Install via pip (Recommended)\n\nThe easiest way to install MoFA is using pip:\n\n```bash\npip install mofa\n```\n\n### Method 2: Install from Source\n\nFor development or the latest features:\n\n```bash\n# Clone the repository\ngit clone https://github.com/mofa-org/mofa.git\ncd mofa\n\n# Install in development mode\npip install -e .\n```\n\n## Verify Installation\n\nTo verify that MoFA is installed correctly:\n\n```python\nimport mofa\nprint(mofa.__version__)\n```","src/content/docs/2. getting-started/installation.md","ed0f2bb3c49e2275",{html:472,metadata:473},"<p>This guide will help you install MoFA and set up your development environment.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Before installing MoFA, make sure you have:</p>\n<ul>\n<li><strong>Python 3.8 or higher</strong></li>\n<li><strong>pip package manager</strong></li>\n<li><strong>Git</strong> (for cloning repositories)</li>\n<li>At least <strong>4GB of RAM</strong></li>\n</ul>\n<h2 id=\"installation-methods\">Installation Methods</h2>\n<h3 id=\"method-1-install-via-pip-recommended\">Method 1: Install via pip (Recommended)</h3>\n<p>The easiest way to install MoFA is using pip:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> mofa</span></span></code></pre>\n<h3 id=\"method-2-install-from-source\">Method 2: Install from Source</h3>\n<p>For development or the latest features:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># Clone the repository</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/mofa-org/mofa.git</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> mofa</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># Install in development mode</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">pip</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -e</span><span style=\"color:#9ECBFF\"> .</span></span></code></pre>\n<h2 id=\"verify-installation\">Verify Installation</h2>\n<p>To verify that MoFA is installed correctly:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> mofa</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">print</span><span style=\"color:#E1E4E8\">(mofa.</span><span style=\"color:#79B8FF\">__version__</span><span style=\"color:#E1E4E8\">)</span></span></code></pre>",{headings:474,localImagePaths:490,remoteImagePaths:491,frontmatter:492,imagePaths:493},[475,478,481,484,487],{depth:100,slug:476,text:477},"prerequisites","Prerequisites",{depth:100,slug:479,text:480},"installation-methods","Installation Methods",{depth:59,slug:482,text:483},"method-1-install-via-pip-recommended","Method 1: Install via pip (Recommended)",{depth:59,slug:485,text:486},"method-2-install-from-source","Method 2: Install from Source",{depth:100,slug:488,text:489},"verify-installation","Verify Installation",[],[],{title:466,description:467},[],"2. getting-started/installation.md","2-getting-started/first-agent",{id:495,data:497,body:500,filePath:501,digest:502,rendered:503,legacyId:565},{title:498,description:499},"Your First Agent","Create your first MoFA agent using the Hello World example","# \"Hello World\" Agent Development Based on Dora\n\n[English](hello_world_dora.md) | [简体中文](hello_world_dora_cn.md)\n\n## Step 1: Install the Development and Runtime Environment\n\nRefer to the [Installation Guide](installation) to complete the setup of the development and runtime environment.\n\n## Step 2: Obtain the Intelligent Agent Template\n\n1. Go to the [Dora Intelligent Agent Template Repository](../../mofa/agent_templates).\n2. Select the simplest [Reasoner Template](../../mofa/agent_templates/reasoner).\n3. Copy the template to your development directory.\n4. Review the template description: [README](../../mofa/agent_templates/reasoner/README.md).\n\n## Step 3: Configuration File Setup\n\n### Configuration File Overview\n\nCreate or edit the `reasoner_agent.yml` file:\n\n```yaml\nAGENT:\n  ROLE: Knowledgeable Assistant\n  BACKSTORY: <Your background description>\n  TASK: null  # Specific task\n\nRAG:\n  RAG_ENABLE: false\n  MODULE_PATH: null\n  RAG_MODEL_NAME: text-embedding-3-small\n  COLLECTION_NAME: mofa\n  IS_UPLOAD_FILE: true\n  CHROMA_PATH: ./data/output/chroma_store\n  FILES_PATH:\n    - ./data/output/arxiv_papers\n  ENCODING: utf-8\n  CHUNK_SIZE: 256\n  RAG_SEARCH_NUM: 2\n\nWEB:\n  WEB_ENABLE: false\n  SERPER_API_KEY: <Your Serper API key>\n  SEARCH_NUM: 20\n  SEARCH_ENGINE_TIMEOUT: 5\n\nMODEL:\n  MODEL_API_KEY: <Your model API key>\n  MODEL_NAME: gpt-4o-mini\n  MODEL_MAX_TOKENS: 2048\n\nENV:\n  PROXY_URL: null\n  AGENT_TYPE: reasoner\n\nLOG:\n  LOG_PATH: ./data/output/log/log.md\n  LOG_TYPE: markdown\n  LOG_STEP_NAME: reasoner_result\n  CHECK_LOG_PROMPT: true\n```\n\n### Configuration Details\n\n#### 1. AGENT Module\n\n- **ROLE**: Name of the assistant role.\n- **BACKSTORY**: Background description of the assistant.\n- **TASK**: Specific task (default is `null`).\n\n#### 2. RAG Module\n\n- **RAG_ENABLE**: Enable (`true`) or disable (`false`) RAG.\n- **Other Parameters**: Configure knowledge retrieval enhancement features.\n\n#### 3. WEB Module\n\n- **WEB_ENABLE**: Enable (`true`) or disable (`false`) web search.\n- **SERPER_API_KEY**: Serper search API key.\n\n#### 4. MODEL Module\n\n- **MODEL_API_KEY**: API key for the model service.\n- **MODEL_NAME**: Model name to use (e.g., `gpt-4o-mini`).\n- **MODEL_MAX_TOKENS**: Maximum number of tokens the model can generate.\n\n#### 5. ENV Module\n\n- **PROXY_URL**: Proxy server URL (set to `null` if no proxy is needed).\n- **AGENT_TYPE**: Agent type, e.g., `reasoner`.\n\n#### 6. LOG Module\n\n- **LOG_PATH**: Path to the log file.\n- **LOG_TYPE**: Log format (e.g., `markdown`).\n- **LOG_STEP_NAME**: Log step name.\n- **CHECK_LOG_PROMPT**: Enable log prompt checking (`true` or `false`).\n\n## Step 4: Configure Dora Operator\n\nCreate a `reasoner_agent.py` script:\n\n```python\nimport os\nfrom dora import DoraStatus\nimport pyarrow as pa\nfrom mofa.kernel.utils.util import load_agent_config, create_agent_output\nfrom mofa.run.run_agent import run_dspy_or_crewai_agent\nfrom mofa.utils.files.dir import get_relative_path\nfrom mofa.utils.log.agent import record_agent_result_log\n\n\nclass Operator:\n    \"\"\"\n    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.\n    \"\"\"\n\n    def on_event(self, dora_event, send_output) -> DoraStatus:\n        if dora_event.get(\"type\") == \"INPUT\":\n            agent_inputs = ['data', 'task']\n            event_id = dora_event.get(\"id\")\n\n            if event_id in agent_inputs:\n                task = dora_event[\"value\"][0].as_py()\n\n                yaml_file_path = get_relative_path(\n                    current_file=__file__,\n                    sibling_directory_name='configs',\n                    target_file_name='reasoner_agent.yml'\n                )\n\n                inputs = load_agent_config(yaml_file_path)\n                inputs[\"task\"] = task\n\n                agent_result = run_dspy_or_crewai_agent(agent_config=inputs)\n\n                log_step_name = inputs.get('log_step_name', \"Step_one\")\n                record_agent_result_log(\n                    agent_config=inputs,\n                    agent_result={f\"1, {log_step_name}\": {task: agent_result}}\n                )\n\n                output_data = create_agent_output(\n                    agent_name='keyword_results',\n                    agent_result=agent_result,\n                    dataflow_status=os.getenv('IS_DATAFLOW_END', True)\n                )\n\n                send_output(\n                    \"reasoner_result\",\n                    pa.array([output_data]),\n                    dora_event.get('metadata', {})\n                )\n\n                print('reasoner_results:', agent_result)\n\n        return DoraStatus.CONTINUE\n```\n\n## Step 5: Configure Dora Dataflow\n\nCreate or edit the `reasoner_dataflow.yml` file:\n\n```yaml\nnodes:\n\n  - id: terminal-input\n    build: pip install -e ../../../node-hub/terminal-input\n    path: dynamic\n    outputs:\n      - data\n    inputs:\n      reasoner_results: reasoner-agent/reasoner_results\n\n  - id: reasoner-agent\n    operator:\n      python: scripts/reasoner_agent.py\n      inputs:\n        task: terminal-input/data\n      outputs:\n        - reasoner_results\n```\n\n### Node Descriptions\n\n- **terminal-input**:\n  - **Function**: Handles initial input.\n  - **Action**: Installs the `terminal-input` module.\n  - **Output**: Generates `data`, passing it to `reasoner-agent`.\n  - **Input**: Receives `reasoner_results`.\n- **reasoner-agent**:\n  - **Function**: Processes tasks and generates results.\n  - **Action**: Runs the `reasoner_agent.py` script.\n  - **Input**: Receives `data` from `terminal-input` as `task`.\n  - **Output**: Generates `reasoner_results`, sending them back to `terminal-input`.\n\n## Step 6: Run Dora Dataflow\n\n### Start the Dataflow Using Dora-RS CLI\n\n1. Start the coordinator\n\n```bash\ndora up\n```\n\n2. Build the dataflow\n\n```bash\ndora build reasoner_dataflow.yml\n```\n\n3. Start the dataflow with auto-attach\n\n```bash\ndora start reasoner_dataflow.yml --attach\n```\n\n4. In another terminal, input tasks to the agent\n\n```bash\nterminal-input\n```\n\nThen type your queries to interact with the agent.\n\n## Summary\n\nThis \"Hello World\" example demonstrates:\n- How to set up a basic MoFA agent using templates\n- Configuration file structure and parameters\n- Integration with Dora-RS dataflow\n- Running and interacting with the agent\n\nThis serves as the foundation for building more complex agents and understanding the MoFA framework.","src/content/docs/2. getting-started/first-agent.md","e6dd515c81da84ea",{html:504,metadata:505},"<h1 id=\"hello-world-agent-development-based-on-dora\">“Hello World” Agent Development Based on Dora</h1>\n<p><a href=\"hello_world_dora.md\">English</a> | <a href=\"hello_world_dora_cn.md\">简体中文</a></p>\n<h2 id=\"step-1-install-the-development-and-runtime-environment\">Step 1: Install the Development and Runtime Environment</h2>\n<p>Refer to the <a href=\"installation\">Installation Guide</a> to complete the setup of the development and runtime environment.</p>\n<h2 id=\"step-2-obtain-the-intelligent-agent-template\">Step 2: Obtain the Intelligent Agent Template</h2>\n<ol>\n<li>Go to the <a href=\"../../mofa/agent_templates\">Dora Intelligent Agent Template Repository</a>.</li>\n<li>Select the simplest <a href=\"../../mofa/agent_templates/reasoner\">Reasoner Template</a>.</li>\n<li>Copy the template to your development directory.</li>\n<li>Review the template description: <a href=\"../../mofa/agent_templates/reasoner/README.md\">README</a>.</li>\n</ol>\n<h2 id=\"step-3-configuration-file-setup\">Step 3: Configuration File Setup</h2>\n<h3 id=\"configuration-file-overview\">Configuration File Overview</h3>\n<p>Create or edit the <code>reasoner_agent.yml</code> file:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">AGENT</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  ROLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Knowledgeable Assistant</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  BACKSTORY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your background description></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  TASK</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#6A737D\">  # Specific task</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">RAG</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_ENABLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODULE_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_MODEL_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">text-embedding-3-small</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  COLLECTION_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">mofa</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  IS_UPLOAD_FILE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHROMA_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">./data/output/chroma_store</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  FILES_PATH</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    - </span><span style=\"color:#9ECBFF\">./data/output/arxiv_papers</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  ENCODING</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">utf-8</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHUNK_SIZE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">256</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_SEARCH_NUM</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">WEB</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  WEB_ENABLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SERPER_API_KEY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your Serper API key></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SEARCH_NUM</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">20</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SEARCH_ENGINE_TIMEOUT</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">MODEL</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_API_KEY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your model API key></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">gpt-4o-mini</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_MAX_TOKENS</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2048</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">ENV</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  PROXY_URL</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  AGENT_TYPE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">LOG</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">./data/output/log/log.md</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_TYPE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">markdown</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_STEP_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner_result</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHECK_LOG_PROMPT</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span></code></pre>\n<h3 id=\"configuration-details\">Configuration Details</h3>\n<h4 id=\"1-agent-module\">1. AGENT Module</h4>\n<ul>\n<li><strong>ROLE</strong>: Name of the assistant role.</li>\n<li><strong>BACKSTORY</strong>: Background description of the assistant.</li>\n<li><strong>TASK</strong>: Specific task (default is <code>null</code>).</li>\n</ul>\n<h4 id=\"2-rag-module\">2. RAG Module</h4>\n<ul>\n<li><strong>RAG_ENABLE</strong>: Enable (<code>true</code>) or disable (<code>false</code>) RAG.</li>\n<li><strong>Other Parameters</strong>: Configure knowledge retrieval enhancement features.</li>\n</ul>\n<h4 id=\"3-web-module\">3. WEB Module</h4>\n<ul>\n<li><strong>WEB_ENABLE</strong>: Enable (<code>true</code>) or disable (<code>false</code>) web search.</li>\n<li><strong>SERPER_API_KEY</strong>: Serper search API key.</li>\n</ul>\n<h4 id=\"4-model-module\">4. MODEL Module</h4>\n<ul>\n<li><strong>MODEL_API_KEY</strong>: API key for the model service.</li>\n<li><strong>MODEL_NAME</strong>: Model name to use (e.g., <code>gpt-4o-mini</code>).</li>\n<li><strong>MODEL_MAX_TOKENS</strong>: Maximum number of tokens the model can generate.</li>\n</ul>\n<h4 id=\"5-env-module\">5. ENV Module</h4>\n<ul>\n<li><strong>PROXY_URL</strong>: Proxy server URL (set to <code>null</code> if no proxy is needed).</li>\n<li><strong>AGENT_TYPE</strong>: Agent type, e.g., <code>reasoner</code>.</li>\n</ul>\n<h4 id=\"6-log-module\">6. LOG Module</h4>\n<ul>\n<li><strong>LOG_PATH</strong>: Path to the log file.</li>\n<li><strong>LOG_TYPE</strong>: Log format (e.g., <code>markdown</code>).</li>\n<li><strong>LOG_STEP_NAME</strong>: Log step name.</li>\n<li><strong>CHECK_LOG_PROMPT</strong>: Enable log prompt checking (<code>true</code> or <code>false</code>).</li>\n</ul>\n<h2 id=\"step-4-configure-dora-operator\">Step 4: Configure Dora Operator</h2>\n<p>Create a <code>reasoner_agent.py</code> script:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> os</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> dora </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> DoraStatus</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> pyarrow </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> pa</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.kernel.utils.util </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> load_agent_config, create_agent_output</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.run.run_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.files.dir </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> get_relative_path</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.log.agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> record_agent_result_log</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Operator</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#B392F0\"> on_event</span><span style=\"color:#E1E4E8\">(self, dora_event, send_output) -> DoraStatus:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> dora_event.get(</span><span style=\"color:#9ECBFF\">\"type\"</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">==</span><span style=\"color:#9ECBFF\"> \"INPUT\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            agent_inputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">'data'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'task'</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            event_id </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> dora_event.get(</span><span style=\"color:#9ECBFF\">\"id\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">            if</span><span style=\"color:#E1E4E8\"> event_id </span><span style=\"color:#F97583\">in</span><span style=\"color:#E1E4E8\"> agent_inputs:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                task </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> dora_event[</span><span style=\"color:#9ECBFF\">\"value\"</span><span style=\"color:#E1E4E8\">][</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].as_py()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                yaml_file_path </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> get_relative_path(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    current_file</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">__file__</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    sibling_directory_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'configs'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    target_file_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'reasoner_agent.yml'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                inputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> load_agent_config(yaml_file_path)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                inputs[</span><span style=\"color:#9ECBFF\">\"task\"</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> task</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                agent_result </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent(</span><span style=\"color:#FFAB70\">agent_config</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">inputs)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                log_step_name </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> inputs.get(</span><span style=\"color:#9ECBFF\">'log_step_name'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"Step_one\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                record_agent_result_log(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_config</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">inputs,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"1, </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">log_step_name</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">: {task: agent_result}}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                output_data </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> create_agent_output(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'keyword_results'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">agent_result,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    dataflow_status</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'IS_DATAFLOW_END'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">True</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                send_output(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">                    \"reasoner_result\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                    pa.array([output_data]),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                    dora_event.get(</span><span style=\"color:#9ECBFF\">'metadata'</span><span style=\"color:#E1E4E8\">, {})</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">                print</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'reasoner_results:'</span><span style=\"color:#E1E4E8\">, agent_result)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">        return</span><span style=\"color:#E1E4E8\"> DoraStatus.</span><span style=\"color:#79B8FF\">CONTINUE</span></span></code></pre>\n<h2 id=\"step-5-configure-dora-dataflow\">Step 5: Configure Dora Dataflow</h2>\n<p>Create or edit the <code>reasoner_dataflow.yml</code> file:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">nodes</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../../node-hub/terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">dynamic</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      reasoner_results</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner-agent/reasoner_results</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    operator</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      python</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">scripts/reasoner_agent.py</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        task</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input/data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        - </span><span style=\"color:#9ECBFF\">reasoner_results</span></span></code></pre>\n<h3 id=\"node-descriptions\">Node Descriptions</h3>\n<ul>\n<li><strong>terminal-input</strong>:\n<ul>\n<li><strong>Function</strong>: Handles initial input.</li>\n<li><strong>Action</strong>: Installs the <code>terminal-input</code> module.</li>\n<li><strong>Output</strong>: Generates <code>data</code>, passing it to <code>reasoner-agent</code>.</li>\n<li><strong>Input</strong>: Receives <code>reasoner_results</code>.</li>\n</ul>\n</li>\n<li><strong>reasoner-agent</strong>:\n<ul>\n<li><strong>Function</strong>: Processes tasks and generates results.</li>\n<li><strong>Action</strong>: Runs the <code>reasoner_agent.py</code> script.</li>\n<li><strong>Input</strong>: Receives <code>data</code> from <code>terminal-input</code> as <code>task</code>.</li>\n<li><strong>Output</strong>: Generates <code>reasoner_results</code>, sending them back to <code>terminal-input</code>.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-6-run-dora-dataflow\">Step 6: Run Dora Dataflow</h2>\n<h3 id=\"start-the-dataflow-using-dora-rs-cli\">Start the Dataflow Using Dora-RS CLI</h3>\n<ol>\n<li>Start the coordinator</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span></span></code></pre>\n<ol start=\"2\">\n<li>Build the dataflow</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> reasoner_dataflow.yml</span></span></code></pre>\n<ol start=\"3\">\n<li>Start the dataflow with auto-attach</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> reasoner_dataflow.yml</span><span style=\"color:#79B8FF\"> --attach</span></span></code></pre>\n<ol start=\"4\">\n<li>In another terminal, input tasks to the agent</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span></code></pre>\n<p>Then type your queries to interact with the agent.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>This “Hello World” example demonstrates:</p>\n<ul>\n<li>How to set up a basic MoFA agent using templates</li>\n<li>Configuration file structure and parameters</li>\n<li>Integration with Dora-RS dataflow</li>\n<li>Running and interacting with the agent</li>\n</ul>\n<p>This serves as the foundation for building more complex agents and understanding the MoFA framework.</p>",{headings:506,localImagePaths:561,remoteImagePaths:562,frontmatter:563,imagePaths:564},[507,510,513,516,519,522,525,528,531,534,537,540,543,546,549,552,555,558],{depth:341,slug:508,text:509},"hello-world-agent-development-based-on-dora","“Hello World” Agent Development Based on Dora",{depth:100,slug:511,text:512},"step-1-install-the-development-and-runtime-environment","Step 1: Install the Development and Runtime Environment",{depth:100,slug:514,text:515},"step-2-obtain-the-intelligent-agent-template","Step 2: Obtain the Intelligent Agent Template",{depth:100,slug:517,text:518},"step-3-configuration-file-setup","Step 3: Configuration File Setup",{depth:59,slug:520,text:521},"configuration-file-overview","Configuration File Overview",{depth:59,slug:523,text:524},"configuration-details","Configuration Details",{depth:217,slug:526,text:527},"1-agent-module","1. AGENT Module",{depth:217,slug:529,text:530},"2-rag-module","2. RAG Module",{depth:217,slug:532,text:533},"3-web-module","3. WEB Module",{depth:217,slug:535,text:536},"4-model-module","4. MODEL Module",{depth:217,slug:538,text:539},"5-env-module","5. ENV Module",{depth:217,slug:541,text:542},"6-log-module","6. LOG Module",{depth:100,slug:544,text:545},"step-4-configure-dora-operator","Step 4: Configure Dora Operator",{depth:100,slug:547,text:548},"step-5-configure-dora-dataflow","Step 5: Configure Dora Dataflow",{depth:59,slug:550,text:551},"node-descriptions","Node Descriptions",{depth:100,slug:553,text:554},"step-6-run-dora-dataflow","Step 6: Run Dora Dataflow",{depth:59,slug:556,text:557},"start-the-dataflow-using-dora-rs-cli","Start the Dataflow Using Dora-RS CLI",{depth:100,slug:559,text:560},"summary","Summary",[],[],{title:498,description:499},[],"2. getting-started/first-agent.md","3-examples/hello-world-dora",{id:566,data:568,body:571,filePath:572,digest:573,rendered:574,legacyId:600},{title:569,description:570},"Hello World with Dora","Building a Hello World agent using Dora-RS framework","# \"Hello World\" Agent Development Based on Dora\n\n[English](hello_world_dora.md) | [简体中文](hello_world_dora_cn.md)\n\n## Step 1: Install the Development and Runtime Environment\n\nRefer to the [Installation Guide](../2.%20getting-started/installation) to complete the setup of the development and runtime environment.\n\n## Step 2: Obtain the Intelligent Agent Template\n\n1. Go to the [Dora Intelligent Agent Template Repository](../../mofa/agent_templates).\n2. Select the simplest [Reasoner Template](../../mofa/agent_templates/reasoner).\n3. Copy the template to your development directory.\n4. Review the template description: [README](../../mofa/agent_templates/reasoner/README.md).\n\n## Step 3: Configuration File Setup\n\n### Configuration File Overview\n\nCreate or edit the `reasoner_agent.yml` file:\n\n```yaml\nAGENT:\n  ROLE: Knowledgeable Assistant\n  BACKSTORY: <Your background description>\n  TASK: null  # Specific task\n\nRAG:\n  RAG_ENABLE: false\n  MODULE_PATH: null\n  RAG_MODEL_NAME: text-embedding-3-small\n  COLLECTION_NAME: mofa\n  IS_UPLOAD_FILE: true\n  CHROMA_PATH: ./data/output/chroma_store\n  FILES_PATH:\n    - ./data/output/arxiv_papers\n  ENCODING: utf-8\n  CHUNK_SIZE: 256\n  RAG_SEARCH_NUM: 2\n\nWEB:\n  WEB_ENABLE: false\n  SERPER_API_KEY: <Your Serper API key>\n  SEARCH_NUM: 20\n  SEARCH_ENGINE_TIMEOUT: 5\n\nMODEL:\n  MODEL_API_KEY: <Your model API key>\n  MODEL_NAME: gpt-4o-mini\n  MODEL_MAX_TOKENS: 2048\n\nENV:\n  PROXY_URL: null\n  AGENT_TYPE: reasoner\n\nLOG:\n  LOG_PATH: ./data/output/log/log.md\n  LOG_TYPE: markdown\n  LOG_STEP_NAME: reasoner_result\n  CHECK_LOG_PROMPT: true\n```\n\n### Configuration Details\n\n#### 1. AGENT Module\n\n- **ROLE**: Name of the assistant role.\n- **BACKSTORY**: Background description of the assistant.\n- **TASK**: Specific task (default is `null`).\n\n#### 2. RAG Module\n\n- **RAG_ENABLE**: Enable (`true`) or disable (`false`) RAG.\n- **Other Parameters**: Configure knowledge retrieval enhancement features.\n\n#### 3. WEB Module\n\n- **WEB_ENABLE**: Enable (`true`) or disable (`false`) web search.\n- **SERPER_API_KEY**: Serper search API key.\n\n#### 4. MODEL Module\n\n- **MODEL_API_KEY**: API key for the model service.\n- **MODEL_NAME**: Model name to use (e.g., `gpt-4o-mini`).\n- **MODEL_MAX_TOKENS**: Maximum number of tokens the model can generate.\n\n#### 5. ENV Module\n\n- **PROXY_URL**: Proxy server URL (set to `null` if no proxy is needed).\n- **AGENT_TYPE**: Agent type, e.g., `reasoner`.\n\n#### 6. LOG Module\n\n- **LOG_PATH**: Path to the log file.\n- **LOG_TYPE**: Log format (e.g., `markdown`).\n- **LOG_STEP_NAME**: Log step name.\n- **CHECK_LOG_PROMPT**: Enable log prompt checking (`true` or `false`).\n\n## Step 4: Configure Dora Operator\n\nCreate a `reasoner_agent.py` script:\n\n```python\nimport os\nfrom dora import DoraStatus\nimport pyarrow as pa\nfrom mofa.kernel.utils.util import load_agent_config, create_agent_output\nfrom mofa.run.run_agent import run_dspy_or_crewai_agent\nfrom mofa.utils.files.dir import get_relative_path\nfrom mofa.utils.log.agent import record_agent_result_log\n\n\nclass Operator:\n    \"\"\"\n    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.\n    \"\"\"\n\n    def on_event(self, dora_event, send_output) -> DoraStatus:\n        if dora_event.get(\"type\") == \"INPUT\":\n            agent_inputs = ['data', 'task']\n            event_id = dora_event.get(\"id\")\n\n            if event_id in agent_inputs:\n                task = dora_event[\"value\"][0].as_py()\n\n                yaml_file_path = get_relative_path(\n                    current_file=__file__,\n                    sibling_directory_name='configs',\n                    target_file_name='reasoner_agent.yml'\n                )\n\n                inputs = load_agent_config(yaml_file_path)\n                inputs[\"task\"] = task\n\n                agent_result = run_dspy_or_crewai_agent(agent_config=inputs)\n\n                log_step_name = inputs.get('log_step_name', \"Step_one\")\n                record_agent_result_log(\n                    agent_config=inputs,\n                    agent_result={f\"1, {log_step_name}\": {task: agent_result}}\n                )\n\n                output_data = create_agent_output(\n                    agent_name='keyword_results',\n                    agent_result=agent_result,\n                    dataflow_status=os.getenv('IS_DATAFLOW_END', True)\n                )\n\n                send_output(\n                    \"reasoner_result\",\n                    pa.array([output_data]),\n                    dora_event.get('metadata', {})\n                )\n\n                print('reasoner_results:', agent_result)\n\n        return DoraStatus.CONTINUE\n```\n\n## Step 5: Configure Dora Dataflow\n\nCreate or edit the `reasoner_dataflow.yml` file:\n\n```yaml\nnodes:\n\n  - id: terminal-input\n    build: pip install -e ../../../node-hub/terminal-input\n    path: dynamic\n    outputs:\n      - data\n    inputs:\n      reasoner_results: reasoner-agent/reasoner_results\n\n  - id: reasoner-agent\n    operator:\n      python: scripts/reasoner_agent.py\n      inputs:\n        task: terminal-input/data\n      outputs:\n        - reasoner_results\n```\n\n### Node Descriptions\n\n- **terminal-input**:\n  - **Function**: Handles initial input.\n  - **Action**: Installs the `terminal-input` module.\n  - **Output**: Generates `data`, passing it to `reasoner-agent`.\n  - **Input**: Receives `reasoner_results`.\n- **reasoner-agent**:\n  - **Function**: Processes tasks and generates results.\n  - **Action**: Runs the `reasoner_agent.py` script.\n  - **Input**: Receives `data` from `terminal-input` as `task`.\n  - **Output**: Generates `reasoner_results`, sending them back to `terminal-input`.\n\n## Step 6: Run Dora Dataflow\n\n### Start the Dataflow Using Dora-RS CLI\n\n1. Start the coordinator\n\n```bash\ndora up\n```\n\n2. Build the dataflow\n\n```bash\ndora build reasoner_dataflow.yml\n```\n\n3. Start the dataflow with auto-attach\n\n```bash\ndora start reasoner_dataflow.yml --attach\n```\n\n4. In another terminal, input tasks to the agent\n\n```bash\nterminal-input\n```\n\nThen type your queries to interact with the agent.\n\n## Summary\n\nThis \"Hello World\" example demonstrates:\n- How to set up a basic MoFA agent using templates\n- Configuration file structure and parameters\n- Integration with Dora-RS dataflow\n- Running and interacting with the agent\n\nThis serves as the foundation for building more complex agents and understanding the MoFA framework.","src/content/docs/3. examples/hello-world-dora.md","549a044a7ef8b659",{html:575,metadata:576},"<h1 id=\"hello-world-agent-development-based-on-dora\">“Hello World” Agent Development Based on Dora</h1>\n<p><a href=\"hello_world_dora.md\">English</a> | <a href=\"hello_world_dora_cn.md\">简体中文</a></p>\n<h2 id=\"step-1-install-the-development-and-runtime-environment\">Step 1: Install the Development and Runtime Environment</h2>\n<p>Refer to the <a href=\"../2.%20getting-started/installation\">Installation Guide</a> to complete the setup of the development and runtime environment.</p>\n<h2 id=\"step-2-obtain-the-intelligent-agent-template\">Step 2: Obtain the Intelligent Agent Template</h2>\n<ol>\n<li>Go to the <a href=\"../../mofa/agent_templates\">Dora Intelligent Agent Template Repository</a>.</li>\n<li>Select the simplest <a href=\"../../mofa/agent_templates/reasoner\">Reasoner Template</a>.</li>\n<li>Copy the template to your development directory.</li>\n<li>Review the template description: <a href=\"../../mofa/agent_templates/reasoner/README.md\">README</a>.</li>\n</ol>\n<h2 id=\"step-3-configuration-file-setup\">Step 3: Configuration File Setup</h2>\n<h3 id=\"configuration-file-overview\">Configuration File Overview</h3>\n<p>Create or edit the <code>reasoner_agent.yml</code> file:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">AGENT</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  ROLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Knowledgeable Assistant</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  BACKSTORY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your background description></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  TASK</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#6A737D\">  # Specific task</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">RAG</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_ENABLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODULE_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_MODEL_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">text-embedding-3-small</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  COLLECTION_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">mofa</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  IS_UPLOAD_FILE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHROMA_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">./data/output/chroma_store</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  FILES_PATH</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    - </span><span style=\"color:#9ECBFF\">./data/output/arxiv_papers</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  ENCODING</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">utf-8</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHUNK_SIZE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">256</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_SEARCH_NUM</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">WEB</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  WEB_ENABLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SERPER_API_KEY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your Serper API key></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SEARCH_NUM</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">20</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SEARCH_ENGINE_TIMEOUT</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">MODEL</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_API_KEY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your model API key></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">gpt-4o-mini</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_MAX_TOKENS</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2048</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">ENV</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  PROXY_URL</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  AGENT_TYPE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">LOG</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">./data/output/log/log.md</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_TYPE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">markdown</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_STEP_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner_result</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHECK_LOG_PROMPT</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span></code></pre>\n<h3 id=\"configuration-details\">Configuration Details</h3>\n<h4 id=\"1-agent-module\">1. AGENT Module</h4>\n<ul>\n<li><strong>ROLE</strong>: Name of the assistant role.</li>\n<li><strong>BACKSTORY</strong>: Background description of the assistant.</li>\n<li><strong>TASK</strong>: Specific task (default is <code>null</code>).</li>\n</ul>\n<h4 id=\"2-rag-module\">2. RAG Module</h4>\n<ul>\n<li><strong>RAG_ENABLE</strong>: Enable (<code>true</code>) or disable (<code>false</code>) RAG.</li>\n<li><strong>Other Parameters</strong>: Configure knowledge retrieval enhancement features.</li>\n</ul>\n<h4 id=\"3-web-module\">3. WEB Module</h4>\n<ul>\n<li><strong>WEB_ENABLE</strong>: Enable (<code>true</code>) or disable (<code>false</code>) web search.</li>\n<li><strong>SERPER_API_KEY</strong>: Serper search API key.</li>\n</ul>\n<h4 id=\"4-model-module\">4. MODEL Module</h4>\n<ul>\n<li><strong>MODEL_API_KEY</strong>: API key for the model service.</li>\n<li><strong>MODEL_NAME</strong>: Model name to use (e.g., <code>gpt-4o-mini</code>).</li>\n<li><strong>MODEL_MAX_TOKENS</strong>: Maximum number of tokens the model can generate.</li>\n</ul>\n<h4 id=\"5-env-module\">5. ENV Module</h4>\n<ul>\n<li><strong>PROXY_URL</strong>: Proxy server URL (set to <code>null</code> if no proxy is needed).</li>\n<li><strong>AGENT_TYPE</strong>: Agent type, e.g., <code>reasoner</code>.</li>\n</ul>\n<h4 id=\"6-log-module\">6. LOG Module</h4>\n<ul>\n<li><strong>LOG_PATH</strong>: Path to the log file.</li>\n<li><strong>LOG_TYPE</strong>: Log format (e.g., <code>markdown</code>).</li>\n<li><strong>LOG_STEP_NAME</strong>: Log step name.</li>\n<li><strong>CHECK_LOG_PROMPT</strong>: Enable log prompt checking (<code>true</code> or <code>false</code>).</li>\n</ul>\n<h2 id=\"step-4-configure-dora-operator\">Step 4: Configure Dora Operator</h2>\n<p>Create a <code>reasoner_agent.py</code> script:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> os</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> dora </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> DoraStatus</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> pyarrow </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> pa</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.kernel.utils.util </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> load_agent_config, create_agent_output</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.run.run_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.files.dir </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> get_relative_path</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.log.agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> record_agent_result_log</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Operator</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#B392F0\"> on_event</span><span style=\"color:#E1E4E8\">(self, dora_event, send_output) -> DoraStatus:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> dora_event.get(</span><span style=\"color:#9ECBFF\">\"type\"</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">==</span><span style=\"color:#9ECBFF\"> \"INPUT\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            agent_inputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">'data'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'task'</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            event_id </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> dora_event.get(</span><span style=\"color:#9ECBFF\">\"id\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">            if</span><span style=\"color:#E1E4E8\"> event_id </span><span style=\"color:#F97583\">in</span><span style=\"color:#E1E4E8\"> agent_inputs:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                task </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> dora_event[</span><span style=\"color:#9ECBFF\">\"value\"</span><span style=\"color:#E1E4E8\">][</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].as_py()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                yaml_file_path </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> get_relative_path(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    current_file</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">__file__</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    sibling_directory_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'configs'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    target_file_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'reasoner_agent.yml'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                inputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> load_agent_config(yaml_file_path)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                inputs[</span><span style=\"color:#9ECBFF\">\"task\"</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> task</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                agent_result </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent(</span><span style=\"color:#FFAB70\">agent_config</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">inputs)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                log_step_name </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> inputs.get(</span><span style=\"color:#9ECBFF\">'log_step_name'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"Step_one\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                record_agent_result_log(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_config</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">inputs,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"1, </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">log_step_name</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">: {task: agent_result}}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                output_data </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> create_agent_output(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'keyword_results'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">agent_result,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    dataflow_status</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'IS_DATAFLOW_END'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">True</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                send_output(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">                    \"reasoner_result\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                    pa.array([output_data]),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                    dora_event.get(</span><span style=\"color:#9ECBFF\">'metadata'</span><span style=\"color:#E1E4E8\">, {})</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">                print</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'reasoner_results:'</span><span style=\"color:#E1E4E8\">, agent_result)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">        return</span><span style=\"color:#E1E4E8\"> DoraStatus.</span><span style=\"color:#79B8FF\">CONTINUE</span></span></code></pre>\n<h2 id=\"step-5-configure-dora-dataflow\">Step 5: Configure Dora Dataflow</h2>\n<p>Create or edit the <code>reasoner_dataflow.yml</code> file:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">nodes</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../../node-hub/terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">dynamic</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      reasoner_results</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner-agent/reasoner_results</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    operator</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      python</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">scripts/reasoner_agent.py</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        task</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input/data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        - </span><span style=\"color:#9ECBFF\">reasoner_results</span></span></code></pre>\n<h3 id=\"node-descriptions\">Node Descriptions</h3>\n<ul>\n<li><strong>terminal-input</strong>:\n<ul>\n<li><strong>Function</strong>: Handles initial input.</li>\n<li><strong>Action</strong>: Installs the <code>terminal-input</code> module.</li>\n<li><strong>Output</strong>: Generates <code>data</code>, passing it to <code>reasoner-agent</code>.</li>\n<li><strong>Input</strong>: Receives <code>reasoner_results</code>.</li>\n</ul>\n</li>\n<li><strong>reasoner-agent</strong>:\n<ul>\n<li><strong>Function</strong>: Processes tasks and generates results.</li>\n<li><strong>Action</strong>: Runs the <code>reasoner_agent.py</code> script.</li>\n<li><strong>Input</strong>: Receives <code>data</code> from <code>terminal-input</code> as <code>task</code>.</li>\n<li><strong>Output</strong>: Generates <code>reasoner_results</code>, sending them back to <code>terminal-input</code>.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-6-run-dora-dataflow\">Step 6: Run Dora Dataflow</h2>\n<h3 id=\"start-the-dataflow-using-dora-rs-cli\">Start the Dataflow Using Dora-RS CLI</h3>\n<ol>\n<li>Start the coordinator</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span></span></code></pre>\n<ol start=\"2\">\n<li>Build the dataflow</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> reasoner_dataflow.yml</span></span></code></pre>\n<ol start=\"3\">\n<li>Start the dataflow with auto-attach</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> reasoner_dataflow.yml</span><span style=\"color:#79B8FF\"> --attach</span></span></code></pre>\n<ol start=\"4\">\n<li>In another terminal, input tasks to the agent</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span></code></pre>\n<p>Then type your queries to interact with the agent.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>This “Hello World” example demonstrates:</p>\n<ul>\n<li>How to set up a basic MoFA agent using templates</li>\n<li>Configuration file structure and parameters</li>\n<li>Integration with Dora-RS dataflow</li>\n<li>Running and interacting with the agent</li>\n</ul>\n<p>This serves as the foundation for building more complex agents and understanding the MoFA framework.</p>",{headings:577,localImagePaths:596,remoteImagePaths:597,frontmatter:598,imagePaths:599},[578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595],{depth:341,slug:508,text:509},{depth:100,slug:511,text:512},{depth:100,slug:514,text:515},{depth:100,slug:517,text:518},{depth:59,slug:520,text:521},{depth:59,slug:523,text:524},{depth:217,slug:526,text:527},{depth:217,slug:529,text:530},{depth:217,slug:532,text:533},{depth:217,slug:535,text:536},{depth:217,slug:538,text:539},{depth:217,slug:541,text:542},{depth:100,slug:544,text:545},{depth:100,slug:547,text:548},{depth:59,slug:550,text:551},{depth:100,slug:553,text:554},{depth:59,slug:556,text:557},{depth:100,slug:559,text:560},[],[],{title:569,description:570},[],"3. examples/hello-world-dora.md","2-getting-started/build-agent",{id:601,data:603,body:606,filePath:607,digest:608,rendered:609,legacyId:677},{title:604,description:605},"Build Your Own Agent","A comprehensive guide to building agents from scratch with MoFA","# 从零开始构建一个Agent的指南\n\n## 1. 概述\n\n本指南将带你从零开始构建一个Agent。Agent是一种能够执行特定任务的智能体，它可以接收输入、处理数据并生成输出。我们将使用Python和一些常见的工具来构建这个Agent。\n\n## 2. 环境准备\n\n在开始之前，确保你已经安装了以下工具和库：\n\n- Python 3.10 或更高版本\n- `pip` 包管理器\n- `rust` 语言\n- `mofa` 库\n\n你可以参考以下文档安装这些依赖：\n[安装文档](installation)\n\n## 3. 创建项目结构\n\n首先，创建一个新的项目目录，并在其中创建以下文件和目录：\n你可以参考以下的目录结构`python/agent-hub/agent-template`,并且你可以在`agent-hub`下面找到其他案例\n\n```\n├── README.md                # 项目说明文档，包含项目概述、使用方法和贡献指南\n├── agent                    # Agent主目录\n│   ├── __init__.py          # Python包初始化文件，使agent目录成为可导入的Python包\n│   ├── configs              # 配置文件目录\n│   │   └── agent.yml        # Agent配置文件，包含模型、日志等配置\n│   └── main.py              # Agent主程序入口，包含核心逻辑\n├── pyproject.toml           # Python项目配置文件，定义依赖和构建配置\n└── tests                    # 测试目录\n    └── test_main.py         # 主程序测试文件，包含单元测试\n```\n\n## 4. 配置Agent\n\n### 4.1 运行现有代码并测试完成\n将Agent的核心功能进行测试。 例如\n\n```python\ndef my_agent_function(input_param1: str, input_param2: int) -> dict:\n    \"\"\"\n    实现Agent核心功能的函数。\n    \n    :param input_param1: 字符串类型的输入参数1\n    :param input_param2: 整数类型的输入参数2\n    :return: 返回一个字典，包含处理结果\n    \"\"\"\n    # 实现具体的功能逻辑\n    result = {\n        \"output1\": \"processed_value1\",\n        \"output2\": \"processed_value2\"\n    }\n    return result\n```\n\n### 4.2 复制mofa-agent-template到某个文件夹下\n将`mofa-agent-template`复制到一个新的文件夹中，作为新Agent的基础。\n\n```bash\ncp -r mofa-agent-template my-new-agent\n```\n\n### 4.3 更改文件夹名称\n将复制的模板文件夹及其内部的`agent`文件夹重命名为您的Agent名称。\n\n```bash\nmv my-new-agent/agent-template my-new-agent/my-new-agent\nmv my-new-agent/my-new-agent/agent my-new-agent/my-new-agent/my-new-agent\n```\n\n### 4.4 修改pyproject.toml的配置\n更新`pyproject.toml`文件，配置您的Agent名称、版本和依赖项。\n\n```toml\n# [tool.poetry] 部分定义了项目的基本信息\n[tool.poetry]\nname = \"agent\"  # [必改] 项目名称，需改为实际Agent名称\nversion = \"0.1.1\"  # [可选] 项目版本号，可根据需要修改\nauthors = [  # [可选] 作者列表，可根据需要修改\n    \"ZongHuan Wu \",\n    \"Cheng Chen\",\n]\ndescription = \"A simple agent template\"  # [必改] 项目描述，需改为实际功能描述\nlicense = \"MIT License\"  # [可选] 开源许可证，可根据需要修改\nhomepage = \"https://github.com/mofa-org/mofa\"  # [可选] 项目主页，可根据需要修改\ndocumentation = \"https://github.com/mofa-org/mofa/blob/main/README.md\"  # [可选] 文档地址，可根据需要修改\nreadme = \"README.md\"  # [建议保留] 主说明文件\npackages = [{ include = \"agent\" }]  # [必改] 包含的Python包，需改为实际包名\n\n# [tool.poetry.dependencies] 定义了项目依赖\n[tool.poetry.dependencies]\npyarrow = \">= 5.0.0\"  # [可选] 依赖pyarrow库，版本要求5.0.0以上，可根据需要添加其他依赖\n\n# [tool.poetry.scripts] 定义了可执行脚本\n[tool.poetry.scripts]\nagent = \"agent.main:main\"  # [必改] 定义agent命令指向agent.main模块的main函数，需改为实际模块路径\n\n# [build-system] 定义了构建系统配置\n[build-system]\nrequires = [\"poetry-core>=1.8.0\"]  # [建议保留] 构建系统依赖\nbuild-backend = \"poetry.core.masonry.api\"  # [建议保留] 使用的构建后端\n```\n\n### 4.5 将现有代码复制到main.py中\n- main.py中是你的Agent的主要逻辑,你需要在这里实现你的Agent的功能.并且如果你有依赖文件的话,都放到这个目录下\n- 如果你的agent需要接受其他的agent传递过来的参数，请使用`agent.receive_parameter(parameter_name='')`这个函数去接受参数。但是`receive_parameter`函数接受的结果是字符串类型的\n- 请你将代码中的密钥内容放到一个`.env`文件中\n- 更多详细的编写规则请查看 [low_code_integration](../examples/202-01-18/low_code_integration.md)\n\n以下是一个deepseek的原始代码代码:\n```python\n# Please install OpenAI SDK first: `pip3 install openai`\n\nfrom openai import OpenAI\n\nclient = OpenAI(api_key=\"<DeepSeek API Key>\", base_url=\"https://api.deepseek.com\")\n\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant\"},\n        {\"role\": \"user\", \"content\": \"Hello\"},\n    ],\n    stream=False\n)\n\nprint(response.choices[0].message.content)\n```\n\n这是一个deepseek-agent的main.py的内容\n```python\nimport json\nfrom mofa.agent_build.base.base_agent import MofaAgent\nimport os\nfrom dotenv import load_dotenv\nfrom openai import OpenAI\nfrom deepseek import agent_config_dir_path\nfrom mofa.utils.files.read import read_yaml\n\n\ndef main():\n    agent = MofaAgent(agent_name='deepseek')\n    while True:\n        load_dotenv(agent_config_dir_path + '/.env.secret')\n        client = OpenAI(api_key=os.getenv('LLM_API_KEY'), base_url=\"https://api.deepseek.com\")\n        response = client.chat.completions.create(\n            model=\"deepseek-chat\",\n            messages=[\n                {\"role\": \"system\", \"content\": json.dumps(read_yaml(file_path = agent_config_dir_path + '/configs/agent.yml').get('agent').get('prompt'))},\n                {\"role\": \"user\", \"content\":  f\"user query: {agent.receive_parameter(parameter_name='query')}  serper search data : {json.dumps(agent.receive_parameter(parameter_name='serper_result'))}\"},\n            ],\n            stream=False\n        )\n        agent.send_output(agent_output_name='deepseek_result', agent_result=response.choices[0].message.content)\nif __name__ == \"__main__\":\n    main()\n```\n\n## 5. 填写README文件\n在`README.md`中说明Agent的逻辑和使用方法。\n\n```markdown\n# My New Agent\n\n## 概述\n这是一个用于处理特定任务的Mofa Agent。它接收两个输入参数（`input_param1`和`input_param2`），并生成两个输出值（`output1`和`output2`）....\n```\n\n## 6. 编写运行Agent-Dataflow\n\n### 6.1 概述\n\nAgent Dataflow 是用于定义和管理多个Agent之间数据流动的配置文件。通过Dataflow，您可以指定每个Agent的输入、输出以及它们之间的依赖关系。本文将指导您如何编写一个Agent Dataflow配置文件。\n\n### 6.2 Dataflow配置文件结构\n\n一个典型的Dataflow配置文件包含以下部分：\n\n- **nodes**: 定义所有参与的Agent和节点。\n- **build**: 指定如何构建和安装Agent。\n- **path**: 指定Agent的路径。\n- **outputs**: 定义Agent的输出。\n- **inputs**: 定义Agent的输入。\n- **env**: 设置环境变量。\n\n### 6.3 示例Dataflow配置文件\n\n以下是一个示例Dataflow配置文件，展示了如何定义两个节点（`terminal-input`和`readerlm-agent`）及其数据流动。\n\n以下是为这段YAML配置文件添加的详细注释：\n- 其中`terminal-input`为`dynamic`节点，即可以接受多个node输入，并且将多个node的输入在cmd命令端展示的\n\n```yaml\nnodes:\n  # 定义第一个节点：terminal-input\n  - id: terminal-input  # 节点的唯一标识符\n    build: pip install -e ../../node-hub/terminal-input  # 构建命令，安装terminal-input节点\n    path: dynamic  # 节点路径，dynamic表示动态路径\n    outputs:\n      - data  # 定义节点的输出，名称为data\n    inputs:\n      readerlm_result: readerlm-agent/readerlm_result  # 定义节点的输入，来源为readerlm-agent节点的readerlm_result输出\n\n  # 定义第二个节点：readerlm-agent\n  - id: readerlm-agent  # 节点的唯一标识符\n    build: pip install -e ../../agent-hub/readerlm  # 构建命令，安装readerlm-agent\n    path: readerlm  # 节点路径，指向readerlm目录\n    outputs:\n      - readerlm_result  # 定义节点的输出，名称为readerlm_result\n    inputs:\n      html: terminal-input/data  # 定义节点的输入，来源为terminal-input节点的data输出\n    env:\n      IS_DATAFLOW_END: true  # 设置环境变量，表示数据流到这个节点是否结束整体的流程\n      MODEL_DEVICE: cpu  # 设置环境变量，指定模型运行设备为CPU\n```\n\n### 6.4 详细说明\n\n#### 节点定义\n\n每个节点通过`id`唯一标识，并包含以下属性：\n\n- **build**: 指定如何构建和安装该节点。通常使用`pip install -e`来安装本地开发的Agent。\n- **path**: 指定Agent的路径。可以是动态路径（`dynamic`）或具体路径（如`readerlm`）。\n- **outputs**: 定义该节点的输出。每个输出是一个字符串，表示输出的名称。\n- **inputs**: 定义该节点的输入。输入是一个字典，键是输入名称，值是来源节点的输出（格式为`来源节点ID/输出名称`）。\n- **env**: 设置环境变量。这些变量将在节点运行时生效。\n\n#### 示例说明\n\n在示例配置文件中：\n\n- **terminal-input** 节点：\n  - 通过`pip install -e ../../node-hub/terminal-input`安装。\n  - 路径为`dynamic`，表示动态路径。\n  - 输出为`data`。\n  - 输入为`readerlm-agent`节点的`readerlm_result`输出。\n\n- **readerlm-agent** 节点：\n  - 通过`pip install -e ../../agent-hub/readerlm`安装。\n  - 路径为`readerlm`。\n  - 输出为`readerlm_result`。\n  - 输入为`terminal-input`节点的`data`输出。\n  - 设置了两个环境变量：`IS_DATAFLOW_END`和`MODEL_DEVICE`。\n\n### 6.5 运行Dataflow\n\n如果你的Dataflow中包含`dynamic`节点，则开启两个命令端界面，否则就开启一个就可以了\n\n要运行Dataflow，使用以下命令：\n\n#### 命令端1\n```bash\ndora up && dora build dataflow.yml && dora start dataflow.yml --attach\n```\n\n#### 命令端2(如果是dynamic节点)\n```bash\nterminal-input\n```","src/content/docs/2. getting-started/build-agent.md","2cf26b9b31c82d4f",{html:610,metadata:611},"<h1 id=\"从零开始构建一个agent的指南\">从零开始构建一个Agent的指南</h1>\n<h2 id=\"1-概述\">1. 概述</h2>\n<p>本指南将带你从零开始构建一个Agent。Agent是一种能够执行特定任务的智能体，它可以接收输入、处理数据并生成输出。我们将使用Python和一些常见的工具来构建这个Agent。</p>\n<h2 id=\"2-环境准备\">2. 环境准备</h2>\n<p>在开始之前，确保你已经安装了以下工具和库：</p>\n<ul>\n<li>Python 3.10 或更高版本</li>\n<li><code>pip</code> 包管理器</li>\n<li><code>rust</code> 语言</li>\n<li><code>mofa</code> 库</li>\n</ul>\n<p>你可以参考以下文档安装这些依赖：\n<a href=\"installation\">安装文档</a></p>\n<h2 id=\"3-创建项目结构\">3. 创建项目结构</h2>\n<p>首先，创建一个新的项目目录，并在其中创建以下文件和目录：\n你可以参考以下的目录结构<code>python/agent-hub/agent-template</code>,并且你可以在<code>agent-hub</code>下面找到其他案例</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>├── README.md                # 项目说明文档，包含项目概述、使用方法和贡献指南</span></span>\n<span class=\"line\"><span>├── agent                    # Agent主目录</span></span>\n<span class=\"line\"><span>│   ├── __init__.py          # Python包初始化文件，使agent目录成为可导入的Python包</span></span>\n<span class=\"line\"><span>│   ├── configs              # 配置文件目录</span></span>\n<span class=\"line\"><span>│   │   └── agent.yml        # Agent配置文件，包含模型、日志等配置</span></span>\n<span class=\"line\"><span>│   └── main.py              # Agent主程序入口，包含核心逻辑</span></span>\n<span class=\"line\"><span>├── pyproject.toml           # Python项目配置文件，定义依赖和构建配置</span></span>\n<span class=\"line\"><span>└── tests                    # 测试目录</span></span>\n<span class=\"line\"><span>    └── test_main.py         # 主程序测试文件，包含单元测试</span></span></code></pre>\n<h2 id=\"4-配置agent\">4. 配置Agent</h2>\n<h3 id=\"41-运行现有代码并测试完成\">4.1 运行现有代码并测试完成</h3>\n<p>将Agent的核心功能进行测试。 例如</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> my_agent_function</span><span style=\"color:#E1E4E8\">(input_param1: </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">, input_param2: </span><span style=\"color:#79B8FF\">int</span><span style=\"color:#E1E4E8\">) -> </span><span style=\"color:#79B8FF\">dict</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    实现Agent核心功能的函数。</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    </span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    :param input_param1: 字符串类型的输入参数1</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    :param input_param2: 整数类型的输入参数2</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    :return: 返回一个字典，包含处理结果</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    # 实现具体的功能逻辑</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    result </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"output1\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"processed_value1\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"output2\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"processed_value2\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> result</span></span></code></pre>\n<h3 id=\"42-复制mofa-agent-template到某个文件夹下\">4.2 复制mofa-agent-template到某个文件夹下</h3>\n<p>将<code>mofa-agent-template</code>复制到一个新的文件夹中，作为新Agent的基础。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">cp</span><span style=\"color:#79B8FF\"> -r</span><span style=\"color:#9ECBFF\"> mofa-agent-template</span><span style=\"color:#9ECBFF\"> my-new-agent</span></span></code></pre>\n<h3 id=\"43-更改文件夹名称\">4.3 更改文件夹名称</h3>\n<p>将复制的模板文件夹及其内部的<code>agent</code>文件夹重命名为您的Agent名称。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">mv</span><span style=\"color:#9ECBFF\"> my-new-agent/agent-template</span><span style=\"color:#9ECBFF\"> my-new-agent/my-new-agent</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">mv</span><span style=\"color:#9ECBFF\"> my-new-agent/my-new-agent/agent</span><span style=\"color:#9ECBFF\"> my-new-agent/my-new-agent/my-new-agent</span></span></code></pre>\n<h3 id=\"44-修改pyprojecttoml的配置\">4.4 修改pyproject.toml的配置</h3>\n<p>更新<code>pyproject.toml</code>文件，配置您的Agent名称、版本和依赖项。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"toml\"><code><span class=\"line\"><span style=\"color:#6A737D\"># [tool.poetry] 部分定义了项目的基本信息</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">tool</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">poetry</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">name = </span><span style=\"color:#9ECBFF\">\"agent\"</span><span style=\"color:#6A737D\">  # [必改] 项目名称，需改为实际Agent名称</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">version = </span><span style=\"color:#9ECBFF\">\"0.1.1\"</span><span style=\"color:#6A737D\">  # [可选] 项目版本号，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">authors = [  </span><span style=\"color:#6A737D\"># [可选] 作者列表，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"ZongHuan Wu \"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"Cheng Chen\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">description = </span><span style=\"color:#9ECBFF\">\"A simple agent template\"</span><span style=\"color:#6A737D\">  # [必改] 项目描述，需改为实际功能描述</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">license = </span><span style=\"color:#9ECBFF\">\"MIT License\"</span><span style=\"color:#6A737D\">  # [可选] 开源许可证，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">homepage = </span><span style=\"color:#9ECBFF\">\"https://github.com/mofa-org/mofa\"</span><span style=\"color:#6A737D\">  # [可选] 项目主页，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">documentation = </span><span style=\"color:#9ECBFF\">\"https://github.com/mofa-org/mofa/blob/main/README.md\"</span><span style=\"color:#6A737D\">  # [可选] 文档地址，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">readme = </span><span style=\"color:#9ECBFF\">\"README.md\"</span><span style=\"color:#6A737D\">  # [建议保留] 主说明文件</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">packages = [{ include = </span><span style=\"color:#9ECBFF\">\"agent\"</span><span style=\"color:#E1E4E8\"> }]  </span><span style=\"color:#6A737D\"># [必改] 包含的Python包，需改为实际包名</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># [tool.poetry.dependencies] 定义了项目依赖</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">tool</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">poetry</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">dependencies</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">pyarrow = </span><span style=\"color:#9ECBFF\">\">= 5.0.0\"</span><span style=\"color:#6A737D\">  # [可选] 依赖pyarrow库，版本要求5.0.0以上，可根据需要添加其他依赖</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># [tool.poetry.scripts] 定义了可执行脚本</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">tool</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">poetry</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">scripts</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">agent = </span><span style=\"color:#9ECBFF\">\"agent.main:main\"</span><span style=\"color:#6A737D\">  # [必改] 定义agent命令指向agent.main模块的main函数，需改为实际模块路径</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># [build-system] 定义了构建系统配置</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">build-system</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">requires = [</span><span style=\"color:#9ECBFF\">\"poetry-core>=1.8.0\"</span><span style=\"color:#E1E4E8\">]  </span><span style=\"color:#6A737D\"># [建议保留] 构建系统依赖</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">build-backend = </span><span style=\"color:#9ECBFF\">\"poetry.core.masonry.api\"</span><span style=\"color:#6A737D\">  # [建议保留] 使用的构建后端</span></span></code></pre>\n<h3 id=\"45-将现有代码复制到mainpy中\">4.5 将现有代码复制到main.py中</h3>\n<ul>\n<li>main.py中是你的Agent的主要逻辑,你需要在这里实现你的Agent的功能.并且如果你有依赖文件的话,都放到这个目录下</li>\n<li>如果你的agent需要接受其他的agent传递过来的参数，请使用<code>agent.receive_parameter(parameter_name='')</code>这个函数去接受参数。但是<code>receive_parameter</code>函数接受的结果是字符串类型的</li>\n<li>请你将代码中的密钥内容放到一个<code>.env</code>文件中</li>\n<li>更多详细的编写规则请查看 <a href=\"../examples/202-01-18/low_code_integration.md\">low_code_integration</a></li>\n</ul>\n<p>以下是一个deepseek的原始代码代码:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#6A737D\"># Please install OpenAI SDK first: `pip3 install openai`</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> openai </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> OpenAI</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">client </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> OpenAI(</span><span style=\"color:#FFAB70\">api_key</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"&#x3C;DeepSeek API Key>\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">base_url</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://api.deepseek.com\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> client.chat.completions.create(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"deepseek-chat\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    messages</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"system\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"You are a helpful assistant\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"Hello\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    stream</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">False</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">print</span><span style=\"color:#E1E4E8\">(response.choices[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].message.content)</span></span></code></pre>\n<p>这是一个deepseek-agent的main.py的内容</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> json</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> MofaAgent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> os</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> dotenv </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> load_dotenv</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> openai </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> OpenAI</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> deepseek </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> agent_config_dir_path</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.files.read </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> read_yaml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">():</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> MofaAgent(</span><span style=\"color:#FFAB70\">agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'deepseek'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    while</span><span style=\"color:#79B8FF\"> True</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        load_dotenv(agent_config_dir_path </span><span style=\"color:#F97583\">+</span><span style=\"color:#9ECBFF\"> '/.env.secret'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        client </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> OpenAI(</span><span style=\"color:#FFAB70\">api_key</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_API_KEY'</span><span style=\"color:#E1E4E8\">), </span><span style=\"color:#FFAB70\">base_url</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://api.deepseek.com\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> client.chat.completions.create(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"deepseek-chat\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            messages</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"system\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: json.dumps(read_yaml(</span><span style=\"color:#FFAB70\">file_path</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> agent_config_dir_path </span><span style=\"color:#F97583\">+</span><span style=\"color:#9ECBFF\"> '/configs/agent.yml'</span><span style=\"color:#E1E4E8\">).get(</span><span style=\"color:#9ECBFF\">'agent'</span><span style=\"color:#E1E4E8\">).get(</span><span style=\"color:#9ECBFF\">'prompt'</span><span style=\"color:#E1E4E8\">))},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">:  </span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"user query: </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">agent.receive_parameter(</span><span style=\"color:#FFAB70\">parameter_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'query'</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">  serper search data : </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">json.dumps(agent.receive_parameter(</span><span style=\"color:#FFAB70\">parameter_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'serper_result'</span><span style=\"color:#E1E4E8\">))</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            ],</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            stream</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">False</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span><span style=\"color:#FFAB70\">agent_output_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'deepseek_result'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">response.choices[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].message.content)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#79B8FF\"> __name__</span><span style=\"color:#F97583\"> ==</span><span style=\"color:#9ECBFF\"> \"__main__\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    main()</span></span></code></pre>\n<h2 id=\"5-填写readme文件\">5. 填写README文件</h2>\n<p>在<code>README.md</code>中说明Agent的逻辑和使用方法。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\"># My New Agent</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\">## 概述</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">这是一个用于处理特定任务的Mofa Agent。它接收两个输入参数（</span><span style=\"color:#79B8FF\">`input_param1`</span><span style=\"color:#E1E4E8\">和</span><span style=\"color:#79B8FF\">`input_param2`</span><span style=\"color:#E1E4E8\">），并生成两个输出值（</span><span style=\"color:#79B8FF\">`output1`</span><span style=\"color:#E1E4E8\">和</span><span style=\"color:#79B8FF\">`output2`</span><span style=\"color:#E1E4E8\">）....</span></span></code></pre>\n<h2 id=\"6-编写运行agent-dataflow\">6. 编写运行Agent-Dataflow</h2>\n<h3 id=\"61-概述\">6.1 概述</h3>\n<p>Agent Dataflow 是用于定义和管理多个Agent之间数据流动的配置文件。通过Dataflow，您可以指定每个Agent的输入、输出以及它们之间的依赖关系。本文将指导您如何编写一个Agent Dataflow配置文件。</p>\n<h3 id=\"62-dataflow配置文件结构\">6.2 Dataflow配置文件结构</h3>\n<p>一个典型的Dataflow配置文件包含以下部分：</p>\n<ul>\n<li><strong>nodes</strong>: 定义所有参与的Agent和节点。</li>\n<li><strong>build</strong>: 指定如何构建和安装Agent。</li>\n<li><strong>path</strong>: 指定Agent的路径。</li>\n<li><strong>outputs</strong>: 定义Agent的输出。</li>\n<li><strong>inputs</strong>: 定义Agent的输入。</li>\n<li><strong>env</strong>: 设置环境变量。</li>\n</ul>\n<h3 id=\"63-示例dataflow配置文件\">6.3 示例Dataflow配置文件</h3>\n<p>以下是一个示例Dataflow配置文件，展示了如何定义两个节点（<code>terminal-input</code>和<code>readerlm-agent</code>）及其数据流动。</p>\n<p>以下是为这段YAML配置文件添加的详细注释：</p>\n<ul>\n<li>其中<code>terminal-input</code>为<code>dynamic</code>节点，即可以接受多个node输入，并且将多个node的输入在cmd命令端展示的</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">nodes</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # 定义第一个节点：terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input</span><span style=\"color:#6A737D\">  # 节点的唯一标识符</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../node-hub/terminal-input</span><span style=\"color:#6A737D\">  # 构建命令，安装terminal-input节点</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">dynamic</span><span style=\"color:#6A737D\">  # 节点路径，dynamic表示动态路径</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">data</span><span style=\"color:#6A737D\">  # 定义节点的输出，名称为data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      readerlm_result</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">readerlm-agent/readerlm_result</span><span style=\"color:#6A737D\">  # 定义节点的输入，来源为readerlm-agent节点的readerlm_result输出</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # 定义第二个节点：readerlm-agent</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">readerlm-agent</span><span style=\"color:#6A737D\">  # 节点的唯一标识符</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../agent-hub/readerlm</span><span style=\"color:#6A737D\">  # 构建命令，安装readerlm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">readerlm</span><span style=\"color:#6A737D\">  # 节点路径，指向readerlm目录</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">readerlm_result</span><span style=\"color:#6A737D\">  # 定义节点的输出，名称为readerlm_result</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      html</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input/data</span><span style=\"color:#6A737D\">  # 定义节点的输入，来源为terminal-input节点的data输出</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    env</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      IS_DATAFLOW_END</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span><span style=\"color:#6A737D\">  # 设置环境变量，表示数据流到这个节点是否结束整体的流程</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      MODEL_DEVICE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">cpu</span><span style=\"color:#6A737D\">  # 设置环境变量，指定模型运行设备为CPU</span></span></code></pre>\n<h3 id=\"64-详细说明\">6.4 详细说明</h3>\n<h4 id=\"节点定义\">节点定义</h4>\n<p>每个节点通过<code>id</code>唯一标识，并包含以下属性：</p>\n<ul>\n<li><strong>build</strong>: 指定如何构建和安装该节点。通常使用<code>pip install -e</code>来安装本地开发的Agent。</li>\n<li><strong>path</strong>: 指定Agent的路径。可以是动态路径（<code>dynamic</code>）或具体路径（如<code>readerlm</code>）。</li>\n<li><strong>outputs</strong>: 定义该节点的输出。每个输出是一个字符串，表示输出的名称。</li>\n<li><strong>inputs</strong>: 定义该节点的输入。输入是一个字典，键是输入名称，值是来源节点的输出（格式为<code>来源节点ID/输出名称</code>）。</li>\n<li><strong>env</strong>: 设置环境变量。这些变量将在节点运行时生效。</li>\n</ul>\n<h4 id=\"示例说明\">示例说明</h4>\n<p>在示例配置文件中：</p>\n<ul>\n<li>\n<p><strong>terminal-input</strong> 节点：</p>\n<ul>\n<li>通过<code>pip install -e ../../node-hub/terminal-input</code>安装。</li>\n<li>路径为<code>dynamic</code>，表示动态路径。</li>\n<li>输出为<code>data</code>。</li>\n<li>输入为<code>readerlm-agent</code>节点的<code>readerlm_result</code>输出。</li>\n</ul>\n</li>\n<li>\n<p><strong>readerlm-agent</strong> 节点：</p>\n<ul>\n<li>通过<code>pip install -e ../../agent-hub/readerlm</code>安装。</li>\n<li>路径为<code>readerlm</code>。</li>\n<li>输出为<code>readerlm_result</code>。</li>\n<li>输入为<code>terminal-input</code>节点的<code>data</code>输出。</li>\n<li>设置了两个环境变量：<code>IS_DATAFLOW_END</code>和<code>MODEL_DEVICE</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"65-运行dataflow\">6.5 运行Dataflow</h3>\n<p>如果你的Dataflow中包含<code>dynamic</code>节点，则开启两个命令端界面，否则就开启一个就可以了</p>\n<p>要运行Dataflow，使用以下命令：</p>\n<h4 id=\"命令端1\">命令端1</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> dataflow.yml</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> dataflow.yml</span><span style=\"color:#79B8FF\"> --attach</span></span></code></pre>\n<h4 id=\"命令端2如果是dynamic节点\">命令端2(如果是dynamic节点)</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span></code></pre>",{headings:612,localImagePaths:673,remoteImagePaths:674,frontmatter:675,imagePaths:676},[613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,663,665,668,670],{depth:341,slug:614,text:615},"从零开始构建一个agent的指南","从零开始构建一个Agent的指南",{depth:100,slug:617,text:618},"1-概述","1. 概述",{depth:100,slug:620,text:621},"2-环境准备","2. 环境准备",{depth:100,slug:623,text:624},"3-创建项目结构","3. 创建项目结构",{depth:100,slug:626,text:627},"4-配置agent","4. 配置Agent",{depth:59,slug:629,text:630},"41-运行现有代码并测试完成","4.1 运行现有代码并测试完成",{depth:59,slug:632,text:633},"42-复制mofa-agent-template到某个文件夹下","4.2 复制mofa-agent-template到某个文件夹下",{depth:59,slug:635,text:636},"43-更改文件夹名称","4.3 更改文件夹名称",{depth:59,slug:638,text:639},"44-修改pyprojecttoml的配置","4.4 修改pyproject.toml的配置",{depth:59,slug:641,text:642},"45-将现有代码复制到mainpy中","4.5 将现有代码复制到main.py中",{depth:100,slug:644,text:645},"5-填写readme文件","5. 填写README文件",{depth:100,slug:647,text:648},"6-编写运行agent-dataflow","6. 编写运行Agent-Dataflow",{depth:59,slug:650,text:651},"61-概述","6.1 概述",{depth:59,slug:653,text:654},"62-dataflow配置文件结构","6.2 Dataflow配置文件结构",{depth:59,slug:656,text:657},"63-示例dataflow配置文件","6.3 示例Dataflow配置文件",{depth:59,slug:659,text:660},"64-详细说明","6.4 详细说明",{depth:217,slug:662,text:662},"节点定义",{depth:217,slug:664,text:664},"示例说明",{depth:59,slug:666,text:667},"65-运行dataflow","6.5 运行Dataflow",{depth:217,slug:669,text:669},"命令端1",{depth:217,slug:671,text:672},"命令端2如果是dynamic节点","命令端2(如果是dynamic节点)",[],[],{title:604,description:605},[],"2. getting-started/build-agent.md"];

export { _astro_dataLayerContent as default };
