const id = "3. examples/hello-world-dora.md";
						const collection = "docs";
						const slug = "3-examples/hello-world-dora";
						const body = "\n# \"Hello World\" Agent Development Based on Dora\n\n[English](hello_world_dora.md) | [简体中文](hello_world_dora_cn.md)\n\n## Step 1: Install the Development and Runtime Environment\n\nRefer to the [Installation Guide](../2.%20getting-started/installation) to complete the setup of the development and runtime environment.\n\n## Step 2: Obtain the Intelligent Agent Template\n\n1. Go to the [Dora Intelligent Agent Template Repository](../../mofa/agent_templates).\n2. Select the simplest [Reasoner Template](../../mofa/agent_templates/reasoner).\n3. Copy the template to your development directory.\n4. Review the template description: [README](../../mofa/agent_templates/reasoner/README.md).\n\n## Step 3: Configuration File Setup\n\n### Configuration File Overview\n\nCreate or edit the `reasoner_agent.yml` file:\n\n```yaml\nAGENT:\n  ROLE: Knowledgeable Assistant\n  BACKSTORY: <Your background description>\n  TASK: null  # Specific task\n\nRAG:\n  RAG_ENABLE: false\n  MODULE_PATH: null\n  RAG_MODEL_NAME: text-embedding-3-small\n  COLLECTION_NAME: mofa\n  IS_UPLOAD_FILE: true\n  CHROMA_PATH: ./data/output/chroma_store\n  FILES_PATH:\n    - ./data/output/arxiv_papers\n  ENCODING: utf-8\n  CHUNK_SIZE: 256\n  RAG_SEARCH_NUM: 2\n\nWEB:\n  WEB_ENABLE: false\n  SERPER_API_KEY: <Your Serper API key>\n  SEARCH_NUM: 20\n  SEARCH_ENGINE_TIMEOUT: 5\n\nMODEL:\n  MODEL_API_KEY: <Your model API key>\n  MODEL_NAME: gpt-4o-mini\n  MODEL_MAX_TOKENS: 2048\n\nENV:\n  PROXY_URL: null\n  AGENT_TYPE: reasoner\n\nLOG:\n  LOG_PATH: ./data/output/log/log.md\n  LOG_TYPE: markdown\n  LOG_STEP_NAME: reasoner_result\n  CHECK_LOG_PROMPT: true\n```\n\n### Configuration Details\n\n#### 1. AGENT Module\n\n- **ROLE**: Name of the assistant role.\n- **BACKSTORY**: Background description of the assistant.\n- **TASK**: Specific task (default is `null`).\n\n#### 2. RAG Module\n\n- **RAG_ENABLE**: Enable (`true`) or disable (`false`) RAG.\n- **Other Parameters**: Configure knowledge retrieval enhancement features.\n\n#### 3. WEB Module\n\n- **WEB_ENABLE**: Enable (`true`) or disable (`false`) web search.\n- **SERPER_API_KEY**: Serper search API key.\n\n#### 4. MODEL Module\n\n- **MODEL_API_KEY**: API key for the model service.\n- **MODEL_NAME**: Model name to use (e.g., `gpt-4o-mini`).\n- **MODEL_MAX_TOKENS**: Maximum number of tokens the model can generate.\n\n#### 5. ENV Module\n\n- **PROXY_URL**: Proxy server URL (set to `null` if no proxy is needed).\n- **AGENT_TYPE**: Agent type, e.g., `reasoner`.\n\n#### 6. LOG Module\n\n- **LOG_PATH**: Path to the log file.\n- **LOG_TYPE**: Log format (e.g., `markdown`).\n- **LOG_STEP_NAME**: Log step name.\n- **CHECK_LOG_PROMPT**: Enable log prompt checking (`true` or `false`).\n\n## Step 4: Configure Dora Operator\n\nCreate a `reasoner_agent.py` script:\n\n```python\nimport os\nfrom dora import DoraStatus\nimport pyarrow as pa\nfrom mofa.kernel.utils.util import load_agent_config, create_agent_output\nfrom mofa.run.run_agent import run_dspy_or_crewai_agent\nfrom mofa.utils.files.dir import get_relative_path\nfrom mofa.utils.log.agent import record_agent_result_log\n\n\nclass Operator:\n    \"\"\"\n    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.\n    \"\"\"\n\n    def on_event(self, dora_event, send_output) -> DoraStatus:\n        if dora_event.get(\"type\") == \"INPUT\":\n            agent_inputs = ['data', 'task']\n            event_id = dora_event.get(\"id\")\n\n            if event_id in agent_inputs:\n                task = dora_event[\"value\"][0].as_py()\n\n                yaml_file_path = get_relative_path(\n                    current_file=__file__,\n                    sibling_directory_name='configs',\n                    target_file_name='reasoner_agent.yml'\n                )\n\n                inputs = load_agent_config(yaml_file_path)\n                inputs[\"task\"] = task\n\n                agent_result = run_dspy_or_crewai_agent(agent_config=inputs)\n\n                log_step_name = inputs.get('log_step_name', \"Step_one\")\n                record_agent_result_log(\n                    agent_config=inputs,\n                    agent_result={f\"1, {log_step_name}\": {task: agent_result}}\n                )\n\n                output_data = create_agent_output(\n                    agent_name='keyword_results',\n                    agent_result=agent_result,\n                    dataflow_status=os.getenv('IS_DATAFLOW_END', True)\n                )\n\n                send_output(\n                    \"reasoner_result\",\n                    pa.array([output_data]),\n                    dora_event.get('metadata', {})\n                )\n\n                print('reasoner_results:', agent_result)\n\n        return DoraStatus.CONTINUE\n```\n\n## Step 5: Configure Dora Dataflow\n\nCreate or edit the `reasoner_dataflow.yml` file:\n\n```yaml\nnodes:\n\n  - id: terminal-input\n    build: pip install -e ../../../node-hub/terminal-input\n    path: dynamic\n    outputs:\n      - data\n    inputs:\n      reasoner_results: reasoner-agent/reasoner_results\n\n  - id: reasoner-agent\n    operator:\n      python: scripts/reasoner_agent.py\n      inputs:\n        task: terminal-input/data\n      outputs:\n        - reasoner_results\n```\n\n### Node Descriptions\n\n- **terminal-input**:\n  - **Function**: Handles initial input.\n  - **Action**: Installs the `terminal-input` module.\n  - **Output**: Generates `data`, passing it to `reasoner-agent`.\n  - **Input**: Receives `reasoner_results`.\n- **reasoner-agent**:\n  - **Function**: Processes tasks and generates results.\n  - **Action**: Runs the `reasoner_agent.py` script.\n  - **Input**: Receives `data` from `terminal-input` as `task`.\n  - **Output**: Generates `reasoner_results`, sending them back to `terminal-input`.\n\n## Step 6: Run Dora Dataflow\n\n### Start the Dataflow Using Dora-RS CLI\n\n1. Start the coordinator\n\n```bash\ndora up\n```\n\n2. Build the dataflow\n\n```bash\ndora build reasoner_dataflow.yml\n```\n\n3. Start the dataflow with auto-attach\n\n```bash\ndora start reasoner_dataflow.yml --attach\n```\n\n4. In another terminal, input tasks to the agent\n\n```bash\nterminal-input\n```\n\nThen type your queries to interact with the agent.\n\n## Summary\n\nThis \"Hello World\" example demonstrates:\n- How to set up a basic MoFA agent using templates\n- Configuration file structure and parameters\n- Integration with Dora-RS dataflow\n- Running and interacting with the agent\n\nThis serves as the foundation for building more complex agents and understanding the MoFA framework. ";
						const data = {title:"Hello World with Dora",description:"Building a Hello World agent using Dora-RS framework"};
						const _internal = {
							type: 'content',
							filePath: "/Users/liyao/Code/mofa-org.github.io/mofa-website/src/content/docs/3. examples/hello-world-dora.md",
							rawData: "\ntitle: Hello World with Dora\ndescription: Building a Hello World agent using Dora-RS framework",
						};

export { _internal, body, collection, data, id, slug };
