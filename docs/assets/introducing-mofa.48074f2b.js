const id = "introducing-mofa.md";
						const collection = "blog";
						const slug = "introducing-mofa";
						const body = "\n# MoFA 技术架构介绍：基于 Dora-RS 的模块化 AI 智能体框架\n\nMoFA（**M**odular **F**ramework for **A**gent）是一个基于 Dora-RS 数据流引擎构建的智能体开发框架。本文介绍 MoFA 的技术架构和设计思路。\n\n## 🏗️ 整体架构设计\n\n<svg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"-8 -8 6160.376953125 539\" style=\"max-width: 100%; height: auto;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\"><style>#mermaid-svg-inline{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:rgba(204, 204, 204, 0.87);}#mermaid-svg-inline .error-icon{fill:#bf616a;}#mermaid-svg-inline .error-text{fill:#bf616a;stroke:#bf616a;}#mermaid-svg-inline .edge-thickness-normal{stroke-width:2px;}#mermaid-svg-inline .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-inline .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-inline .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-inline .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-inline .marker{fill:rgba(204, 204, 204, 0.87);stroke:rgba(204, 204, 204, 0.87);}#mermaid-svg-inline .marker.cross{stroke:rgba(204, 204, 204, 0.87);}#mermaid-svg-inline svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-inline .label{font-family:\"trebuchet ms\",verdana,arial,sans-serif;color:rgba(204, 204, 204, 0.87);}#mermaid-svg-inline .cluster-label text{fill:#ffffff;}#mermaid-svg-inline .cluster-label span,#mermaid-svg-inline p{color:#ffffff;}#mermaid-svg-inline .label text,#mermaid-svg-inline span,#mermaid-svg-inline p{fill:rgba(204, 204, 204, 0.87);color:rgba(204, 204, 204, 0.87);}#mermaid-svg-inline .node rect,#mermaid-svg-inline .node circle,#mermaid-svg-inline .node ellipse,#mermaid-svg-inline .node polygon,#mermaid-svg-inline .node path{fill:#1a1a1a;stroke:#2a2a2a;stroke-width:1px;}#mermaid-svg-inline .flowchart-label text{text-anchor:middle;}#mermaid-svg-inline .node .label{text-align:center;}#mermaid-svg-inline .node.clickable{cursor:pointer;}#mermaid-svg-inline .arrowheadPath{fill:#e5e5e5;}#mermaid-svg-inline .edgePath .path{stroke:rgba(204, 204, 204, 0.87);stroke-width:2.0px;}#mermaid-svg-inline .flowchart-link{stroke:rgba(204, 204, 204, 0.87);fill:none;}#mermaid-svg-inline .edgeLabel{background-color:#1a1a1a99;text-align:center;}#mermaid-svg-inline .edgeLabel rect{opacity:0.5;background-color:#1a1a1a99;fill:#1a1a1a99;}#mermaid-svg-inline .labelBkg{background-color:rgba(26, 26, 26, 0.5);}#mermaid-svg-inline .cluster rect{fill:rgba(64, 64, 64, 0.47);stroke:#30373a;stroke-width:1px;}#mermaid-svg-inline .cluster text{fill:#ffffff;}#mermaid-svg-inline .cluster span,#mermaid-svg-inline p{color:#ffffff;}#mermaid-svg-inline div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:12px;background:#88c0d0;border:1px solid #30373a;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-svg-inline .flowchartTitleText{text-anchor:middle;font-size:18px;fill:rgba(204, 204, 204, 0.87);}#mermaid-svg-inline :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g id=\"mermaid-svg-inline\"><g><g class=\"clusters\"><g class=\"cluster default flowchart-label\"><rect height=\"312.5\" width=\"3988.619140625\" y=\"0\" x=\"0\" ry=\"0\" rx=\"0\" style=\"\"/><g transform=\"translate(1958.3017578125, 0)\" class=\"cluster-label\"><text class=\"nodeLabel\">MoFA 架构</text></g></g><g class=\"cluster default flowchart-label\"><rect height=\"396\" width=\"2135.7578125\" y=\"127\" x=\"4008.619140625\" ry=\"0\" rx=\"0\" style=\"\"/><g transform=\"translate(5030.134765625, 127)\" class=\"cluster-label\"><text class=\"nodeLabel\">Dora-RS 架构</text></g></g></g><g class=\"edgePaths\"><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M349.477,58.5L349.477,146.7\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M263.615,185.5L129.507,250.821\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M385.081,185.5L457.883,248.7\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M440.34,179.14L795.48,248.7\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M440.34,174.572L1145.449,248.7\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M3837.61,58.5L4102.636,156.775\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M4175.287,185.5L4175.287,248.7\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M4175.287,287.5L4175.287,375.7\"/><path style=\"fill:none;stroke:rgba(204, 204, 204, 0.87);stroke-width:2px\" d=\"M4175.287,414.5L4175.287,459.2\"/></g><g class=\"nodes\"><g transform=\"translate(349.4765625, 41.75)\" class=\"node default\"><rect height=\"33.5\" width=\"137.1015625\" y=\"-16.75\" x=\"-68.55078125\" ry=\"0\" rx=\"0\" style=\"fill:#f3e5f5;\" class=\"basic label-container\"/><text class=\"nodeLabel\">CLI - mofa/cli.py</text></g><g transform=\"translate(349.4765625, 168.75)\" class=\"node default\"><rect height=\"33.5\" width=\"181.7265625\" y=\"-16.75\" x=\"-90.86328125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"/><text class=\"nodeLabel\">Agent Build Framework</text></g><g transform=\"translate(156.09765625, 270.75)\" class=\"node default\"><rect height=\"33.5\" width=\"242.1953125\" y=\"-16.75\" x=\"-121.09765625\" ry=\"0\" rx=\"0\" style=\"fill:#f3e5f5;\" class=\"basic label-container\"/><text class=\"nodeLabel\">Base Agent - agent_build/base/</text></g><g transform=\"translate(457.8828125, 270.75)\" class=\"node default\"><rect height=\"33.5\" width=\"261.375\" y=\"-16.75\" x=\"-130.6875\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"/><text class=\"nodeLabel\">ReasonER - agent_build/reasoner/</text></g><g transform=\"translate(795.48046875, 270.75)\" class=\"node default\"><rect height=\"33.5\" width=\"313.8203125\" y=\"-16.75\" x=\"-156.91015625\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"/><text class=\"nodeLabel\">CrewAI Integration - agent_build/crewai/</text></g><g transform=\"translate(1145.44921875, 270.75)\" class=\"node default\"><rect height=\"33.5\" width=\"286.1171875\" y=\"-16.75\" x=\"-143.05859375\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"/><text class=\"nodeLabel\">Self Refine - agent_build/self_refine/</text></g><g transform=\"translate(4175.287109375, 168.75)\" class=\"node default\"><rect height=\"33.5\" width=\"134.84375\" y=\"-16.75\" x=\"-67.421875\" ry=\"0\" rx=\"0\" style=\"fill:#e1f5fe;\" class=\"basic label-container\"/><text class=\"nodeLabel\">CLI - binaries/cli</text></g><g transform=\"translate(4175.287109375, 270.75)\" class=\"node default\"><rect height=\"33.5\" width=\"263.3359375\" y=\"-16.75\" x=\"-131.66796875\" ry=\"0\" rx=\"0\" style=\"fill:#e1f5fe;\" class=\"basic label-container\"/><text class=\"nodeLabel\">Coordinator - binaries/coordinator</text></g><g transform=\"translate(4175.287109375, 397.75)\" class=\"node default\"><rect height=\"33.5\" width=\"209.7265625\" y=\"-16.75\" x=\"-104.86328125\" ry=\"0\" rx=\"0\" style=\"fill:#e1f5fe;\" class=\"basic label-container\"/><text class=\"nodeLabel\">Daemon - binaries/daemon</text></g><g transform=\"translate(4175.287109375, 481.25)\" class=\"node default\"><rect height=\"33.5\" width=\"211.3828125\" y=\"-16.75\" x=\"-105.69140625\" ry=\"0\" rx=\"0\" style=\"fill:#e1f5fe;\" class=\"basic label-container\"/><text class=\"nodeLabel\">Runtime - binaries/runtime</text></g></g></g></svg>\n\nMoFA 与 Dora-RS 形成分层架构，构成从底层通信到上层智能体的技术栈：\n\n```\n┌─────────────────────────────────────┐\n│           MoFA 层                   │  ← AI智能体开发框架\n│  智能体模板 + 组合逻辑 + 核心服务    │     (Python为主)\n├─────────────────────────────────────┤\n│           Dora 层                   │  ← 数据流引擎  \n│  实时通信 + 跨语言 + 运行时管理     │     (Rust核心)\n└─────────────────────────────────────┘\n```\n\n## 🔧 MoFA 核心组件\n\n### 1. 智能体构建框架 (Agent Build Framework)\n\n提供智能体开发的基础抽象和常见模式：\n\n#### **基础智能体 (Base Agent)**\n```python\nfrom mofa.agent_build.base.base_agent import MofaAgent\nfrom dora import Node\n\nclass MofaAgent:\n    def __attrs_post_init__(self):\n        self.node = Node(self.agent_name)  # 集成 Dora 节点\n        \n    def receive_parameter(self, parameter_name: str):\n        for event in self.node:  # 使用 Dora 事件循环\n            # 智能体业务逻辑\n            \n    def send_output(self, output_name: str, result: Any):\n        self.node.send_output(output_name, ...)  # 通过 Dora 发送\n```\n\n#### **智能体模式**\n- **ReasonER**: 支持推理链的智能体\n- **CrewAI Integration**: 集成 CrewAI 的多智能体协作\n- **Self Refine**: 支持输出自我改进的智能体\n\n### 2. 核心服务 (Kernel Services)\n\n提供智能体系统的基础服务：\n\n- **Memory**: 智能体记忆管理\n- **Planning**: 任务规划和调度\n- **RAG**: 检索增强生成\n- **Tools**: 工具调用和管理\n\n### 3. 智能体模板 (Agent Templates)\n\n预构建的智能体配置，简化开发流程：\n\n```yaml\n# 智能体配置示例\nnodes:\n  - id: reasoning-agent\n    build: pip install -e ../../agent-hub/openai-agent\n    path: openai-agent\n    inputs:\n      query: terminal-input/data\n    outputs:\n      - reasoning_result\n```\n\n### 4. 生态系统\n\n#### **Node Hub**: 扩展 Dora 生态\n- `terminal-input` / `terminal-print`: 终端 I/O 节点\n- `dora-openai-server`: OpenAI API 服务集成\n- `openai-server-stream`: 流式 AI 服务\n\n#### **Agent Hub**: 预构建智能体库\n- `hello-world`: 基础示例智能体\n- `openai-agent`: OpenAI 集成智能体\n- `memory-agent`: 带记忆的智能体\n- `kling-agent`: 视频生成智能体\n- 更多专用智能体...\n\n## ⚡ Dora-RS 基础设施\n\n### 架构组成\n\nDora-RS 为 MoFA 提供运行时基础：\n\n```\ndora/\n├── binaries/              # 运行时组件\n│   ├── cli/              # dora 命令行工具\n│   ├── coordinator/      # 分布式协调器\n│   ├── daemon/           # 后台守护进程\n│   └── runtime/          # 数据流运行时\n├── libraries/             # 核心库\n│   ├── core/            # 调度引擎\n│   ├── communication-layer/ # 通信层\n│   ├── shared-memory-server/ # 共享内存服务\n│   └── message/         # 基于 Apache Arrow 的消息系统\n├── apis/                 # 多语言 API\n│   ├── rust/ python/ c/ c++/  # 跨语言支持\n└── node-hub/            # 预构建节点\n    ├── dora-yolo/       # YOLO 目标检测\n    ├── dora-sam2/       # SAM2 分割\n    ├── dora-qwen/       # Qwen 大语言模型\n    └── ...              # 更多 AI/硬件节点\n```\n\n### 技术特点\n\n1. **性能**: 基于 Rust 和共享内存的高效通信\n2. **零拷贝**: 基于 Apache Arrow 的数据传输\n3. **跨语言**: Python 智能体可与其他语言节点协作\n4. **实时性**: 低延迟的节点间通信\n\n## 🔄 数据流设计\n\n### 数据流 vs 工作流\n\nMoFA 采用数据流驱动的设计：\n\n```\n传统工作流:\nTask → Rule → Step → Rule → Step → Result\n\n数据流方式:\nData → Node → Data → Node → Data → Result\n  ↑      ↑      ↑      ↑      ↑\n  |   智能体   |   智能体   |\n  └─────────通信层──────┘\n```\n\n### 配置驱动\n\n通过 YAML 配置实现智能体组合：\n\n```yaml\n# hello_world_dataflow.yml\nnodes:\n  - id: terminal-input\n    build: pip install -e ../../node-hub/terminal-input\n    path: dynamic\n    outputs: [data]\n    inputs:\n      agent_response: hello-world-agent/hello_world_result\n      \n  - id: hello-world-agent\n    build: pip install -e ../../agent-hub/hello-world\n    path: hello-world\n    outputs: [hello_world_result]\n    inputs:\n      query: terminal-input/data\n    env:\n      IS_DATAFLOW_END: true\n      WRITE_LOG: true\n```\n\n## 🔗 关键集成\n\n### 1. 智能体与 Dora 的集成\n\n```python\n# MoFA 智能体使用 Dora Node\nfrom dora import Node\n\nclass MofaAgent:\n    def __attrs_post_init__(self):\n        self.node = Node(self.agent_name)\n```\n\n### 2. 生态系统扩展\n\n| 组件类型 | Dora原生 | MoFA扩展 |\n|----------|----------|----------|\n| MoFA专用 | - | `dora-openai-server`, `openai-server-stream` |\n| 智能体 | - | `agent-hub/*` |\n\n### 3. 数据流连接\n\n通过 Dora 的数据流机制实现：\n- 智能体与硬件设备通信\n- 智能体与 AI 模型交互\n- 智能体数据流构建\n\n## 🎯 组合式智能体\n\n### 组合层次\n\n```\n复合智能体\n    ↓\n基础智能体组合\n    ↓\nMofaAgent\n    ↓\nDora Node\n```\n\n### 应用示例\n\n```python\n# 基础智能体\n@run_agent\ndef run(agent: MofaAgent):\n    user_query = agent.receive_parameter('query')\n    # 处理逻辑\n    agent.send_output('result', processed_data)\n\n# 通过配置组合：input → reasoning_agent → memory_agent → output\n```\n\n## 🚀 技术优势\n\n### 1. 性能\n- **Rust 内核**: 内存安全和性能\n- **共享内存**: 减少数据拷贝\n- **Apache Arrow**: 高效的列式数据格式\n\n### 2. 开发体验\n- **配置化**: YAML 配置完成组合\n- **模板化**: 预构建的智能体和模式\n- **跨语言**: 统一的开发接口\n\n### 3. 扩展性\n- **分布式**: 支持分布式部署\n- **模块化**: 松耦合的组件设计\n- **生态**: 丰富的节点和智能体库\n\n\n\n\n---\n";
						const data = {title:"MoFA 技术架构介绍：基于 Dora-RS 的模块化 AI 智能体框架",description:"介绍 MoFA 的技术架构，探讨其如何基于 Dora-RS 框架构建模块化、可组合的 AI 智能体系统",date:new Date(1749427200000),author:"MoFA 团队",tags:["架构","AI框架","Dora-RS","智能体","技术"]};
						const _internal = {
							type: 'content',
							filePath: "/home/runner/work/mofa-org.github.io/mofa-org.github.io/mofa-website/src/content/blog/introducing-mofa.md",
							rawData: "\ntitle: \"MoFA 技术架构介绍：基于 Dora-RS 的模块化 AI 智能体框架\"\ndescription: \"介绍 MoFA 的技术架构，探讨其如何基于 Dora-RS 框架构建模块化、可组合的 AI 智能体系统\"\ndate: 2025-06-09\nauthor: MoFA 团队\ntags: [架构, AI框架, Dora-RS, 智能体, 技术]",
						};

export { _internal, body, collection, data, id, slug };
