import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<h1 id=\"hello-world-agent-development-based-on-dora\">“Hello World” Agent Development Based on Dora</h1>\n<p><a href=\"hello_world_dora.md\">English</a> | <a href=\"hello_world_dora_cn.md\">简体中文</a></p>\n<h2 id=\"step-1-install-the-development-and-runtime-environment\">Step 1: Install the Development and Runtime Environment</h2>\n<p>Refer to the <a href=\"../2.%20getting-started/installation\">Installation Guide</a> to complete the setup of the development and runtime environment.</p>\n<h2 id=\"step-2-obtain-the-intelligent-agent-template\">Step 2: Obtain the Intelligent Agent Template</h2>\n<ol>\n<li>Go to the <a href=\"../../mofa/agent_templates\">Dora Intelligent Agent Template Repository</a>.</li>\n<li>Select the simplest <a href=\"../../mofa/agent_templates/reasoner\">Reasoner Template</a>.</li>\n<li>Copy the template to your development directory.</li>\n<li>Review the template description: <a href=\"../../mofa/agent_templates/reasoner/README.md\">README</a>.</li>\n</ol>\n<h2 id=\"step-3-configuration-file-setup\">Step 3: Configuration File Setup</h2>\n<h3 id=\"configuration-file-overview\">Configuration File Overview</h3>\n<p>Create or edit the <code>reasoner_agent.yml</code> file:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#85E89D\">AGENT</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  ROLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Knowledgeable Assistant</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  BACKSTORY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your background description></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  TASK</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#6A737D\">  # Specific task</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">RAG</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_ENABLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODULE_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_MODEL_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">text-embedding-3-small</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  COLLECTION_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">mofa</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  IS_UPLOAD_FILE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHROMA_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">./data/output/chroma_store</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  FILES_PATH</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    - </span><span style=\"color:#9ECBFF\">./data/output/arxiv_papers</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  ENCODING</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">utf-8</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHUNK_SIZE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">256</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  RAG_SEARCH_NUM</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">WEB</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  WEB_ENABLE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SERPER_API_KEY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your Serper API key></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SEARCH_NUM</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">20</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  SEARCH_ENGINE_TIMEOUT</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">MODEL</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_API_KEY</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">&#x3C;Your model API key></span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">gpt-4o-mini</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  MODEL_MAX_TOKENS</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2048</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">ENV</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  PROXY_URL</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  AGENT_TYPE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">LOG</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_PATH</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">./data/output/log/log.md</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_TYPE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">markdown</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  LOG_STEP_NAME</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner_result</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  CHECK_LOG_PROMPT</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span></code></pre>\n<h3 id=\"configuration-details\">Configuration Details</h3>\n<h4 id=\"1-agent-module\">1. AGENT Module</h4>\n<ul>\n<li><strong>ROLE</strong>: Name of the assistant role.</li>\n<li><strong>BACKSTORY</strong>: Background description of the assistant.</li>\n<li><strong>TASK</strong>: Specific task (default is <code>null</code>).</li>\n</ul>\n<h4 id=\"2-rag-module\">2. RAG Module</h4>\n<ul>\n<li><strong>RAG_ENABLE</strong>: Enable (<code>true</code>) or disable (<code>false</code>) RAG.</li>\n<li><strong>Other Parameters</strong>: Configure knowledge retrieval enhancement features.</li>\n</ul>\n<h4 id=\"3-web-module\">3. WEB Module</h4>\n<ul>\n<li><strong>WEB_ENABLE</strong>: Enable (<code>true</code>) or disable (<code>false</code>) web search.</li>\n<li><strong>SERPER_API_KEY</strong>: Serper search API key.</li>\n</ul>\n<h4 id=\"4-model-module\">4. MODEL Module</h4>\n<ul>\n<li><strong>MODEL_API_KEY</strong>: API key for the model service.</li>\n<li><strong>MODEL_NAME</strong>: Model name to use (e.g., <code>gpt-4o-mini</code>).</li>\n<li><strong>MODEL_MAX_TOKENS</strong>: Maximum number of tokens the model can generate.</li>\n</ul>\n<h4 id=\"5-env-module\">5. ENV Module</h4>\n<ul>\n<li><strong>PROXY_URL</strong>: Proxy server URL (set to <code>null</code> if no proxy is needed).</li>\n<li><strong>AGENT_TYPE</strong>: Agent type, e.g., <code>reasoner</code>.</li>\n</ul>\n<h4 id=\"6-log-module\">6. LOG Module</h4>\n<ul>\n<li><strong>LOG_PATH</strong>: Path to the log file.</li>\n<li><strong>LOG_TYPE</strong>: Log format (e.g., <code>markdown</code>).</li>\n<li><strong>LOG_STEP_NAME</strong>: Log step name.</li>\n<li><strong>CHECK_LOG_PROMPT</strong>: Enable log prompt checking (<code>true</code> or <code>false</code>).</li>\n</ul>\n<h2 id=\"step-4-configure-dora-operator\">Step 4: Configure Dora Operator</h2>\n<p>Create a <code>reasoner_agent.py</code> script:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> os</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> dora </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> DoraStatus</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> pyarrow </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> pa</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.kernel.utils.util </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> load_agent_config, create_agent_output</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.run.run_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.files.dir </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> get_relative_path</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.log.agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> record_agent_result_log</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> Operator</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    def</span><span style=\"color:#B392F0\"> on_event</span><span style=\"color:#E1E4E8\">(self, dora_event, send_output) -> DoraStatus:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> dora_event.get(</span><span style=\"color:#9ECBFF\">\"type\"</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">==</span><span style=\"color:#9ECBFF\"> \"INPUT\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            agent_inputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">'data'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'task'</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            event_id </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> dora_event.get(</span><span style=\"color:#9ECBFF\">\"id\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">            if</span><span style=\"color:#E1E4E8\"> event_id </span><span style=\"color:#F97583\">in</span><span style=\"color:#E1E4E8\"> agent_inputs:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                task </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> dora_event[</span><span style=\"color:#9ECBFF\">\"value\"</span><span style=\"color:#E1E4E8\">][</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].as_py()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                yaml_file_path </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> get_relative_path(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    current_file</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">__file__</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    sibling_directory_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'configs'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    target_file_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'reasoner_agent.yml'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                inputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> load_agent_config(yaml_file_path)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                inputs[</span><span style=\"color:#9ECBFF\">\"task\"</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> task</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                agent_result </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> run_dspy_or_crewai_agent(</span><span style=\"color:#FFAB70\">agent_config</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">inputs)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                log_step_name </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> inputs.get(</span><span style=\"color:#9ECBFF\">'log_step_name'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"Step_one\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                record_agent_result_log(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_config</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">inputs,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"1, </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">log_step_name</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">: {task: agent_result}}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                output_data </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> create_agent_output(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'keyword_results'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">agent_result,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">                    dataflow_status</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'IS_DATAFLOW_END'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">True</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                send_output(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">                    \"reasoner_result\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                    pa.array([output_data]),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                    dora_event.get(</span><span style=\"color:#9ECBFF\">'metadata'</span><span style=\"color:#E1E4E8\">, {})</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">                print</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'reasoner_results:'</span><span style=\"color:#E1E4E8\">, agent_result)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">        return</span><span style=\"color:#E1E4E8\"> DoraStatus.</span><span style=\"color:#79B8FF\">CONTINUE</span></span></code></pre>\n<h2 id=\"step-5-configure-dora-dataflow\">Step 5: Configure Dora Dataflow</h2>\n<p>Create or edit the <code>reasoner_dataflow.yml</code> file:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#85E89D\">nodes</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../../node-hub/terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">dynamic</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      reasoner_results</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner-agent/reasoner_results</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">reasoner-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    operator</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      python</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">scripts/reasoner_agent.py</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        task</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input/data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        - </span><span style=\"color:#9ECBFF\">reasoner_results</span></span></code></pre>\n<h3 id=\"node-descriptions\">Node Descriptions</h3>\n<ul>\n<li><strong>terminal-input</strong>:\n<ul>\n<li><strong>Function</strong>: Handles initial input.</li>\n<li><strong>Action</strong>: Installs the <code>terminal-input</code> module.</li>\n<li><strong>Output</strong>: Generates <code>data</code>, passing it to <code>reasoner-agent</code>.</li>\n<li><strong>Input</strong>: Receives <code>reasoner_results</code>.</li>\n</ul>\n</li>\n<li><strong>reasoner-agent</strong>:\n<ul>\n<li><strong>Function</strong>: Processes tasks and generates results.</li>\n<li><strong>Action</strong>: Runs the <code>reasoner_agent.py</code> script.</li>\n<li><strong>Input</strong>: Receives <code>data</code> from <code>terminal-input</code> as <code>task</code>.</li>\n<li><strong>Output</strong>: Generates <code>reasoner_results</code>, sending them back to <code>terminal-input</code>.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-6-run-dora-dataflow\">Step 6: Run Dora Dataflow</h2>\n<h3 id=\"start-the-dataflow-using-dora-rs-cli\">Start the Dataflow Using Dora-RS CLI</h3>\n<ol>\n<li>Start the coordinator</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span></span></code></pre>\n<ol start=\"2\">\n<li>Build the dataflow</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> reasoner_dataflow.yml</span></span></code></pre>\n<ol start=\"3\">\n<li>Start the dataflow with auto-attach</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> reasoner_dataflow.yml</span><span style=\"color:#79B8FF\"> --attach</span></span></code></pre>\n<ol start=\"4\">\n<li>In another terminal, input tasks to the agent</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span></code></pre>\n<p>Then type your queries to interact with the agent.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>This “Hello World” example demonstrates:</p>\n<ul>\n<li>How to set up a basic MoFA agent using templates</li>\n<li>Configuration file structure and parameters</li>\n<li>Integration with Dora-RS dataflow</li>\n<li>Running and interacting with the agent</li>\n</ul>\n<p>This serves as the foundation for building more complex agents and understanding the MoFA framework.</p>";

				const frontmatter = {"title":"Hello World with Dora","description":"Building a Hello World agent using Dora-RS framework"};
				const file = "/home/runner/work/mofa-org.github.io/mofa-org.github.io/mofa-website/src/content/docs/3. examples/hello-world-dora.md";
				const url = undefined;
				function rawContent() {
					return "\n# \"Hello World\" Agent Development Based on Dora\n\n[English](hello_world_dora.md) | [简体中文](hello_world_dora_cn.md)\n\n## Step 1: Install the Development and Runtime Environment\n\nRefer to the [Installation Guide](../2.%20getting-started/installation) to complete the setup of the development and runtime environment.\n\n## Step 2: Obtain the Intelligent Agent Template\n\n1. Go to the [Dora Intelligent Agent Template Repository](../../mofa/agent_templates).\n2. Select the simplest [Reasoner Template](../../mofa/agent_templates/reasoner).\n3. Copy the template to your development directory.\n4. Review the template description: [README](../../mofa/agent_templates/reasoner/README.md).\n\n## Step 3: Configuration File Setup\n\n### Configuration File Overview\n\nCreate or edit the `reasoner_agent.yml` file:\n\n```yaml\nAGENT:\n  ROLE: Knowledgeable Assistant\n  BACKSTORY: <Your background description>\n  TASK: null  # Specific task\n\nRAG:\n  RAG_ENABLE: false\n  MODULE_PATH: null\n  RAG_MODEL_NAME: text-embedding-3-small\n  COLLECTION_NAME: mofa\n  IS_UPLOAD_FILE: true\n  CHROMA_PATH: ./data/output/chroma_store\n  FILES_PATH:\n    - ./data/output/arxiv_papers\n  ENCODING: utf-8\n  CHUNK_SIZE: 256\n  RAG_SEARCH_NUM: 2\n\nWEB:\n  WEB_ENABLE: false\n  SERPER_API_KEY: <Your Serper API key>\n  SEARCH_NUM: 20\n  SEARCH_ENGINE_TIMEOUT: 5\n\nMODEL:\n  MODEL_API_KEY: <Your model API key>\n  MODEL_NAME: gpt-4o-mini\n  MODEL_MAX_TOKENS: 2048\n\nENV:\n  PROXY_URL: null\n  AGENT_TYPE: reasoner\n\nLOG:\n  LOG_PATH: ./data/output/log/log.md\n  LOG_TYPE: markdown\n  LOG_STEP_NAME: reasoner_result\n  CHECK_LOG_PROMPT: true\n```\n\n### Configuration Details\n\n#### 1. AGENT Module\n\n- **ROLE**: Name of the assistant role.\n- **BACKSTORY**: Background description of the assistant.\n- **TASK**: Specific task (default is `null`).\n\n#### 2. RAG Module\n\n- **RAG_ENABLE**: Enable (`true`) or disable (`false`) RAG.\n- **Other Parameters**: Configure knowledge retrieval enhancement features.\n\n#### 3. WEB Module\n\n- **WEB_ENABLE**: Enable (`true`) or disable (`false`) web search.\n- **SERPER_API_KEY**: Serper search API key.\n\n#### 4. MODEL Module\n\n- **MODEL_API_KEY**: API key for the model service.\n- **MODEL_NAME**: Model name to use (e.g., `gpt-4o-mini`).\n- **MODEL_MAX_TOKENS**: Maximum number of tokens the model can generate.\n\n#### 5. ENV Module\n\n- **PROXY_URL**: Proxy server URL (set to `null` if no proxy is needed).\n- **AGENT_TYPE**: Agent type, e.g., `reasoner`.\n\n#### 6. LOG Module\n\n- **LOG_PATH**: Path to the log file.\n- **LOG_TYPE**: Log format (e.g., `markdown`).\n- **LOG_STEP_NAME**: Log step name.\n- **CHECK_LOG_PROMPT**: Enable log prompt checking (`true` or `false`).\n\n## Step 4: Configure Dora Operator\n\nCreate a `reasoner_agent.py` script:\n\n```python\nimport os\nfrom dora import DoraStatus\nimport pyarrow as pa\nfrom mofa.kernel.utils.util import load_agent_config, create_agent_output\nfrom mofa.run.run_agent import run_dspy_or_crewai_agent\nfrom mofa.utils.files.dir import get_relative_path\nfrom mofa.utils.log.agent import record_agent_result_log\n\n\nclass Operator:\n    \"\"\"\n    Dora-rs Operator for handling INPUT events, loading configurations, running the agent, logging results, and sending outputs.\n    \"\"\"\n\n    def on_event(self, dora_event, send_output) -> DoraStatus:\n        if dora_event.get(\"type\") == \"INPUT\":\n            agent_inputs = ['data', 'task']\n            event_id = dora_event.get(\"id\")\n\n            if event_id in agent_inputs:\n                task = dora_event[\"value\"][0].as_py()\n\n                yaml_file_path = get_relative_path(\n                    current_file=__file__,\n                    sibling_directory_name='configs',\n                    target_file_name='reasoner_agent.yml'\n                )\n\n                inputs = load_agent_config(yaml_file_path)\n                inputs[\"task\"] = task\n\n                agent_result = run_dspy_or_crewai_agent(agent_config=inputs)\n\n                log_step_name = inputs.get('log_step_name', \"Step_one\")\n                record_agent_result_log(\n                    agent_config=inputs,\n                    agent_result={f\"1, {log_step_name}\": {task: agent_result}}\n                )\n\n                output_data = create_agent_output(\n                    agent_name='keyword_results',\n                    agent_result=agent_result,\n                    dataflow_status=os.getenv('IS_DATAFLOW_END', True)\n                )\n\n                send_output(\n                    \"reasoner_result\",\n                    pa.array([output_data]),\n                    dora_event.get('metadata', {})\n                )\n\n                print('reasoner_results:', agent_result)\n\n        return DoraStatus.CONTINUE\n```\n\n## Step 5: Configure Dora Dataflow\n\nCreate or edit the `reasoner_dataflow.yml` file:\n\n```yaml\nnodes:\n\n  - id: terminal-input\n    build: pip install -e ../../../node-hub/terminal-input\n    path: dynamic\n    outputs:\n      - data\n    inputs:\n      reasoner_results: reasoner-agent/reasoner_results\n\n  - id: reasoner-agent\n    operator:\n      python: scripts/reasoner_agent.py\n      inputs:\n        task: terminal-input/data\n      outputs:\n        - reasoner_results\n```\n\n### Node Descriptions\n\n- **terminal-input**:\n  - **Function**: Handles initial input.\n  - **Action**: Installs the `terminal-input` module.\n  - **Output**: Generates `data`, passing it to `reasoner-agent`.\n  - **Input**: Receives `reasoner_results`.\n- **reasoner-agent**:\n  - **Function**: Processes tasks and generates results.\n  - **Action**: Runs the `reasoner_agent.py` script.\n  - **Input**: Receives `data` from `terminal-input` as `task`.\n  - **Output**: Generates `reasoner_results`, sending them back to `terminal-input`.\n\n## Step 6: Run Dora Dataflow\n\n### Start the Dataflow Using Dora-RS CLI\n\n1. Start the coordinator\n\n```bash\ndora up\n```\n\n2. Build the dataflow\n\n```bash\ndora build reasoner_dataflow.yml\n```\n\n3. Start the dataflow with auto-attach\n\n```bash\ndora start reasoner_dataflow.yml --attach\n```\n\n4. In another terminal, input tasks to the agent\n\n```bash\nterminal-input\n```\n\nThen type your queries to interact with the agent.\n\n## Summary\n\nThis \"Hello World\" example demonstrates:\n- How to set up a basic MoFA agent using templates\n- Configuration file structure and parameters\n- Integration with Dora-RS dataflow\n- Running and interacting with the agent\n\nThis serves as the foundation for building more complex agents and understanding the MoFA framework. ";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"hello-world-agent-development-based-on-dora","text":"“Hello World” Agent Development Based on Dora"},{"depth":2,"slug":"step-1-install-the-development-and-runtime-environment","text":"Step 1: Install the Development and Runtime Environment"},{"depth":2,"slug":"step-2-obtain-the-intelligent-agent-template","text":"Step 2: Obtain the Intelligent Agent Template"},{"depth":2,"slug":"step-3-configuration-file-setup","text":"Step 3: Configuration File Setup"},{"depth":3,"slug":"configuration-file-overview","text":"Configuration File Overview"},{"depth":3,"slug":"configuration-details","text":"Configuration Details"},{"depth":4,"slug":"1-agent-module","text":"1. AGENT Module"},{"depth":4,"slug":"2-rag-module","text":"2. RAG Module"},{"depth":4,"slug":"3-web-module","text":"3. WEB Module"},{"depth":4,"slug":"4-model-module","text":"4. MODEL Module"},{"depth":4,"slug":"5-env-module","text":"5. ENV Module"},{"depth":4,"slug":"6-log-module","text":"6. LOG Module"},{"depth":2,"slug":"step-4-configure-dora-operator","text":"Step 4: Configure Dora Operator"},{"depth":2,"slug":"step-5-configure-dora-dataflow","text":"Step 5: Configure Dora Dataflow"},{"depth":3,"slug":"node-descriptions","text":"Node Descriptions"},{"depth":2,"slug":"step-6-run-dora-dataflow","text":"Step 6: Run Dora Dataflow"},{"depth":3,"slug":"start-the-dataflow-using-dora-rs-cli","text":"Start the Dataflow Using Dora-RS CLI"},{"depth":2,"slug":"summary","text":"Summary"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
