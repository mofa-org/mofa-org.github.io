import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<h1 id=\"mofa-with-dora\">MoFA with DoRA</h1>\n<p><a href=\"README.md\">English</a> | <a href=\"README_cn.md\">简体中文</a></p>\n<h3 id=\"dora\">DORA</h3>\n<p><a href=\"https://github.com/dora-rs/dora\">DORA</a> is an open-source project implementing a dataflow-oriented middleware,  designed to simplify and streamline the creation of AI-based robotic applications. It provides low-latency, composable, and distributed dataflow functionality. Applications are modeled as directed graphs, also known as Pipelines. DORA naturally offers a multi-agent, multi-process computation environment, as well as a foundation for modularity and composability. MoFA uses DORA as its executor to establish the Agent framework.</p>\n<h3 id=\"mofa-agent-templates\">MoFA Agent Templates</h3>\n<p>There are specific design patterns for building agents, and MoFA offers a series of implementations of these design patterns as templates for developers to use.</p>\n<p><a href=\"templates/design_patterns.md\">Design Patterns </a></p>\n<ul>\n<li><a href=\"templates/reasoner_template.md\">Reasoner</a></li>\n<li><a href=\"templates/self_refine_template.md\">Self Refine</a></li>\n<li><a href=\"templates/crewai_template.md\">Crewai</a></li>\n<li>…</li>\n</ul>\n<h3 id=\"mofa-composite-agents\">MoFA Composite Agents</h3>\n<p>MoFA agents built on the Dora-RS framework essentially operate as Dora-RS Dataflows. Two agents can be combined via data connections, forming composite agents.</p>\n<p>The self_refine Agent template mentioned above and the service agents and examples described below are all MoFA composite agents.</p>\n<h3 id=\"mofa-service-agents\">MoFA Service Agents</h3>\n<p>Agents often require certain services, such as retrieval-augmented generation (RAG), memory, external tool usage, and task planning/decomposition. MoFA follows the principle of “Everything is an Agent.” It provides RAG agents, memory agents, planning agents, and action agents as MoFA agents. Developers can connect these pre-implemented service agents to their own agents to gain these services. MoFA also integrates third-party service agents for developers to use based on their needs.</p>\n<ul>\n<li>RAG</li>\n<li>Memory</li>\n<li>Action</li>\n<li>Planning</li>\n</ul>\n<h3 id=\"command-line\">Command Line</h3>\n<p>In general, you can use the Dora-RS command line to run agents:</p>\n<ol>\n<li>\n<p>Install the MoFA project package.</p>\n</li>\n<li>\n<p>Execute the following command to start the agent process:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> your_agent_dataflow.yml</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> your_agent_dataflow.yml</span><span style=\"color:#79B8FF\"> --attach</span></span></code></pre>\n</li>\n<li>\n<p>If the first node of the agent dataflow is a dynamic node used for input/output in Dora, open another terminal and run <code>terminal-input</code>. Enter the corresponding tasks to start the Agent process.</p>\n</li>\n</ol>\n<h3 id=\"web-services\">Web Services</h3>\n<h3 id=\"case-studies\">Case Studies</h3>\n<ul>\n<li><a href=\"examples/hello_world.md\">Hello World: The Simplest End-to-End Process</a>\n<ul>\n<li><a href=\"examples/hello_world_dora.md\">Hello World, With Dora-RS &#x26; Template</a></li>\n</ul>\n</li>\n<li>Composite Agent Examples:\n<ul>\n<li><a href=\"../examples/simplicity_ai/README.md\">Simplicity AI</a></li>\n<li><a href=\"../examples/arxiv_research/README.md\">ArXiv Research</a></li>\n<li><a href=\"../examples/agent_fight/README.md\">Agent Fight</a></li>\n<li><a href=\"../examples/query_assistant/README.md\">Query Assistant</a></li>\n</ul>\n</li>\n</ul>";

				const frontmatter = {"title":"MoFA Overview","description":"MoFA is a software framework for building AI agents through a composition-based approach"};
				const file = "/Users/liyao/Code/mofa-org.github.io/mofa-website/src/content/docs/0.overview.md";
				const url = undefined;
				function rawContent() {
					return "\n# MoFA with DoRA\n\n[English](README.md) | [简体中文](README_cn.md)\n\n### DORA\n\n[DORA](https://github.com/dora-rs/dora) is an open-source project implementing a dataflow-oriented middleware,  designed to simplify and streamline the creation of AI-based robotic applications. It provides low-latency, composable, and distributed dataflow functionality. Applications are modeled as directed graphs, also known as Pipelines. DORA naturally offers a multi-agent, multi-process computation environment, as well as a foundation for modularity and composability. MoFA uses DORA as its executor to establish the Agent framework.\n\n### MoFA Agent Templates\n\nThere are specific design patterns for building agents, and MoFA offers a series of implementations of these design patterns as templates for developers to use.\n\n[Design Patterns ](templates/design_patterns.md)\n\n- [Reasoner](templates/reasoner_template.md)\n- [Self Refine](templates/self_refine_template.md)\n- [Crewai](templates/crewai_template.md)\n- ...\n\n### MoFA Composite Agents\n\nMoFA agents built on the Dora-RS framework essentially operate as Dora-RS Dataflows. Two agents can be combined via data connections, forming composite agents.\n\nThe self_refine Agent template mentioned above and the service agents and examples described below are all MoFA composite agents.\n\n### MoFA Service Agents\n\nAgents often require certain services, such as retrieval-augmented generation (RAG), memory, external tool usage, and task planning/decomposition. MoFA follows the principle of \"Everything is an Agent.\" It provides RAG agents, memory agents, planning agents, and action agents as MoFA agents. Developers can connect these pre-implemented service agents to their own agents to gain these services. MoFA also integrates third-party service agents for developers to use based on their needs.\n\n- RAG\n- Memory\n- Action\n- Planning\n\n### Command Line\n\nIn general, you can use the Dora-RS command line to run agents:\n\n1. Install the MoFA project package.\n\n2. Execute the following command to start the agent process:\n\n   ```sh\n   dora up && dora build your_agent_dataflow.yml && dora start your_agent_dataflow.yml --attach\n   ```\n\n3. If the first node of the agent dataflow is a dynamic node used for input/output in Dora, open another terminal and run `terminal-input`. Enter the corresponding tasks to start the Agent process.\n\n### Web Services\n\n### Case Studies\n\n- [Hello World: The Simplest End-to-End Process](examples/hello_world.md)\n  - [Hello World, With Dora-RS & Template](examples/hello_world_dora.md)\n- Composite Agent Examples:\n  - [Simplicity AI](../examples/simplicity_ai/README.md)\n  - [ArXiv Research](../examples/arxiv_research/README.md)\n  - [Agent Fight](../examples/agent_fight/README.md)\n  - [Query Assistant](../examples/query_assistant/README.md)\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"mofa-with-dora","text":"MoFA with DoRA"},{"depth":3,"slug":"dora","text":"DORA"},{"depth":3,"slug":"mofa-agent-templates","text":"MoFA Agent Templates"},{"depth":3,"slug":"mofa-composite-agents","text":"MoFA Composite Agents"},{"depth":3,"slug":"mofa-service-agents","text":"MoFA Service Agents"},{"depth":3,"slug":"command-line","text":"Command Line"},{"depth":3,"slug":"web-services","text":"Web Services"},{"depth":3,"slug":"case-studies","text":"Case Studies"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
