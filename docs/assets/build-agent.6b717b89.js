import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<h1 id=\"从零开始构建一个agent的指南\">从零开始构建一个Agent的指南</h1>\n<h2 id=\"1-概述\">1. 概述</h2>\n<p>本指南将带你从零开始构建一个Agent。Agent是一种能够执行特定任务的智能体，它可以接收输入、处理数据并生成输出。我们将使用Python和一些常见的工具来构建这个Agent。</p>\n<h2 id=\"2-环境准备\">2. 环境准备</h2>\n<p>在开始之前，确保你已经安装了以下工具和库：</p>\n<ul>\n<li>Python 3.10 或更高版本</li>\n<li><code>pip</code> 包管理器</li>\n<li><code>rust</code> 语言</li>\n<li><code>mofa</code> 库</li>\n</ul>\n<p>你可以参考以下文档安装这些依赖：\n<a href=\"installation\">安装文档</a></p>\n<h2 id=\"3-创建项目结构\">3. 创建项目结构</h2>\n<p>首先，创建一个新的项目目录，并在其中创建以下文件和目录：\n你可以参考以下的目录结构<code>python/agent-hub/agent-template</code>,并且你可以在<code>agent-hub</code>下面找到其他案例</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>├── README.md                # 项目说明文档，包含项目概述、使用方法和贡献指南</span></span>\n<span class=\"line\"><span>├── agent                    # Agent主目录</span></span>\n<span class=\"line\"><span>│   ├── __init__.py          # Python包初始化文件，使agent目录成为可导入的Python包</span></span>\n<span class=\"line\"><span>│   ├── configs              # 配置文件目录</span></span>\n<span class=\"line\"><span>│   │   └── agent.yml        # Agent配置文件，包含模型、日志等配置</span></span>\n<span class=\"line\"><span>│   └── main.py              # Agent主程序入口，包含核心逻辑</span></span>\n<span class=\"line\"><span>├── pyproject.toml           # Python项目配置文件，定义依赖和构建配置</span></span>\n<span class=\"line\"><span>└── tests                    # 测试目录</span></span>\n<span class=\"line\"><span>    └── test_main.py         # 主程序测试文件，包含单元测试</span></span></code></pre>\n<h2 id=\"4-配置agent\">4. 配置Agent</h2>\n<h3 id=\"41-运行现有代码并测试完成\">4.1 运行现有代码并测试完成</h3>\n<p>将Agent的核心功能进行测试。 例如</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> my_agent_function</span><span style=\"color:#E1E4E8\">(input_param1: </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">, input_param2: </span><span style=\"color:#79B8FF\">int</span><span style=\"color:#E1E4E8\">) -> </span><span style=\"color:#79B8FF\">dict</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    实现Agent核心功能的函数。</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    </span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    :param input_param1: 字符串类型的输入参数1</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    :param input_param2: 整数类型的输入参数2</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    :return: 返回一个字典，包含处理结果</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    # 实现具体的功能逻辑</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    result </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"output1\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"processed_value1\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"output2\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"processed_value2\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> result</span></span></code></pre>\n<h3 id=\"42-复制mofa-agent-template到某个文件夹下\">4.2 复制mofa-agent-template到某个文件夹下</h3>\n<p>将<code>mofa-agent-template</code>复制到一个新的文件夹中，作为新Agent的基础。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">cp</span><span style=\"color:#79B8FF\"> -r</span><span style=\"color:#9ECBFF\"> mofa-agent-template</span><span style=\"color:#9ECBFF\"> my-new-agent</span></span></code></pre>\n<h3 id=\"43-更改文件夹名称\">4.3 更改文件夹名称</h3>\n<p>将复制的模板文件夹及其内部的<code>agent</code>文件夹重命名为您的Agent名称。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">mv</span><span style=\"color:#9ECBFF\"> my-new-agent/agent-template</span><span style=\"color:#9ECBFF\"> my-new-agent/my-new-agent</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">mv</span><span style=\"color:#9ECBFF\"> my-new-agent/my-new-agent/agent</span><span style=\"color:#9ECBFF\"> my-new-agent/my-new-agent/my-new-agent</span></span></code></pre>\n<h3 id=\"44-修改pyprojecttoml的配置\">4.4 修改pyproject.toml的配置</h3>\n<p>更新<code>pyproject.toml</code>文件，配置您的Agent名称、版本和依赖项。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\"># [tool.poetry] 部分定义了项目的基本信息</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">tool</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">poetry</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">name = </span><span style=\"color:#9ECBFF\">\"agent\"</span><span style=\"color:#6A737D\">  # [必改] 项目名称，需改为实际Agent名称</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">version = </span><span style=\"color:#9ECBFF\">\"0.1.1\"</span><span style=\"color:#6A737D\">  # [可选] 项目版本号，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">authors = [  </span><span style=\"color:#6A737D\"># [可选] 作者列表，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"ZongHuan Wu \"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"Cheng Chen\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">description = </span><span style=\"color:#9ECBFF\">\"A simple agent template\"</span><span style=\"color:#6A737D\">  # [必改] 项目描述，需改为实际功能描述</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">license = </span><span style=\"color:#9ECBFF\">\"MIT License\"</span><span style=\"color:#6A737D\">  # [可选] 开源许可证，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">homepage = </span><span style=\"color:#9ECBFF\">\"https://github.com/moxin-org/mofa\"</span><span style=\"color:#6A737D\">  # [可选] 项目主页，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">documentation = </span><span style=\"color:#9ECBFF\">\"https://github.com/moxin-org/mofa/blob/main/README.md\"</span><span style=\"color:#6A737D\">  # [可选] 文档地址，可根据需要修改</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">readme = </span><span style=\"color:#9ECBFF\">\"README.md\"</span><span style=\"color:#6A737D\">  # [建议保留] 主说明文件</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">packages = [{ include = </span><span style=\"color:#9ECBFF\">\"agent\"</span><span style=\"color:#E1E4E8\"> }]  </span><span style=\"color:#6A737D\"># [必改] 包含的Python包，需改为实际包名</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># [tool.poetry.dependencies] 定义了项目依赖</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">tool</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">poetry</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">dependencies</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">pyarrow = </span><span style=\"color:#9ECBFF\">\">= 5.0.0\"</span><span style=\"color:#6A737D\">  # [可选] 依赖pyarrow库，版本要求5.0.0以上，可根据需要添加其他依赖</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># [tool.poetry.scripts] 定义了可执行脚本</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">tool</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">poetry</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">scripts</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">agent = </span><span style=\"color:#9ECBFF\">\"agent.main:main\"</span><span style=\"color:#6A737D\">  # [必改] 定义agent命令指向agent.main模块的main函数，需改为实际模块路径</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># [build-system] 定义了构建系统配置</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">build-system</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">requires = [</span><span style=\"color:#9ECBFF\">\"poetry-core>=1.8.0\"</span><span style=\"color:#E1E4E8\">]  </span><span style=\"color:#6A737D\"># [建议保留] 构建系统依赖</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">build-backend = </span><span style=\"color:#9ECBFF\">\"poetry.core.masonry.api\"</span><span style=\"color:#6A737D\">  # [建议保留] 使用的构建后端</span></span></code></pre>\n<h3 id=\"45-将现有代码复制到mainpy中\">4.5 将现有代码复制到main.py中</h3>\n<ul>\n<li>main.py中是你的Agent的主要逻辑,你需要在这里实现你的Agent的功能.并且如果你有依赖文件的话,都放到这个目录下</li>\n<li>如果你的agent需要接受其他的agent传递过来的参数，请使用<code>agent.receive_parameter(parameter_name='')</code>这个函数去接受参数。但是<code>receive_parameter</code>函数接受的结果是字符串类型的</li>\n<li>请你将代码中的密钥内容放到一个<code>.env</code>文件中</li>\n<li>更多详细的编写规则请查看 <a href=\"../examples/202-01-18/low_code_integration.md\">low_code_integration</a></li>\n</ul>\n<p>以下是一个deepseek的原始代码代码:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\"># Please install OpenAI SDK first: `pip3 install openai`</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> openai </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> OpenAI</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">client </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> OpenAI(</span><span style=\"color:#FFAB70\">api_key</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"&#x3C;DeepSeek API Key>\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">base_url</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://api.deepseek.com\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> client.chat.completions.create(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"deepseek-chat\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    messages</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"system\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"You are a helpful assistant\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"Hello\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    stream</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">False</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">print</span><span style=\"color:#E1E4E8\">(response.choices[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].message.content)</span></span></code></pre>\n<p>这是一个deepseek-agent的main.py的内容</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> json</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.agent_build.base.base_agent </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> MofaAgent</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> os</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> dotenv </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> load_dotenv</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> openai </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> OpenAI</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> deepseek </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> agent_config_dir_path</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.utils.files.read </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> read_yaml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">():</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> MofaAgent(</span><span style=\"color:#FFAB70\">agent_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'deepseek'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    while</span><span style=\"color:#79B8FF\"> True</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        load_dotenv(agent_config_dir_path </span><span style=\"color:#F97583\">+</span><span style=\"color:#9ECBFF\"> '/.env.secret'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        client </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> OpenAI(</span><span style=\"color:#FFAB70\">api_key</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">os.getenv(</span><span style=\"color:#9ECBFF\">'LLM_API_KEY'</span><span style=\"color:#E1E4E8\">), </span><span style=\"color:#FFAB70\">base_url</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"https://api.deepseek.com\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> client.chat.completions.create(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"deepseek-chat\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            messages</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"system\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">: json.dumps(read_yaml(</span><span style=\"color:#FFAB70\">file_path</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> agent_config_dir_path </span><span style=\"color:#F97583\">+</span><span style=\"color:#9ECBFF\"> '/configs/agent.yml'</span><span style=\"color:#E1E4E8\">).get(</span><span style=\"color:#9ECBFF\">'agent'</span><span style=\"color:#E1E4E8\">).get(</span><span style=\"color:#9ECBFF\">'prompt'</span><span style=\"color:#E1E4E8\">))},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">                {</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"content\"</span><span style=\"color:#E1E4E8\">:  </span><span style=\"color:#F97583\">f</span><span style=\"color:#9ECBFF\">\"user query: </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">agent.receive_parameter(</span><span style=\"color:#FFAB70\">parameter_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'query'</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">  serper search data : </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">json.dumps(agent.receive_parameter(</span><span style=\"color:#FFAB70\">parameter_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'serper_result'</span><span style=\"color:#E1E4E8\">))</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">            ],</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            stream</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">False</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        )</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        agent.send_output(</span><span style=\"color:#FFAB70\">agent_output_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'deepseek_result'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">agent_result</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">response.choices[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].message.content)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#79B8FF\"> __name__</span><span style=\"color:#F97583\"> ==</span><span style=\"color:#9ECBFF\"> \"__main__\"</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    main()</span></span></code></pre>\n<h2 id=\"5-填写readme文件\">5. 填写README文件</h2>\n<p>在<code>README.md</code>中说明Agent的逻辑和使用方法。</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\"># My New Agent</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\">## 概述</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">这是一个用于处理特定任务的Mofa Agent。它接收两个输入参数（</span><span style=\"color:#79B8FF\">`input_param1`</span><span style=\"color:#E1E4E8\">和</span><span style=\"color:#79B8FF\">`input_param2`</span><span style=\"color:#E1E4E8\">），并生成两个输出值（</span><span style=\"color:#79B8FF\">`output1`</span><span style=\"color:#E1E4E8\">和</span><span style=\"color:#79B8FF\">`output2`</span><span style=\"color:#E1E4E8\">）....</span></span></code></pre>\n<h2 id=\"6-编写运行agent-dataflow\">6. 编写运行Agent-Dataflow</h2>\n<h3 id=\"61-概述\">6.1 概述</h3>\n<p>Agent Dataflow 是用于定义和管理多个Agent之间数据流动的配置文件。通过Dataflow，您可以指定每个Agent的输入、输出以及它们之间的依赖关系。本文将指导您如何编写一个Agent Dataflow配置文件。</p>\n<h3 id=\"62-dataflow配置文件结构\">6.2 Dataflow配置文件结构</h3>\n<p>一个典型的Dataflow配置文件包含以下部分：</p>\n<ul>\n<li><strong>nodes</strong>: 定义所有参与的Agent和节点。</li>\n<li><strong>build</strong>: 指定如何构建和安装Agent。</li>\n<li><strong>path</strong>: 指定Agent的路径。</li>\n<li><strong>outputs</strong>: 定义Agent的输出。</li>\n<li><strong>inputs</strong>: 定义Agent的输入。</li>\n<li><strong>env</strong>: 设置环境变量。</li>\n</ul>\n<h3 id=\"63-示例dataflow配置文件\">6.3 示例Dataflow配置文件</h3>\n<p>以下是一个示例Dataflow配置文件，展示了如何定义两个节点（<code>terminal-input</code>和<code>readerlm-agent</code>）及其数据流动。</p>\n<p>以下是为这段YAML配置文件添加的详细注释：</p>\n<ul>\n<li>其中<code>terminal-input</code>为<code>dynamic</code>节点，即可以接受多个node输入，并且将多个node的输入在cmd命令端展示的</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#85E89D\">nodes</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # 定义第一个节点：terminal-input</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input</span><span style=\"color:#6A737D\">  # 节点的唯一标识符</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../node-hub/terminal-input</span><span style=\"color:#6A737D\">  # 构建命令，安装terminal-input节点</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">dynamic</span><span style=\"color:#6A737D\">  # 节点路径，dynamic表示动态路径</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">data</span><span style=\"color:#6A737D\">  # 定义节点的输出，名称为data</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      readerlm_result</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">readerlm-agent/readerlm_result</span><span style=\"color:#6A737D\">  # 定义节点的输入，来源为readerlm-agent节点的readerlm_result输出</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # 定义第二个节点：readerlm-agent</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  - </span><span style=\"color:#85E89D\">id</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">readerlm-agent</span><span style=\"color:#6A737D\">  # 节点的唯一标识符</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    build</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">pip install -e ../../agent-hub/readerlm</span><span style=\"color:#6A737D\">  # 构建命令，安装readerlm-agent</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    path</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">readerlm</span><span style=\"color:#6A737D\">  # 节点路径，指向readerlm目录</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    outputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">readerlm_result</span><span style=\"color:#6A737D\">  # 定义节点的输出，名称为readerlm_result</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    inputs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      html</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">terminal-input/data</span><span style=\"color:#6A737D\">  # 定义节点的输入，来源为terminal-input节点的data输出</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    env</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      IS_DATAFLOW_END</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span><span style=\"color:#6A737D\">  # 设置环境变量，表示数据流到这个节点是否结束整体的流程</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      MODEL_DEVICE</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">cpu</span><span style=\"color:#6A737D\">  # 设置环境变量，指定模型运行设备为CPU</span></span></code></pre>\n<h3 id=\"64-详细说明\">6.4 详细说明</h3>\n<h4 id=\"节点定义\">节点定义</h4>\n<p>每个节点通过<code>id</code>唯一标识，并包含以下属性：</p>\n<ul>\n<li><strong>build</strong>: 指定如何构建和安装该节点。通常使用<code>pip install -e</code>来安装本地开发的Agent。</li>\n<li><strong>path</strong>: 指定Agent的路径。可以是动态路径（<code>dynamic</code>）或具体路径（如<code>readerlm</code>）。</li>\n<li><strong>outputs</strong>: 定义该节点的输出。每个输出是一个字符串，表示输出的名称。</li>\n<li><strong>inputs</strong>: 定义该节点的输入。输入是一个字典，键是输入名称，值是来源节点的输出（格式为<code>来源节点ID/输出名称</code>）。</li>\n<li><strong>env</strong>: 设置环境变量。这些变量将在节点运行时生效。</li>\n</ul>\n<h4 id=\"示例说明\">示例说明</h4>\n<p>在示例配置文件中：</p>\n<ul>\n<li>\n<p><strong>terminal-input</strong> 节点：</p>\n<ul>\n<li>通过<code>pip install -e ../../node-hub/terminal-input</code>安装。</li>\n<li>路径为<code>dynamic</code>，表示动态路径。</li>\n<li>输出为<code>data</code>。</li>\n<li>输入为<code>readerlm-agent</code>节点的<code>readerlm_result</code>输出。</li>\n</ul>\n</li>\n<li>\n<p><strong>readerlm-agent</strong> 节点：</p>\n<ul>\n<li>通过<code>pip install -e ../../agent-hub/readerlm</code>安装。</li>\n<li>路径为<code>readerlm</code>。</li>\n<li>输出为<code>readerlm_result</code>。</li>\n<li>输入为<code>terminal-input</code>节点的<code>data</code>输出。</li>\n<li>设置了两个环境变量：<code>IS_DATAFLOW_END</code>和<code>MODEL_DEVICE</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"65-运行dataflow\">6.5 运行Dataflow</h3>\n<p>如果你的Dataflow中包含<code>dynamic</code>节点，则开启两个命令端界面，否则就开启一个就可以了</p>\n<p>要运行Dataflow，使用以下命令：</p>\n<h4 id=\"命令端1\">命令端1</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> dataflow.yml</span><span style=\"color:#E1E4E8\"> &#x26;&#x26; </span><span style=\"color:#B392F0\">dora</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> dataflow.yml</span><span style=\"color:#79B8FF\"> --attach</span></span></code></pre>\n<h4 id=\"命令端2如果是dynamic节点\">命令端2(如果是dynamic节点)</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">terminal-input</span></span></code></pre>";

				const frontmatter = {"title":"Build Your Own Agent","description":"A comprehensive guide to building agents from scratch with MoFA"};
				const file = "/Users/liyao/Code/mofa-org.github.io/mofa-website/src/content/docs/2. getting-started/build-agent.md";
				const url = undefined;
				function rawContent() {
					return "\n# 从零开始构建一个Agent的指南\n\n## 1. 概述\n\n本指南将带你从零开始构建一个Agent。Agent是一种能够执行特定任务的智能体，它可以接收输入、处理数据并生成输出。我们将使用Python和一些常见的工具来构建这个Agent。\n\n## 2. 环境准备\n\n在开始之前，确保你已经安装了以下工具和库：\n\n- Python 3.10 或更高版本\n- `pip` 包管理器\n- `rust` 语言\n- `mofa` 库\n\n你可以参考以下文档安装这些依赖：\n[安装文档](installation)\n\n## 3. 创建项目结构\n\n首先，创建一个新的项目目录，并在其中创建以下文件和目录：\n你可以参考以下的目录结构`python/agent-hub/agent-template`,并且你可以在`agent-hub`下面找到其他案例\n\n```\n├── README.md                # 项目说明文档，包含项目概述、使用方法和贡献指南\n├── agent                    # Agent主目录\n│   ├── __init__.py          # Python包初始化文件，使agent目录成为可导入的Python包\n│   ├── configs              # 配置文件目录\n│   │   └── agent.yml        # Agent配置文件，包含模型、日志等配置\n│   └── main.py              # Agent主程序入口，包含核心逻辑\n├── pyproject.toml           # Python项目配置文件，定义依赖和构建配置\n└── tests                    # 测试目录\n    └── test_main.py         # 主程序测试文件，包含单元测试\n```\n\n## 4. 配置Agent\n\n### 4.1 运行现有代码并测试完成\n将Agent的核心功能进行测试。 例如\n\n```python\ndef my_agent_function(input_param1: str, input_param2: int) -> dict:\n    \"\"\"\n    实现Agent核心功能的函数。\n    \n    :param input_param1: 字符串类型的输入参数1\n    :param input_param2: 整数类型的输入参数2\n    :return: 返回一个字典，包含处理结果\n    \"\"\"\n    # 实现具体的功能逻辑\n    result = {\n        \"output1\": \"processed_value1\",\n        \"output2\": \"processed_value2\"\n    }\n    return result\n```\n\n### 4.2 复制mofa-agent-template到某个文件夹下\n将`mofa-agent-template`复制到一个新的文件夹中，作为新Agent的基础。\n\n```bash\ncp -r mofa-agent-template my-new-agent\n```\n\n### 4.3 更改文件夹名称\n将复制的模板文件夹及其内部的`agent`文件夹重命名为您的Agent名称。\n\n```bash\nmv my-new-agent/agent-template my-new-agent/my-new-agent\nmv my-new-agent/my-new-agent/agent my-new-agent/my-new-agent/my-new-agent\n```\n\n### 4.4 修改pyproject.toml的配置\n更新`pyproject.toml`文件，配置您的Agent名称、版本和依赖项。\n\n```toml\n# [tool.poetry] 部分定义了项目的基本信息\n[tool.poetry]\nname = \"agent\"  # [必改] 项目名称，需改为实际Agent名称\nversion = \"0.1.1\"  # [可选] 项目版本号，可根据需要修改\nauthors = [  # [可选] 作者列表，可根据需要修改\n    \"ZongHuan Wu \",\n    \"Cheng Chen\",\n]\ndescription = \"A simple agent template\"  # [必改] 项目描述，需改为实际功能描述\nlicense = \"MIT License\"  # [可选] 开源许可证，可根据需要修改\nhomepage = \"https://github.com/moxin-org/mofa\"  # [可选] 项目主页，可根据需要修改\ndocumentation = \"https://github.com/moxin-org/mofa/blob/main/README.md\"  # [可选] 文档地址，可根据需要修改\nreadme = \"README.md\"  # [建议保留] 主说明文件\npackages = [{ include = \"agent\" }]  # [必改] 包含的Python包，需改为实际包名\n\n# [tool.poetry.dependencies] 定义了项目依赖\n[tool.poetry.dependencies]\npyarrow = \">= 5.0.0\"  # [可选] 依赖pyarrow库，版本要求5.0.0以上，可根据需要添加其他依赖\n\n# [tool.poetry.scripts] 定义了可执行脚本\n[tool.poetry.scripts]\nagent = \"agent.main:main\"  # [必改] 定义agent命令指向agent.main模块的main函数，需改为实际模块路径\n\n# [build-system] 定义了构建系统配置\n[build-system]\nrequires = [\"poetry-core>=1.8.0\"]  # [建议保留] 构建系统依赖\nbuild-backend = \"poetry.core.masonry.api\"  # [建议保留] 使用的构建后端\n```\n\n### 4.5 将现有代码复制到main.py中\n- main.py中是你的Agent的主要逻辑,你需要在这里实现你的Agent的功能.并且如果你有依赖文件的话,都放到这个目录下\n- 如果你的agent需要接受其他的agent传递过来的参数，请使用`agent.receive_parameter(parameter_name='')`这个函数去接受参数。但是`receive_parameter`函数接受的结果是字符串类型的\n- 请你将代码中的密钥内容放到一个`.env`文件中\n- 更多详细的编写规则请查看 [low_code_integration](../examples/202-01-18/low_code_integration.md)\n\n以下是一个deepseek的原始代码代码:\n```python\n# Please install OpenAI SDK first: `pip3 install openai`\n\nfrom openai import OpenAI\n\nclient = OpenAI(api_key=\"<DeepSeek API Key>\", base_url=\"https://api.deepseek.com\")\n\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant\"},\n        {\"role\": \"user\", \"content\": \"Hello\"},\n    ],\n    stream=False\n)\n\nprint(response.choices[0].message.content)\n```\n\n这是一个deepseek-agent的main.py的内容\n```python\nimport json\nfrom mofa.agent_build.base.base_agent import MofaAgent\nimport os\nfrom dotenv import load_dotenv\nfrom openai import OpenAI\nfrom deepseek import agent_config_dir_path\nfrom mofa.utils.files.read import read_yaml\n\n\ndef main():\n    agent = MofaAgent(agent_name='deepseek')\n    while True:\n        load_dotenv(agent_config_dir_path + '/.env.secret')\n        client = OpenAI(api_key=os.getenv('LLM_API_KEY'), base_url=\"https://api.deepseek.com\")\n        response = client.chat.completions.create(\n            model=\"deepseek-chat\",\n            messages=[\n                {\"role\": \"system\", \"content\": json.dumps(read_yaml(file_path = agent_config_dir_path + '/configs/agent.yml').get('agent').get('prompt'))},\n                {\"role\": \"user\", \"content\":  f\"user query: {agent.receive_parameter(parameter_name='query')}  serper search data : {json.dumps(agent.receive_parameter(parameter_name='serper_result'))}\"},\n            ],\n            stream=False\n        )\n        agent.send_output(agent_output_name='deepseek_result', agent_result=response.choices[0].message.content)\nif __name__ == \"__main__\":\n    main()\n```\n\n## 5. 填写README文件\n在`README.md`中说明Agent的逻辑和使用方法。\n\n```markdown\n# My New Agent\n\n## 概述\n这是一个用于处理特定任务的Mofa Agent。它接收两个输入参数（`input_param1`和`input_param2`），并生成两个输出值（`output1`和`output2`）....\n```\n\n## 6. 编写运行Agent-Dataflow\n\n### 6.1 概述\n\nAgent Dataflow 是用于定义和管理多个Agent之间数据流动的配置文件。通过Dataflow，您可以指定每个Agent的输入、输出以及它们之间的依赖关系。本文将指导您如何编写一个Agent Dataflow配置文件。\n\n### 6.2 Dataflow配置文件结构\n\n一个典型的Dataflow配置文件包含以下部分：\n\n- **nodes**: 定义所有参与的Agent和节点。\n- **build**: 指定如何构建和安装Agent。\n- **path**: 指定Agent的路径。\n- **outputs**: 定义Agent的输出。\n- **inputs**: 定义Agent的输入。\n- **env**: 设置环境变量。\n\n### 6.3 示例Dataflow配置文件\n\n以下是一个示例Dataflow配置文件，展示了如何定义两个节点（`terminal-input`和`readerlm-agent`）及其数据流动。\n\n以下是为这段YAML配置文件添加的详细注释：\n- 其中`terminal-input`为`dynamic`节点，即可以接受多个node输入，并且将多个node的输入在cmd命令端展示的\n\n```yaml\nnodes:\n  # 定义第一个节点：terminal-input\n  - id: terminal-input  # 节点的唯一标识符\n    build: pip install -e ../../node-hub/terminal-input  # 构建命令，安装terminal-input节点\n    path: dynamic  # 节点路径，dynamic表示动态路径\n    outputs:\n      - data  # 定义节点的输出，名称为data\n    inputs:\n      readerlm_result: readerlm-agent/readerlm_result  # 定义节点的输入，来源为readerlm-agent节点的readerlm_result输出\n\n  # 定义第二个节点：readerlm-agent\n  - id: readerlm-agent  # 节点的唯一标识符\n    build: pip install -e ../../agent-hub/readerlm  # 构建命令，安装readerlm-agent\n    path: readerlm  # 节点路径，指向readerlm目录\n    outputs:\n      - readerlm_result  # 定义节点的输出，名称为readerlm_result\n    inputs:\n      html: terminal-input/data  # 定义节点的输入，来源为terminal-input节点的data输出\n    env:\n      IS_DATAFLOW_END: true  # 设置环境变量，表示数据流到这个节点是否结束整体的流程\n      MODEL_DEVICE: cpu  # 设置环境变量，指定模型运行设备为CPU\n```\n\n### 6.4 详细说明\n\n#### 节点定义\n\n每个节点通过`id`唯一标识，并包含以下属性：\n\n- **build**: 指定如何构建和安装该节点。通常使用`pip install -e`来安装本地开发的Agent。\n- **path**: 指定Agent的路径。可以是动态路径（`dynamic`）或具体路径（如`readerlm`）。\n- **outputs**: 定义该节点的输出。每个输出是一个字符串，表示输出的名称。\n- **inputs**: 定义该节点的输入。输入是一个字典，键是输入名称，值是来源节点的输出（格式为`来源节点ID/输出名称`）。\n- **env**: 设置环境变量。这些变量将在节点运行时生效。\n\n#### 示例说明\n\n在示例配置文件中：\n\n- **terminal-input** 节点：\n  - 通过`pip install -e ../../node-hub/terminal-input`安装。\n  - 路径为`dynamic`，表示动态路径。\n  - 输出为`data`。\n  - 输入为`readerlm-agent`节点的`readerlm_result`输出。\n\n- **readerlm-agent** 节点：\n  - 通过`pip install -e ../../agent-hub/readerlm`安装。\n  - 路径为`readerlm`。\n  - 输出为`readerlm_result`。\n  - 输入为`terminal-input`节点的`data`输出。\n  - 设置了两个环境变量：`IS_DATAFLOW_END`和`MODEL_DEVICE`。\n\n### 6.5 运行Dataflow\n\n如果你的Dataflow中包含`dynamic`节点，则开启两个命令端界面，否则就开启一个就可以了\n\n要运行Dataflow，使用以下命令：\n\n#### 命令端1\n```bash\ndora up && dora build dataflow.yml && dora start dataflow.yml --attach\n```\n\n#### 命令端2(如果是dynamic节点)\n```bash\nterminal-input\n``` ";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"从零开始构建一个agent的指南","text":"从零开始构建一个Agent的指南"},{"depth":2,"slug":"1-概述","text":"1. 概述"},{"depth":2,"slug":"2-环境准备","text":"2. 环境准备"},{"depth":2,"slug":"3-创建项目结构","text":"3. 创建项目结构"},{"depth":2,"slug":"4-配置agent","text":"4. 配置Agent"},{"depth":3,"slug":"41-运行现有代码并测试完成","text":"4.1 运行现有代码并测试完成"},{"depth":3,"slug":"42-复制mofa-agent-template到某个文件夹下","text":"4.2 复制mofa-agent-template到某个文件夹下"},{"depth":3,"slug":"43-更改文件夹名称","text":"4.3 更改文件夹名称"},{"depth":3,"slug":"44-修改pyprojecttoml的配置","text":"4.4 修改pyproject.toml的配置"},{"depth":3,"slug":"45-将现有代码复制到mainpy中","text":"4.5 将现有代码复制到main.py中"},{"depth":2,"slug":"5-填写readme文件","text":"5. 填写README文件"},{"depth":2,"slug":"6-编写运行agent-dataflow","text":"6. 编写运行Agent-Dataflow"},{"depth":3,"slug":"61-概述","text":"6.1 概述"},{"depth":3,"slug":"62-dataflow配置文件结构","text":"6.2 Dataflow配置文件结构"},{"depth":3,"slug":"63-示例dataflow配置文件","text":"6.3 示例Dataflow配置文件"},{"depth":3,"slug":"64-详细说明","text":"6.4 详细说明"},{"depth":4,"slug":"节点定义","text":"节点定义"},{"depth":4,"slug":"示例说明","text":"示例说明"},{"depth":3,"slug":"65-运行dataflow","text":"6.5 运行Dataflow"},{"depth":4,"slug":"命令端1","text":"命令端1"},{"depth":4,"slug":"命令端2如果是dynamic节点","text":"命令端2(如果是dynamic节点)"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
