import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<p><strong>MoFA: Modular Framework for Agents</strong></p>\n<p>MoFA is a software framework for building AI agents through a composition-based approach. Using MoFA, AI agents can be constructed via templates and combined in layers to form more powerful Super Agents.</p>\n<h2 id=\"why-mofa\">Why MoFA?</h2>\n<p>Building AI agents with MoFA offers:</p>\n<ol>\n<li>\n<p><strong>Modularity</strong>: Modular agent templates and agent services; simple configurations with straightforward interfaces between modules.</p>\n</li>\n<li>\n<p><strong>Clarity</strong>: A “LEGO brick”-style logic for assembling complex systems.</p>\n</li>\n<li>\n<p><strong>Composition</strong>: Agentic applications gain greater capabilities and expand functionalities by putting composable agents together.</p>\n</li>\n<li>\n<p><strong>Simplicity</strong>: Constructing complex agents becomes a zero-code process.</p>\n</li>\n<li>\n<p><strong>High Performance</strong>: Agents operate in the high-performance, low-latency distributed AI and robotics computation environment of DORA-RS.</p>\n</li>\n<li>\n<p><strong>Diversity</strong>: MoFA’s agent composition combines capabilities organically, creating more powerful and comprehensive composite agents.</p>\n</li>\n</ol>\n<h2 id=\"key-features\">Key Features</h2>\n<h3 id=\"nesting-design-patterns-of-ai-agents\">Nesting Design Patterns of AI Agents</h3>\n<p>AI agents are intelligent software applications with various design patterns:</p>\n<ul>\n<li><strong>LLM Inference</strong>: Using large language models for basic inference</li>\n<li><strong>Customized Prompt</strong>: Tailoring system prompts for specific agents</li>\n<li><strong>Reflection Pattern</strong>: Agents capable of self-review and improvement</li>\n<li><strong>Actor Pattern</strong>: Agents with external tool and resource capabilities</li>\n<li><strong>ReAct Pattern</strong>: Combining reflection and tool usage</li>\n<li><strong>Multi-Agent Collaboration</strong>: Specialized agents working together</li>\n</ul>\n<h3 id=\"agent-kernel-services\">Agent Kernel Services</h3>\n<p>MoFA provides core services to agents, including:</p>\n<ul>\n<li>Memory management</li>\n<li>Task planning</li>\n<li>Knowledge base integration</li>\n<li>RAG (Retrieval-Augmented Generation)</li>\n<li>Action capabilities</li>\n</ul>\n<h3 id=\"composition-based-architecture\">Composition-Based Architecture</h3>\n<p>Composition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.</p>\n<h3 id=\"dataflow-driven-approach\">Dataflow-Driven Approach</h3>\n<p>MoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.</p>";

				const frontmatter = {"title":"MoFA Overview","description":"MoFA is a software framework for building AI agents through a composition-based approach"};
				const file = "/Users/liyao/Code/mofa-org.github.io/mofa-website/src/content/docs/0.overview.md";
				const url = undefined;
				function rawContent() {
					return "\n\n**MoFA: Modular Framework for Agents**\n\nMoFA is a software framework for building AI agents through a composition-based approach. Using MoFA, AI agents can be constructed via templates and combined in layers to form more powerful Super Agents.\n\n## Why MoFA?\n\nBuilding AI agents with MoFA offers:\n\n1. **Modularity**: Modular agent templates and agent services; simple configurations with straightforward interfaces between modules.\n\n2. **Clarity**: A \"LEGO brick\"-style logic for assembling complex systems.\n\n3. **Composition**: Agentic applications gain greater capabilities and expand functionalities by putting composable agents together.\n\n4. **Simplicity**: Constructing complex agents becomes a zero-code process.\n\n5. **High Performance**: Agents operate in the high-performance, low-latency distributed AI and robotics computation environment of DORA-RS.\n\n6. **Diversity**: MoFA's agent composition combines capabilities organically, creating more powerful and comprehensive composite agents.\n\n## Key Features\n\n### Nesting Design Patterns of AI Agents\n\nAI agents are intelligent software applications with various design patterns:\n\n- **LLM Inference**: Using large language models for basic inference\n- **Customized Prompt**: Tailoring system prompts for specific agents\n- **Reflection Pattern**: Agents capable of self-review and improvement\n- **Actor Pattern**: Agents with external tool and resource capabilities\n- **ReAct Pattern**: Combining reflection and tool usage\n- **Multi-Agent Collaboration**: Specialized agents working together\n\n### Agent Kernel Services\n\nMoFA provides core services to agents, including:\n- Memory management\n- Task planning\n- Knowledge base integration\n- RAG (Retrieval-Augmented Generation)\n- Action capabilities\n\n### Composition-Based Architecture\n\nComposition allows assembling elements into new entities without changing original components, enabling developers to build and recombine agents for new functionalities.\n\n### Dataflow-Driven Approach\n\nMoFA employs a dataflow-driven method focusing on data dependencies rather than business rules, simplifying and enhancing modularity.\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"why-mofa","text":"Why MoFA?"},{"depth":2,"slug":"key-features","text":"Key Features"},{"depth":3,"slug":"nesting-design-patterns-of-ai-agents","text":"Nesting Design Patterns of AI Agents"},{"depth":3,"slug":"agent-kernel-services","text":"Agent Kernel Services"},{"depth":3,"slug":"composition-based-architecture","text":"Composition-Based Architecture"},{"depth":3,"slug":"dataflow-driven-approach","text":"Dataflow-Driven Approach"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
