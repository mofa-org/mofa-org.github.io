const id = "0.overview.md";
						const collection = "docs";
						const slug = "0overview";
						const body = "\n# MoFA with DoRA\n\n[English](README.md) | [简体中文](README_cn.md)\n\n### DORA\n\n[DORA](https://github.com/dora-rs/dora) is an open-source project implementing a dataflow-oriented middleware,  designed to simplify and streamline the creation of AI-based robotic applications. It provides low-latency, composable, and distributed dataflow functionality. Applications are modeled as directed graphs, also known as Pipelines. DORA naturally offers a multi-agent, multi-process computation environment, as well as a foundation for modularity and composability. MoFA uses DORA as its executor to establish the Agent framework.\n\n### MoFA Agent Templates\n\nThere are specific design patterns for building agents, and MoFA offers a series of implementations of these design patterns as templates for developers to use.\n\n[Design Patterns ](templates/design_patterns.md)\n\n- [Reasoner](templates/reasoner_template.md)\n- [Self Refine](templates/self_refine_template.md)\n- [Crewai](templates/crewai_template.md)\n- ...\n\n### MoFA Composite Agents\n\nMoFA agents built on the Dora-RS framework essentially operate as Dora-RS Dataflows. Two agents can be combined via data connections, forming composite agents.\n\nThe self_refine Agent template mentioned above and the service agents and examples described below are all MoFA composite agents.\n\n### MoFA Service Agents\n\nAgents often require certain services, such as retrieval-augmented generation (RAG), memory, external tool usage, and task planning/decomposition. MoFA follows the principle of \"Everything is an Agent.\" It provides RAG agents, memory agents, planning agents, and action agents as MoFA agents. Developers can connect these pre-implemented service agents to their own agents to gain these services. MoFA also integrates third-party service agents for developers to use based on their needs.\n\n- RAG\n- Memory\n- Action\n- Planning\n\n### Command Line\n\nIn general, you can use the Dora-RS command line to run agents:\n\n1. Install the MoFA project package.\n\n2. Execute the following command to start the agent process:\n\n   ```sh\n   dora up && dora build your_agent_dataflow.yml && dora start your_agent_dataflow.yml --attach\n   ```\n\n3. If the first node of the agent dataflow is a dynamic node used for input/output in Dora, open another terminal and run `terminal-input`. Enter the corresponding tasks to start the Agent process.\n\n### Web Services\n\n### Case Studies\n\n- [Hello World: The Simplest End-to-End Process](examples/hello_world.md)\n  - [Hello World, With Dora-RS & Template](examples/hello_world_dora.md)\n- Composite Agent Examples:\n  - [Simplicity AI](../examples/simplicity_ai/README.md)\n  - [ArXiv Research](../examples/arxiv_research/README.md)\n  - [Agent Fight](../examples/agent_fight/README.md)\n  - [Query Assistant](../examples/query_assistant/README.md)\n\n";
						const data = {title:"MoFA Overview",description:"MoFA is a software framework for building AI agents through a composition-based approach"};
						const _internal = {
							type: 'content',
							filePath: "/home/runner/work/mofa-org.github.io/mofa-org.github.io/mofa-website/src/content/docs/0.overview.md",
							rawData: "\ntitle: MoFA Overview\ndescription: MoFA is a software framework for building AI agents through a composition-based approach",
						};

export { _internal, body, collection, data, id, slug };
