import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro.32e88c90.js';
import 'clsx';

const html = "<p>[cn.md]\nAgents are the core building blocks of MoFA. They are intelligent software components that can process information, make decisions, and perform actions.</p>\n<h2 id=\"what-is-an-agent\">What is an Agent?</h2>\n<p>An agent in MoFA is:</p>\n<ul>\n<li><strong>Autonomous</strong>: Can operate independently</li>\n<li><strong>Reactive</strong>: Responds to messages and events</li>\n<li><strong>Composable</strong>: Can be combined with other agents</li>\n<li><strong>Configurable</strong>: Behavior can be customized</li>\n</ul>\n<h2 id=\"agent-architecture\">Agent Architecture</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Agent(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"my-agent\"</span><span style=\"color:#E1E4E8\">,           </span><span style=\"color:#6A737D\"># Unique identifier</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"gpt-3.5-turbo\"</span><span style=\"color:#E1E4E8\">,     </span><span style=\"color:#6A737D\"># Language model</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    system_prompt</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"...\"</span><span style=\"color:#E1E4E8\">,       </span><span style=\"color:#6A737D\"># Instructions</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    tools</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[],                  </span><span style=\"color:#6A737D\"># Available tools</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    memory</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">None</span><span style=\"color:#E1E4E8\">,               </span><span style=\"color:#6A737D\"># Memory system</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    temperature</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">0.7</span><span style=\"color:#6A737D\">            # Model parameters</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<h2 id=\"agent-types\">Agent Types</h2>\n<h3 id=\"1-basic-agents\">1. Basic Agents</h3>\n<p>Simple agents that process input and generate output:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">basic_agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Agent(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"basic\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"gpt-3.5-turbo\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    system_prompt</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"You are a helpful assistant.\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<h3 id=\"2-tool-using-agents\">2. Tool-Using Agents</h3>\n<p>Agents that can use external tools:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.tools </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> WebSearchTool, CalculatorTool</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">tool_agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Agent(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"tool-user\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"gpt-3.5-turbo\"</span><span style=\"color:#E1E4E8\">, </span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    tools</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">[WebSearchTool(), CalculatorTool()]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<h3 id=\"3-memory-enabled-agents\">3. Memory-Enabled Agents</h3>\n<p>Agents with persistent memory:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> mofa.memory </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> VectorMemory</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">memory_agent </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Agent(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"memory-enabled\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"gpt-3.5-turbo\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    memory</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">VectorMemory()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<h2 id=\"agent-lifecycle\">Agent Lifecycle</h2>\n<ol>\n<li><strong>Initialization</strong>: Agent is created with configuration</li>\n<li><strong>Processing</strong>: Agent receives and processes messages</li>\n<li><strong>Action</strong>: Agent performs computations or tool calls</li>\n<li><strong>Response</strong>: Agent generates and returns output</li>\n</ol>\n<h2 id=\"best-practices\">Best Practices</h2>\n<ul>\n<li><strong>Clear System Prompts</strong>: Write specific, clear instructions</li>\n<li><strong>Appropriate Models</strong>: Choose the right model for your task</li>\n<li><strong>Tool Selection</strong>: Only include necessary tools</li>\n<li><strong>Memory Management</strong>: Use memory efficiently</li>\n<li><strong>Error Handling</strong>: Implement proper error handling</li>\n</ul>";

				const frontmatter = {"title":"Understanding Agents","description":"Learn about MoFA agents, their architecture, and how they work"};
				const file = "/Users/liyao/Code/mofa-org.github.io/mofa-website/src/content/docs/1. concepts/agents.md";
				const url = undefined;
				function rawContent() {
					return "\n[cn.md]\nAgents are the core building blocks of MoFA. They are intelligent software components that can process information, make decisions, and perform actions.\n\n## What is an Agent?\n\nAn agent in MoFA is:\n\n- **Autonomous**: Can operate independently\n- **Reactive**: Responds to messages and events\n- **Composable**: Can be combined with other agents\n- **Configurable**: Behavior can be customized\n\n## Agent Architecture\n\n```python\nagent = Agent(\n    name=\"my-agent\",           # Unique identifier\n    model=\"gpt-3.5-turbo\",     # Language model\n    system_prompt=\"...\",       # Instructions\n    tools=[],                  # Available tools\n    memory=None,               # Memory system\n    temperature=0.7            # Model parameters\n)\n```\n\n## Agent Types\n\n### 1. Basic Agents\nSimple agents that process input and generate output:\n\n```python\nbasic_agent = Agent(\n    name=\"basic\",\n    model=\"gpt-3.5-turbo\",\n    system_prompt=\"You are a helpful assistant.\"\n)\n```\n\n### 2. Tool-Using Agents\nAgents that can use external tools:\n\n```python\nfrom mofa.tools import WebSearchTool, CalculatorTool\n\ntool_agent = Agent(\n    name=\"tool-user\",\n    model=\"gpt-3.5-turbo\", \n    tools=[WebSearchTool(), CalculatorTool()]\n)\n```\n\n### 3. Memory-Enabled Agents\nAgents with persistent memory:\n\n```python\nfrom mofa.memory import VectorMemory\n\nmemory_agent = Agent(\n    name=\"memory-enabled\",\n    model=\"gpt-3.5-turbo\",\n    memory=VectorMemory()\n)\n```\n\n## Agent Lifecycle\n\n1. **Initialization**: Agent is created with configuration\n2. **Processing**: Agent receives and processes messages\n3. **Action**: Agent performs computations or tool calls\n4. **Response**: Agent generates and returns output\n\n## Best Practices\n\n- **Clear System Prompts**: Write specific, clear instructions\n- **Appropriate Models**: Choose the right model for your task\n- **Tool Selection**: Only include necessary tools\n- **Memory Management**: Use memory efficiently\n- **Error Handling**: Implement proper error handling\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"what-is-an-agent","text":"What is an Agent?"},{"depth":2,"slug":"agent-architecture","text":"Agent Architecture"},{"depth":2,"slug":"agent-types","text":"Agent Types"},{"depth":3,"slug":"1-basic-agents","text":"1. Basic Agents"},{"depth":3,"slug":"2-tool-using-agents","text":"2. Tool-Using Agents"},{"depth":3,"slug":"3-memory-enabled-agents","text":"3. Memory-Enabled Agents"},{"depth":2,"slug":"agent-lifecycle","text":"Agent Lifecycle"},{"depth":2,"slug":"best-practices","text":"Best Practices"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
